
VL53L1X_SUMO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cd58  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000284  0800cef8  0800cef8  0001cef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d17c  0800d17c  0001d17c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800d184  0800d184  0001d184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800d188  0800d188  0001d188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000a0  20000000  0800d18c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00006980  200000a0  0800d22c  000200a0  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20006a20  0800d22c  00026a20  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 10 .debug_info   00034298  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000043fc  00000000  00000000  00054368  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00001b90  00000000  00000000  00058768  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000019d8  00000000  00000000  0005a2f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000d5db  00000000  00000000  0005bcd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000bdcf  00000000  00000000  000692ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0007507a  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000792c  00000000  00000000  000750f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000a0 	.word	0x200000a0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800cee0 	.word	0x0800cee0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000a4 	.word	0x200000a4
 80001dc:	0800cee0 	.word	0x0800cee0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b97a 	b.w	800059c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	468c      	mov	ip, r1
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	9e08      	ldr	r6, [sp, #32]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d151      	bne.n	8000374 <__udivmoddi4+0xb4>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d96d      	bls.n	80003b2 <__udivmoddi4+0xf2>
 80002d6:	fab2 fe82 	clz	lr, r2
 80002da:	f1be 0f00 	cmp.w	lr, #0
 80002de:	d00b      	beq.n	80002f8 <__udivmoddi4+0x38>
 80002e0:	f1ce 0c20 	rsb	ip, lr, #32
 80002e4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002e8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002ec:	fa02 f70e 	lsl.w	r7, r2, lr
 80002f0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002f4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002f8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002fc:	0c25      	lsrs	r5, r4, #16
 80002fe:	fbbc f8fa 	udiv	r8, ip, sl
 8000302:	fa1f f987 	uxth.w	r9, r7
 8000306:	fb0a cc18 	mls	ip, sl, r8, ip
 800030a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800030e:	fb08 f309 	mul.w	r3, r8, r9
 8000312:	42ab      	cmp	r3, r5
 8000314:	d90a      	bls.n	800032c <__udivmoddi4+0x6c>
 8000316:	19ed      	adds	r5, r5, r7
 8000318:	f108 32ff 	add.w	r2, r8, #4294967295
 800031c:	f080 8123 	bcs.w	8000566 <__udivmoddi4+0x2a6>
 8000320:	42ab      	cmp	r3, r5
 8000322:	f240 8120 	bls.w	8000566 <__udivmoddi4+0x2a6>
 8000326:	f1a8 0802 	sub.w	r8, r8, #2
 800032a:	443d      	add	r5, r7
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb5 f0fa 	udiv	r0, r5, sl
 8000334:	fb0a 5510 	mls	r5, sl, r0, r5
 8000338:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800033c:	fb00 f909 	mul.w	r9, r0, r9
 8000340:	45a1      	cmp	r9, r4
 8000342:	d909      	bls.n	8000358 <__udivmoddi4+0x98>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	f080 810a 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800034e:	45a1      	cmp	r9, r4
 8000350:	f240 8107 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000354:	3802      	subs	r0, #2
 8000356:	443c      	add	r4, r7
 8000358:	eba4 0409 	sub.w	r4, r4, r9
 800035c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000360:	2100      	movs	r1, #0
 8000362:	2e00      	cmp	r6, #0
 8000364:	d061      	beq.n	800042a <__udivmoddi4+0x16a>
 8000366:	fa24 f40e 	lsr.w	r4, r4, lr
 800036a:	2300      	movs	r3, #0
 800036c:	6034      	str	r4, [r6, #0]
 800036e:	6073      	str	r3, [r6, #4]
 8000370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000374:	428b      	cmp	r3, r1
 8000376:	d907      	bls.n	8000388 <__udivmoddi4+0xc8>
 8000378:	2e00      	cmp	r6, #0
 800037a:	d054      	beq.n	8000426 <__udivmoddi4+0x166>
 800037c:	2100      	movs	r1, #0
 800037e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000382:	4608      	mov	r0, r1
 8000384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000388:	fab3 f183 	clz	r1, r3
 800038c:	2900      	cmp	r1, #0
 800038e:	f040 808e 	bne.w	80004ae <__udivmoddi4+0x1ee>
 8000392:	42ab      	cmp	r3, r5
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xdc>
 8000396:	4282      	cmp	r2, r0
 8000398:	f200 80fa 	bhi.w	8000590 <__udivmoddi4+0x2d0>
 800039c:	1a84      	subs	r4, r0, r2
 800039e:	eb65 0503 	sbc.w	r5, r5, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	46ac      	mov	ip, r5
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d03f      	beq.n	800042a <__udivmoddi4+0x16a>
 80003aa:	e886 1010 	stmia.w	r6, {r4, ip}
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	b912      	cbnz	r2, 80003ba <__udivmoddi4+0xfa>
 80003b4:	2701      	movs	r7, #1
 80003b6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003ba:	fab7 fe87 	clz	lr, r7
 80003be:	f1be 0f00 	cmp.w	lr, #0
 80003c2:	d134      	bne.n	800042e <__udivmoddi4+0x16e>
 80003c4:	1beb      	subs	r3, r5, r7
 80003c6:	0c3a      	lsrs	r2, r7, #16
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	2101      	movs	r1, #1
 80003ce:	fbb3 f8f2 	udiv	r8, r3, r2
 80003d2:	0c25      	lsrs	r5, r4, #16
 80003d4:	fb02 3318 	mls	r3, r2, r8, r3
 80003d8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003dc:	fb0c f308 	mul.w	r3, ip, r8
 80003e0:	42ab      	cmp	r3, r5
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x134>
 80003e4:	19ed      	adds	r5, r5, r7
 80003e6:	f108 30ff 	add.w	r0, r8, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x132>
 80003ec:	42ab      	cmp	r3, r5
 80003ee:	f200 80d1 	bhi.w	8000594 <__udivmoddi4+0x2d4>
 80003f2:	4680      	mov	r8, r0
 80003f4:	1aed      	subs	r5, r5, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003fc:	fb02 5510 	mls	r5, r2, r0, r5
 8000400:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000404:	fb0c fc00 	mul.w	ip, ip, r0
 8000408:	45a4      	cmp	ip, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x15c>
 800040c:	19e4      	adds	r4, r4, r7
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x15a>
 8000414:	45a4      	cmp	ip, r4
 8000416:	f200 80b8 	bhi.w	800058a <__udivmoddi4+0x2ca>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 040c 	sub.w	r4, r4, ip
 8000420:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000424:	e79d      	b.n	8000362 <__udivmoddi4+0xa2>
 8000426:	4631      	mov	r1, r6
 8000428:	4630      	mov	r0, r6
 800042a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042e:	f1ce 0420 	rsb	r4, lr, #32
 8000432:	fa05 f30e 	lsl.w	r3, r5, lr
 8000436:	fa07 f70e 	lsl.w	r7, r7, lr
 800043a:	fa20 f804 	lsr.w	r8, r0, r4
 800043e:	0c3a      	lsrs	r2, r7, #16
 8000440:	fa25 f404 	lsr.w	r4, r5, r4
 8000444:	ea48 0803 	orr.w	r8, r8, r3
 8000448:	fbb4 f1f2 	udiv	r1, r4, r2
 800044c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000450:	fb02 4411 	mls	r4, r2, r1, r4
 8000454:	fa1f fc87 	uxth.w	ip, r7
 8000458:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800045c:	fb01 f30c 	mul.w	r3, r1, ip
 8000460:	42ab      	cmp	r3, r5
 8000462:	fa00 f40e 	lsl.w	r4, r0, lr
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x1bc>
 8000468:	19ed      	adds	r5, r5, r7
 800046a:	f101 30ff 	add.w	r0, r1, #4294967295
 800046e:	f080 808a 	bcs.w	8000586 <__udivmoddi4+0x2c6>
 8000472:	42ab      	cmp	r3, r5
 8000474:	f240 8087 	bls.w	8000586 <__udivmoddi4+0x2c6>
 8000478:	3902      	subs	r1, #2
 800047a:	443d      	add	r5, r7
 800047c:	1aeb      	subs	r3, r5, r3
 800047e:	fa1f f588 	uxth.w	r5, r8
 8000482:	fbb3 f0f2 	udiv	r0, r3, r2
 8000486:	fb02 3310 	mls	r3, r2, r0, r3
 800048a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800048e:	fb00 f30c 	mul.w	r3, r0, ip
 8000492:	42ab      	cmp	r3, r5
 8000494:	d907      	bls.n	80004a6 <__udivmoddi4+0x1e6>
 8000496:	19ed      	adds	r5, r5, r7
 8000498:	f100 38ff 	add.w	r8, r0, #4294967295
 800049c:	d26f      	bcs.n	800057e <__udivmoddi4+0x2be>
 800049e:	42ab      	cmp	r3, r5
 80004a0:	d96d      	bls.n	800057e <__udivmoddi4+0x2be>
 80004a2:	3802      	subs	r0, #2
 80004a4:	443d      	add	r5, r7
 80004a6:	1aeb      	subs	r3, r5, r3
 80004a8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004ac:	e78f      	b.n	80003ce <__udivmoddi4+0x10e>
 80004ae:	f1c1 0720 	rsb	r7, r1, #32
 80004b2:	fa22 f807 	lsr.w	r8, r2, r7
 80004b6:	408b      	lsls	r3, r1
 80004b8:	fa05 f401 	lsl.w	r4, r5, r1
 80004bc:	ea48 0303 	orr.w	r3, r8, r3
 80004c0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004c4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004c8:	40fd      	lsrs	r5, r7
 80004ca:	ea4e 0e04 	orr.w	lr, lr, r4
 80004ce:	fbb5 f9fc 	udiv	r9, r5, ip
 80004d2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004d6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004da:	fa1f f883 	uxth.w	r8, r3
 80004de:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004e2:	fb09 f408 	mul.w	r4, r9, r8
 80004e6:	42ac      	cmp	r4, r5
 80004e8:	fa02 f201 	lsl.w	r2, r2, r1
 80004ec:	fa00 fa01 	lsl.w	sl, r0, r1
 80004f0:	d908      	bls.n	8000504 <__udivmoddi4+0x244>
 80004f2:	18ed      	adds	r5, r5, r3
 80004f4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f8:	d243      	bcs.n	8000582 <__udivmoddi4+0x2c2>
 80004fa:	42ac      	cmp	r4, r5
 80004fc:	d941      	bls.n	8000582 <__udivmoddi4+0x2c2>
 80004fe:	f1a9 0902 	sub.w	r9, r9, #2
 8000502:	441d      	add	r5, r3
 8000504:	1b2d      	subs	r5, r5, r4
 8000506:	fa1f fe8e 	uxth.w	lr, lr
 800050a:	fbb5 f0fc 	udiv	r0, r5, ip
 800050e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000512:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000516:	fb00 f808 	mul.w	r8, r0, r8
 800051a:	45a0      	cmp	r8, r4
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x26e>
 800051e:	18e4      	adds	r4, r4, r3
 8000520:	f100 35ff 	add.w	r5, r0, #4294967295
 8000524:	d229      	bcs.n	800057a <__udivmoddi4+0x2ba>
 8000526:	45a0      	cmp	r8, r4
 8000528:	d927      	bls.n	800057a <__udivmoddi4+0x2ba>
 800052a:	3802      	subs	r0, #2
 800052c:	441c      	add	r4, r3
 800052e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000532:	eba4 0408 	sub.w	r4, r4, r8
 8000536:	fba0 8902 	umull	r8, r9, r0, r2
 800053a:	454c      	cmp	r4, r9
 800053c:	46c6      	mov	lr, r8
 800053e:	464d      	mov	r5, r9
 8000540:	d315      	bcc.n	800056e <__udivmoddi4+0x2ae>
 8000542:	d012      	beq.n	800056a <__udivmoddi4+0x2aa>
 8000544:	b156      	cbz	r6, 800055c <__udivmoddi4+0x29c>
 8000546:	ebba 030e 	subs.w	r3, sl, lr
 800054a:	eb64 0405 	sbc.w	r4, r4, r5
 800054e:	fa04 f707 	lsl.w	r7, r4, r7
 8000552:	40cb      	lsrs	r3, r1
 8000554:	431f      	orrs	r7, r3
 8000556:	40cc      	lsrs	r4, r1
 8000558:	6037      	str	r7, [r6, #0]
 800055a:	6074      	str	r4, [r6, #4]
 800055c:	2100      	movs	r1, #0
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	4618      	mov	r0, r3
 8000564:	e6f8      	b.n	8000358 <__udivmoddi4+0x98>
 8000566:	4690      	mov	r8, r2
 8000568:	e6e0      	b.n	800032c <__udivmoddi4+0x6c>
 800056a:	45c2      	cmp	sl, r8
 800056c:	d2ea      	bcs.n	8000544 <__udivmoddi4+0x284>
 800056e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000572:	eb69 0503 	sbc.w	r5, r9, r3
 8000576:	3801      	subs	r0, #1
 8000578:	e7e4      	b.n	8000544 <__udivmoddi4+0x284>
 800057a:	4628      	mov	r0, r5
 800057c:	e7d7      	b.n	800052e <__udivmoddi4+0x26e>
 800057e:	4640      	mov	r0, r8
 8000580:	e791      	b.n	80004a6 <__udivmoddi4+0x1e6>
 8000582:	4681      	mov	r9, r0
 8000584:	e7be      	b.n	8000504 <__udivmoddi4+0x244>
 8000586:	4601      	mov	r1, r0
 8000588:	e778      	b.n	800047c <__udivmoddi4+0x1bc>
 800058a:	3802      	subs	r0, #2
 800058c:	443c      	add	r4, r7
 800058e:	e745      	b.n	800041c <__udivmoddi4+0x15c>
 8000590:	4608      	mov	r0, r1
 8000592:	e708      	b.n	80003a6 <__udivmoddi4+0xe6>
 8000594:	f1a8 0802 	sub.w	r8, r8, #2
 8000598:	443d      	add	r5, r7
 800059a:	e72b      	b.n	80003f4 <__udivmoddi4+0x134>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <ConvertModeToLLD>:
	return Status;
}

static VL53L1_GPIO_Interrupt_Mode ConvertModeToLLD(VL53L1_Error *pStatus,
		VL53L1_ThresholdMode CrossMode)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b085      	sub	sp, #20
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
 80005a8:	460b      	mov	r3, r1
 80005aa:	70fb      	strb	r3, [r7, #3]
	VL53L1_GPIO_Interrupt_Mode Mode;

	switch (CrossMode) {
 80005ac:	78fb      	ldrb	r3, [r7, #3]
 80005ae:	2b03      	cmp	r3, #3
 80005b0:	d816      	bhi.n	80005e0 <ConvertModeToLLD+0x40>
 80005b2:	a201      	add	r2, pc, #4	; (adr r2, 80005b8 <ConvertModeToLLD+0x18>)
 80005b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005b8:	080005c9 	.word	0x080005c9
 80005bc:	080005cf 	.word	0x080005cf
 80005c0:	080005d5 	.word	0x080005d5
 80005c4:	080005db 	.word	0x080005db
	case VL53L1_THRESHOLD_CROSSED_LOW:
		Mode = VL53L1_GPIOINTMODE_LEVEL_LOW;
 80005c8:	2300      	movs	r3, #0
 80005ca:	73fb      	strb	r3, [r7, #15]
		break;
 80005cc:	e00d      	b.n	80005ea <ConvertModeToLLD+0x4a>
	case VL53L1_THRESHOLD_CROSSED_HIGH:
		Mode = VL53L1_GPIOINTMODE_LEVEL_HIGH;
 80005ce:	2301      	movs	r3, #1
 80005d0:	73fb      	strb	r3, [r7, #15]
		break;
 80005d2:	e00a      	b.n	80005ea <ConvertModeToLLD+0x4a>
	case VL53L1_THRESHOLD_OUT_OF_WINDOW:
		Mode = VL53L1_GPIOINTMODE_OUT_OF_WINDOW;
 80005d4:	2302      	movs	r3, #2
 80005d6:	73fb      	strb	r3, [r7, #15]
		break;
 80005d8:	e007      	b.n	80005ea <ConvertModeToLLD+0x4a>
	case VL53L1_THRESHOLD_IN_WINDOW:
		Mode = VL53L1_GPIOINTMODE_IN_WINDOW;
 80005da:	2303      	movs	r3, #3
 80005dc:	73fb      	strb	r3, [r7, #15]
		break;
 80005de:	e004      	b.n	80005ea <ConvertModeToLLD+0x4a>
	default:
		/* define Mode to avoid warning but actual value doesn't mind */
		Mode = VL53L1_GPIOINTMODE_LEVEL_HIGH;
 80005e0:	2301      	movs	r3, #1
 80005e2:	73fb      	strb	r3, [r7, #15]
		*pStatus = VL53L1_ERROR_INVALID_PARAMS;
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	22fc      	movs	r2, #252	; 0xfc
 80005e8:	701a      	strb	r2, [r3, #0]
	}
	return Mode;
 80005ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80005ec:	4618      	mov	r0, r3
 80005ee:	3714      	adds	r7, #20
 80005f0:	46bd      	mov	sp, r7
 80005f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f6:	4770      	bx	lr

080005f8 <VL53L1_SetDeviceAddress>:

/* End Group PAL General Functions */

/* Group PAL Init Functions */
VL53L1_Error VL53L1_SetDeviceAddress(VL53L1_DEV Dev, uint8_t DeviceAddress)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
 8000600:	460b      	mov	r3, r1
 8000602:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8000604:	2300      	movs	r3, #0
 8000606:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L1_WrByte(Dev, VL53L1_I2C_SLAVE__DEVICE_ADDRESS,
 8000608:	78fb      	ldrb	r3, [r7, #3]
 800060a:	085b      	lsrs	r3, r3, #1
 800060c:	b2db      	uxtb	r3, r3
 800060e:	461a      	mov	r2, r3
 8000610:	2101      	movs	r1, #1
 8000612:	6878      	ldr	r0, [r7, #4]
 8000614:	f005 fc4e 	bl	8005eb4 <VL53L1_WrByte>
 8000618:	4603      	mov	r3, r0
 800061a:	73fb      	strb	r3, [r7, #15]
			DeviceAddress / 2);

	LOG_FUNCTION_END(Status);
	return Status;
 800061c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000620:	4618      	mov	r0, r3
 8000622:	3710      	adds	r7, #16
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}

08000628 <VL53L1_DataInit>:

VL53L1_Error VL53L1_DataInit(VL53L1_DEV Dev)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b084      	sub	sp, #16
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8000630:	2300      	movs	r3, #0
 8000632:	73fb      	strb	r3, [r7, #15]
		Status = VL53L1_WrByte(Dev, VL53L1_PAD_I2C_HV__EXTSUP_CONFIG,
				i);
	}
#endif

	if (Status == VL53L1_ERROR_NONE)
 8000634:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000638:	2b00      	cmp	r3, #0
 800063a:	d105      	bne.n	8000648 <VL53L1_DataInit+0x20>
		Status = VL53L1_data_init(Dev, 1);
 800063c:	2101      	movs	r1, #1
 800063e:	6878      	ldr	r0, [r7, #4]
 8000640:	f001 f90c 	bl	800185c <VL53L1_data_init>
 8000644:	4603      	mov	r3, r0
 8000646:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L1_ERROR_NONE) {
 8000648:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d107      	bne.n	8000660 <VL53L1_DataInit+0x38>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_WAIT_STATICINIT);
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	2201      	movs	r2, #1
 8000654:	f883 2378 	strb.w	r2, [r3, #888]	; 0x378
		VL53L1DevDataSet(Dev, CurrentParameters.PresetMode,
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	2208      	movs	r2, #8
 800065c:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c
				VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS);
	}

	/* Enable all check */
	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8000660:	2300      	movs	r3, #0
 8000662:	73bb      	strb	r3, [r7, #14]
 8000664:	e012      	b.n	800068c <VL53L1_DataInit+0x64>
		if (Status == VL53L1_ERROR_NONE)
 8000666:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800066a:	2b00      	cmp	r3, #0
 800066c:	d112      	bne.n	8000694 <VL53L1_DataInit+0x6c>
			Status |= VL53L1_SetLimitCheckEnable(Dev, i, 1);
 800066e:	7bbb      	ldrb	r3, [r7, #14]
 8000670:	b29b      	uxth	r3, r3
 8000672:	2201      	movs	r2, #1
 8000674:	4619      	mov	r1, r3
 8000676:	6878      	ldr	r0, [r7, #4]
 8000678:	f000 fbf1 	bl	8000e5e <VL53L1_SetLimitCheckEnable>
 800067c:	4603      	mov	r3, r0
 800067e:	461a      	mov	r2, r3
 8000680:	7bfb      	ldrb	r3, [r7, #15]
 8000682:	4313      	orrs	r3, r2
 8000684:	73fb      	strb	r3, [r7, #15]
	for (i = 0; i < VL53L1_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8000686:	7bbb      	ldrb	r3, [r7, #14]
 8000688:	3301      	adds	r3, #1
 800068a:	73bb      	strb	r3, [r7, #14]
 800068c:	7bbb      	ldrb	r3, [r7, #14]
 800068e:	2b01      	cmp	r3, #1
 8000690:	d9e9      	bls.n	8000666 <VL53L1_DataInit+0x3e>
 8000692:	e000      	b.n	8000696 <VL53L1_DataInit+0x6e>
		else
			break;
 8000694:	bf00      	nop

	}

	/* Limit default values */
	if (Status == VL53L1_ERROR_NONE) {
 8000696:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800069a:	2b00      	cmp	r3, #0
 800069c:	d107      	bne.n	80006ae <VL53L1_DataInit+0x86>
		Status = VL53L1_SetLimitCheckValue(Dev,
 800069e:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 80006a2:	2100      	movs	r1, #0
 80006a4:	6878      	ldr	r0, [r7, #4]
 80006a6:	f000 fc3b 	bl	8000f20 <VL53L1_SetLimitCheckValue>
 80006aa:	4603      	mov	r3, r0
 80006ac:	73fb      	strb	r3, [r7, #15]
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L1_ERROR_NONE) {
 80006ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d107      	bne.n	80006c6 <VL53L1_DataInit+0x9e>
		Status = VL53L1_SetLimitCheckValue(Dev,
 80006b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006ba:	2101      	movs	r1, #1
 80006bc:	6878      	ldr	r0, [r7, #4]
 80006be:	f000 fc2f 	bl	8000f20 <VL53L1_SetLimitCheckValue>
 80006c2:	4603      	mov	r3, r0
 80006c4:	73fb      	strb	r3, [r7, #15]
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80006c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80006ca:	4618      	mov	r0, r3
 80006cc:	3710      	adds	r7, #16
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}

080006d2 <VL53L1_StaticInit>:


VL53L1_Error VL53L1_StaticInit(VL53L1_DEV Dev)
{
 80006d2:	b580      	push	{r7, lr}
 80006d4:	b084      	sub	sp, #16
 80006d6:	af00      	add	r7, sp, #0
 80006d8:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80006da:	2300      	movs	r3, #0
 80006dc:	73fb      	strb	r3, [r7, #15]
	uint8_t  measurement_mode;

	LOG_FUNCTION_START("");

	VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_IDLE);
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	2203      	movs	r2, #3
 80006e2:	f883 2378 	strb.w	r2, [r3, #888]	; 0x378

	measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 80006e6:	2320      	movs	r3, #32
 80006e8:	73bb      	strb	r3, [r7, #14]
	VL53L1DevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	7bba      	ldrb	r2, [r7, #14]
 80006ee:	709a      	strb	r2, [r3, #2]

	VL53L1DevDataSet(Dev, CurrentParameters.NewDistanceMode,
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	2203      	movs	r2, #3
 80006f4:	f883 237f 	strb.w	r2, [r3, #895]	; 0x37f
			VL53L1_DISTANCEMODE_LONG);

	VL53L1DevDataSet(Dev, CurrentParameters.InternalDistanceMode,
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	2203      	movs	r2, #3
 80006fc:	f883 237e 	strb.w	r2, [r3, #894]	; 0x37e
			VL53L1_DISTANCEMODE_LONG);

	VL53L1DevDataSet(Dev, CurrentParameters.DistanceMode,
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	2203      	movs	r2, #3
 8000704:	f883 237d 	strb.w	r2, [r3, #893]	; 0x37d
			VL53L1_DISTANCEMODE_LONG);

	/* ticket 472728 fix */
	Status = VL53L1_SetPresetMode(Dev,
 8000708:	2108      	movs	r1, #8
 800070a:	6878      	ldr	r0, [r7, #4]
 800070c:	f000 f8ed 	bl	80008ea <VL53L1_SetPresetMode>
 8000710:	4603      	mov	r3, r0
 8000712:	73fb      	strb	r3, [r7, #15]
			VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS);
	/* end of ticket 472728 fix */
	LOG_FUNCTION_END(Status);
	return Status;
 8000714:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000718:	4618      	mov	r0, r3
 800071a:	3710      	adds	r7, #16
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}

08000720 <VL53L1_WaitDeviceBooted>:

VL53L1_Error VL53L1_WaitDeviceBooted(VL53L1_DEV Dev)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b084      	sub	sp, #16
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8000728:	2300      	movs	r3, #0
 800072a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	Status = VL53L1_poll_for_boot_completion(Dev,
 800072c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000730:	6878      	ldr	r0, [r7, #4]
 8000732:	f005 fae4 	bl	8005cfe <VL53L1_poll_for_boot_completion>
 8000736:	4603      	mov	r3, r0
 8000738:	73fb      	strb	r3, [r7, #15]
			VL53L1_BOOT_COMPLETION_POLLING_TIMEOUT_MS);

	LOG_FUNCTION_END(Status);
	return Status;
 800073a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800073e:	4618      	mov	r0, r3
 8000740:	3710      	adds	r7, #16
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
	...

08000748 <ComputeDevicePresetMode>:
/* Group PAL Parameters Functions */
static VL53L1_Error ComputeDevicePresetMode(
		VL53L1_PresetModes PresetMode,
		VL53L1_DistanceModes DistanceMode,
		VL53L1_DevicePresetModes *pDevicePresetMode)
{
 8000748:	b480      	push	{r7}
 800074a:	b087      	sub	sp, #28
 800074c:	af00      	add	r7, sp, #0
 800074e:	4603      	mov	r3, r0
 8000750:	603a      	str	r2, [r7, #0]
 8000752:	71fb      	strb	r3, [r7, #7]
 8000754:	460b      	mov	r3, r1
 8000756:	71bb      	strb	r3, [r7, #6]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8000758:	2300      	movs	r3, #0
 800075a:	75fb      	strb	r3, [r7, #23]

	uint8_t DistIdx;
	VL53L1_DevicePresetModes LightModes[3] = {
 800075c:	4a2c      	ldr	r2, [pc, #176]	; (8000810 <ComputeDevicePresetMode+0xc8>)
 800075e:	f107 0310 	add.w	r3, r7, #16
 8000762:	6812      	ldr	r2, [r2, #0]
 8000764:	4611      	mov	r1, r2
 8000766:	8019      	strh	r1, [r3, #0]
 8000768:	3302      	adds	r3, #2
 800076a:	0c12      	lsrs	r2, r2, #16
 800076c:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING,
		VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE};


	VL53L1_DevicePresetModes TimedModes[3] = {
 800076e:	4a29      	ldr	r2, [pc, #164]	; (8000814 <ComputeDevicePresetMode+0xcc>)
 8000770:	f107 030c 	add.w	r3, r7, #12
 8000774:	6812      	ldr	r2, [r2, #0]
 8000776:	4611      	mov	r1, r2
 8000778:	8019      	strh	r1, [r3, #0]
 800077a:	3302      	adds	r3, #2
 800077c:	0c12      	lsrs	r2, r2, #16
 800077e:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING,
		VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE};

	VL53L1_DevicePresetModes LowPowerTimedModes[3] = {
 8000780:	4a25      	ldr	r2, [pc, #148]	; (8000818 <ComputeDevicePresetMode+0xd0>)
 8000782:	f107 0308 	add.w	r3, r7, #8
 8000786:	6812      	ldr	r2, [r2, #0]
 8000788:	4611      	mov	r1, r2
 800078a:	8019      	strh	r1, [r3, #0]
 800078c:	3302      	adds	r3, #2
 800078e:	0c12      	lsrs	r2, r2, #16
 8000790:	701a      	strb	r2, [r3, #0]
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE,
		VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE};

	*pDevicePresetMode = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 8000792:	683b      	ldr	r3, [r7, #0]
 8000794:	2201      	movs	r2, #1
 8000796:	701a      	strb	r2, [r3, #0]

	switch (DistanceMode) {
 8000798:	79bb      	ldrb	r3, [r7, #6]
 800079a:	2b01      	cmp	r3, #1
 800079c:	d002      	beq.n	80007a4 <ComputeDevicePresetMode+0x5c>
 800079e:	2b02      	cmp	r3, #2
 80007a0:	d003      	beq.n	80007aa <ComputeDevicePresetMode+0x62>
 80007a2:	e005      	b.n	80007b0 <ComputeDevicePresetMode+0x68>
	case VL53L1_DISTANCEMODE_SHORT:
		DistIdx = 0;
 80007a4:	2300      	movs	r3, #0
 80007a6:	75bb      	strb	r3, [r7, #22]
		break;
 80007a8:	e004      	b.n	80007b4 <ComputeDevicePresetMode+0x6c>
	case VL53L1_DISTANCEMODE_MEDIUM:
		DistIdx = 1;
 80007aa:	2301      	movs	r3, #1
 80007ac:	75bb      	strb	r3, [r7, #22]
		break;
 80007ae:	e001      	b.n	80007b4 <ComputeDevicePresetMode+0x6c>
	default:
		DistIdx = 2;
 80007b0:	2302      	movs	r3, #2
 80007b2:	75bb      	strb	r3, [r7, #22]
	}

	switch (PresetMode) {
 80007b4:	79fb      	ldrb	r3, [r7, #7]
 80007b6:	2b04      	cmp	r3, #4
 80007b8:	d004      	beq.n	80007c4 <ComputeDevicePresetMode+0x7c>
 80007ba:	2b08      	cmp	r3, #8
 80007bc:	d014      	beq.n	80007e8 <ComputeDevicePresetMode+0xa0>
 80007be:	2b03      	cmp	r3, #3
 80007c0:	d009      	beq.n	80007d6 <ComputeDevicePresetMode+0x8e>
 80007c2:	e01a      	b.n	80007fa <ComputeDevicePresetMode+0xb2>
	case VL53L1_PRESETMODE_LITE_RANGING:
		*pDevicePresetMode = LightModes[DistIdx];
 80007c4:	7dbb      	ldrb	r3, [r7, #22]
 80007c6:	f107 0218 	add.w	r2, r7, #24
 80007ca:	4413      	add	r3, r2
 80007cc:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80007d0:	683b      	ldr	r3, [r7, #0]
 80007d2:	701a      	strb	r2, [r3, #0]
		break;
 80007d4:	e013      	b.n	80007fe <ComputeDevicePresetMode+0xb6>


	case VL53L1_PRESETMODE_AUTONOMOUS:
		*pDevicePresetMode = TimedModes[DistIdx];
 80007d6:	7dbb      	ldrb	r3, [r7, #22]
 80007d8:	f107 0218 	add.w	r2, r7, #24
 80007dc:	4413      	add	r3, r2
 80007de:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	701a      	strb	r2, [r3, #0]
		break;
 80007e6:	e00a      	b.n	80007fe <ComputeDevicePresetMode+0xb6>

	case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
		*pDevicePresetMode = LowPowerTimedModes[DistIdx];
 80007e8:	7dbb      	ldrb	r3, [r7, #22]
 80007ea:	f107 0218 	add.w	r2, r7, #24
 80007ee:	4413      	add	r3, r2
 80007f0:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 80007f4:	683b      	ldr	r3, [r7, #0]
 80007f6:	701a      	strb	r2, [r3, #0]
		break;
 80007f8:	e001      	b.n	80007fe <ComputeDevicePresetMode+0xb6>

	default:
		/* Unsupported mode */
		Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 80007fa:	23f8      	movs	r3, #248	; 0xf8
 80007fc:	75fb      	strb	r3, [r7, #23]
	}

	return Status;
 80007fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000802:	4618      	mov	r0, r3
 8000804:	371c      	adds	r7, #28
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	0800cf24 	.word	0x0800cf24
 8000814:	0800cf28 	.word	0x0800cf28
 8000818:	0800cf2c 	.word	0x0800cf2c

0800081c <SetPresetMode>:

static VL53L1_Error SetPresetMode(VL53L1_DEV Dev,
		VL53L1_PresetModes PresetMode,
		VL53L1_DistanceModes DistanceMode,
		uint32_t inter_measurement_period_ms)
{
 800081c:	b5b0      	push	{r4, r5, r7, lr}
 800081e:	b08e      	sub	sp, #56	; 0x38
 8000820:	af04      	add	r7, sp, #16
 8000822:	60f8      	str	r0, [r7, #12]
 8000824:	607b      	str	r3, [r7, #4]
 8000826:	460b      	mov	r3, r1
 8000828:	72fb      	strb	r3, [r7, #11]
 800082a:	4613      	mov	r3, r2
 800082c:	72bb      	strb	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800082e:	2300      	movs	r3, #0
 8000830:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t mm_config_timeout_us;
	uint32_t lld_range_config_timeout_us;

	LOG_FUNCTION_START("%d", (int)PresetMode);

	if ((PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 8000834:	7afb      	ldrb	r3, [r7, #11]
 8000836:	2b03      	cmp	r3, #3
 8000838:	d002      	beq.n	8000840 <SetPresetMode+0x24>
 800083a:	7afb      	ldrb	r3, [r7, #11]
 800083c:	2b08      	cmp	r3, #8
 800083e:	d103      	bne.n	8000848 <SetPresetMode+0x2c>
		(PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_TIMED;
 8000840:	2340      	movs	r3, #64	; 0x40
 8000842:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000846:	e002      	b.n	800084e <SetPresetMode+0x32>
	else
		measurement_mode  = VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;
 8000848:	2320      	movs	r3, #32
 800084a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26


	Status = ComputeDevicePresetMode(PresetMode, DistanceMode,
 800084e:	f107 0225 	add.w	r2, r7, #37	; 0x25
 8000852:	7ab9      	ldrb	r1, [r7, #10]
 8000854:	7afb      	ldrb	r3, [r7, #11]
 8000856:	4618      	mov	r0, r3
 8000858:	f7ff ff76 	bl	8000748 <ComputeDevicePresetMode>
 800085c:	4603      	mov	r3, r0
 800085e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			&device_preset_mode);

	if (Status == VL53L1_ERROR_NONE)
 8000862:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8000866:	2b00      	cmp	r3, #0
 8000868:	d112      	bne.n	8000890 <SetPresetMode+0x74>
		Status =  VL53L1_get_preset_mode_timing_cfg(Dev,
 800086a:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 800086e:	f107 001c 	add.w	r0, r7, #28
 8000872:	f107 0222 	add.w	r2, r7, #34	; 0x22
 8000876:	f107 0314 	add.w	r3, r7, #20
 800087a:	9301      	str	r3, [sp, #4]
 800087c:	f107 0318 	add.w	r3, r7, #24
 8000880:	9300      	str	r3, [sp, #0]
 8000882:	4603      	mov	r3, r0
 8000884:	68f8      	ldr	r0, [r7, #12]
 8000886:	f001 faa9 	bl	8001ddc <VL53L1_get_preset_mode_timing_cfg>
 800088a:	4603      	mov	r3, r0
 800088c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&dss_config__target_total_rate_mcps,
				&phasecal_config_timeout_us,
				&mm_config_timeout_us,
				&lld_range_config_timeout_us);

	if (Status == VL53L1_ERROR_NONE)
 8000890:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8000894:	2b00      	cmp	r3, #0
 8000896:	d112      	bne.n	80008be <SetPresetMode+0xa2>
		Status = VL53L1_set_preset_mode(
 8000898:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
 800089c:	8c7c      	ldrh	r4, [r7, #34]	; 0x22
 800089e:	69fd      	ldr	r5, [r7, #28]
 80008a0:	69bb      	ldr	r3, [r7, #24]
 80008a2:	697a      	ldr	r2, [r7, #20]
 80008a4:	6879      	ldr	r1, [r7, #4]
 80008a6:	9102      	str	r1, [sp, #8]
 80008a8:	9201      	str	r2, [sp, #4]
 80008aa:	9300      	str	r3, [sp, #0]
 80008ac:	462b      	mov	r3, r5
 80008ae:	4622      	mov	r2, r4
 80008b0:	4601      	mov	r1, r0
 80008b2:	68f8      	ldr	r0, [r7, #12]
 80008b4:	f001 fb3c 	bl	8001f30 <VL53L1_set_preset_mode>
 80008b8:	4603      	mov	r3, r0
 80008ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				lld_range_config_timeout_us,
				inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE)
 80008be:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d103      	bne.n	80008ce <SetPresetMode+0xb2>
		VL53L1DevDataSet(Dev, LLData.measurement_mode, measurement_mode);
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80008cc:	709a      	strb	r2, [r3, #2]

	if (Status == VL53L1_ERROR_NONE)
 80008ce:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d103      	bne.n	80008de <SetPresetMode+0xc2>
		VL53L1DevDataSet(Dev, CurrentParameters.PresetMode, PresetMode);
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	7afa      	ldrb	r2, [r7, #11]
 80008da:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c

	LOG_FUNCTION_END(Status);
	return Status;
 80008de:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	3728      	adds	r7, #40	; 0x28
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bdb0      	pop	{r4, r5, r7, pc}

080008ea <VL53L1_SetPresetMode>:

VL53L1_Error VL53L1_SetPresetMode(VL53L1_DEV Dev, VL53L1_PresetModes PresetMode)
{
 80008ea:	b580      	push	{r7, lr}
 80008ec:	b084      	sub	sp, #16
 80008ee:	af00      	add	r7, sp, #0
 80008f0:	6078      	str	r0, [r7, #4]
 80008f2:	460b      	mov	r3, r1
 80008f4:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80008f6:	2300      	movs	r3, #0
 80008f8:	73fb      	strb	r3, [r7, #15]
	VL53L1_DistanceModes DistanceMode = VL53L1_DISTANCEMODE_LONG;
 80008fa:	2303      	movs	r3, #3
 80008fc:	73bb      	strb	r3, [r7, #14]

	LOG_FUNCTION_START("%d", (int)PresetMode);

	Status = SetPresetMode(Dev,
 80008fe:	7bba      	ldrb	r2, [r7, #14]
 8000900:	78f9      	ldrb	r1, [r7, #3]
 8000902:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000906:	6878      	ldr	r0, [r7, #4]
 8000908:	f7ff ff88 	bl	800081c <SetPresetMode>
 800090c:	4603      	mov	r3, r0
 800090e:	73fb      	strb	r3, [r7, #15]
			PresetMode,
			DistanceMode,
			1000);

	if (Status == VL53L1_ERROR_NONE) {
 8000910:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d11f      	bne.n	8000958 <VL53L1_SetPresetMode+0x6e>
		VL53L1DevDataSet(Dev, CurrentParameters.InternalDistanceMode,
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	7bba      	ldrb	r2, [r7, #14]
 800091c:	f883 237e 	strb.w	r2, [r3, #894]	; 0x37e
				DistanceMode);

		VL53L1DevDataSet(Dev, CurrentParameters.NewDistanceMode,
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	7bba      	ldrb	r2, [r7, #14]
 8000924:	f883 237f 	strb.w	r2, [r3, #895]	; 0x37f
				DistanceMode);

		if ((PresetMode == VL53L1_PRESETMODE_LITE_RANGING) ||
 8000928:	78fb      	ldrb	r3, [r7, #3]
 800092a:	2b04      	cmp	r3, #4
 800092c:	d005      	beq.n	800093a <VL53L1_SetPresetMode+0x50>
 800092e:	78fb      	ldrb	r3, [r7, #3]
 8000930:	2b03      	cmp	r3, #3
 8000932:	d002      	beq.n	800093a <VL53L1_SetPresetMode+0x50>
			(PresetMode == VL53L1_PRESETMODE_AUTONOMOUS) ||
 8000934:	78fb      	ldrb	r3, [r7, #3]
 8000936:	2b08      	cmp	r3, #8
 8000938:	d107      	bne.n	800094a <VL53L1_SetPresetMode+0x60>
			(PresetMode == VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS))
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 800093a:	f24a 0128 	movw	r1, #41000	; 0xa028
 800093e:	6878      	ldr	r0, [r7, #4]
 8000940:	f000 f8a2 	bl	8000a88 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 8000944:	4603      	mov	r3, r0
 8000946:	73fb      	strb	r3, [r7, #15]
 8000948:	e006      	b.n	8000958 <VL53L1_SetPresetMode+0x6e>
				Dev, 41000);
		else
			/* Set default timing budget to 30Hz (33.33 ms)*/
			Status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(
 800094a:	f248 2135 	movw	r1, #33333	; 0x8235
 800094e:	6878      	ldr	r0, [r7, #4]
 8000950:	f000 f89a 	bl	8000a88 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 8000954:	4603      	mov	r3, r0
 8000956:	73fb      	strb	r3, [r7, #15]
				Dev, 33333);
	}

	if (Status == VL53L1_ERROR_NONE) {
 8000958:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d106      	bne.n	800096e <VL53L1_SetPresetMode+0x84>
		/* Set default intermeasurement period to 1000 ms */
		Status = VL53L1_SetInterMeasurementPeriodMilliSeconds(Dev,
 8000960:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000964:	6878      	ldr	r0, [r7, #4]
 8000966:	f000 fa0d 	bl	8000d84 <VL53L1_SetInterMeasurementPeriodMilliSeconds>
 800096a:	4603      	mov	r3, r0
 800096c:	73fb      	strb	r3, [r7, #15]
				1000);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800096e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000972:	4618      	mov	r0, r3
 8000974:	3710      	adds	r7, #16
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}

0800097a <VL53L1_SetDistanceMode>:
	return Status;
}

VL53L1_Error VL53L1_SetDistanceMode(VL53L1_DEV Dev,
		VL53L1_DistanceModes DistanceMode)
{
 800097a:	b580      	push	{r7, lr}
 800097c:	b088      	sub	sp, #32
 800097e:	af00      	add	r7, sp, #0
 8000980:	6078      	str	r0, [r7, #4]
 8000982:	460b      	mov	r3, r1
 8000984:	70fb      	strb	r3, [r7, #3]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8000986:	2300      	movs	r3, #0
 8000988:	77fb      	strb	r3, [r7, #31]
	uint32_t PhaseCalTimeoutUs;
	VL53L1_user_zone_t user_zone;

	LOG_FUNCTION_START("%d", (int)DistanceMode);

	PresetMode = VL53L1DevDataGet(Dev, CurrentParameters.PresetMode);
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	f893 337c 	ldrb.w	r3, [r3, #892]	; 0x37c
 8000990:	777b      	strb	r3, [r7, #29]
	/* when the distance mode is valid:
	 * Manual Mode: all modes
	 * AUTO AUTO_LITE : LITE_RANGING, RANGING
	 */

	if ((DistanceMode != VL53L1_DISTANCEMODE_SHORT) &&
 8000992:	78fb      	ldrb	r3, [r7, #3]
 8000994:	2b01      	cmp	r3, #1
 8000996:	d008      	beq.n	80009aa <VL53L1_SetDistanceMode+0x30>
 8000998:	78fb      	ldrb	r3, [r7, #3]
 800099a:	2b02      	cmp	r3, #2
 800099c:	d005      	beq.n	80009aa <VL53L1_SetDistanceMode+0x30>
		(DistanceMode != VL53L1_DISTANCEMODE_MEDIUM) &&
 800099e:	78fb      	ldrb	r3, [r7, #3]
 80009a0:	2b03      	cmp	r3, #3
 80009a2:	d002      	beq.n	80009aa <VL53L1_SetDistanceMode+0x30>
		(DistanceMode != VL53L1_DISTANCEMODE_LONG))
		return VL53L1_ERROR_INVALID_PARAMS;
 80009a4:	f06f 0303 	mvn.w	r3, #3
 80009a8:	e069      	b.n	8000a7e <VL53L1_SetDistanceMode+0x104>

	/* The internal distance mode is limited to Short, Medium or
	 * long only
	*/
	if (Status == VL53L1_ERROR_NONE) {
 80009aa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d10a      	bne.n	80009c8 <VL53L1_SetDistanceMode+0x4e>
		if ((DistanceMode == VL53L1_DISTANCEMODE_SHORT) ||
 80009b2:	78fb      	ldrb	r3, [r7, #3]
 80009b4:	2b01      	cmp	r3, #1
 80009b6:	d002      	beq.n	80009be <VL53L1_SetDistanceMode+0x44>
 80009b8:	78fb      	ldrb	r3, [r7, #3]
 80009ba:	2b02      	cmp	r3, #2
 80009bc:	d102      	bne.n	80009c4 <VL53L1_SetDistanceMode+0x4a>
			(DistanceMode == VL53L1_DISTANCEMODE_MEDIUM))
			InternalDistanceMode = DistanceMode;
 80009be:	78fb      	ldrb	r3, [r7, #3]
 80009c0:	77bb      	strb	r3, [r7, #30]
 80009c2:	e001      	b.n	80009c8 <VL53L1_SetDistanceMode+0x4e>
		else /* (DistanceMode == VL53L1_DISTANCEMODE_LONG) */
			InternalDistanceMode = VL53L1_DISTANCEMODE_LONG;
 80009c4:	2303      	movs	r3, #3
 80009c6:	77bb      	strb	r3, [r7, #30]
	}

	if (Status == VL53L1_ERROR_NONE)
 80009c8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d107      	bne.n	80009e0 <VL53L1_SetDistanceMode+0x66>
		Status = VL53L1_get_user_zone(Dev, &user_zone);
 80009d0:	f107 0308 	add.w	r3, r7, #8
 80009d4:	4619      	mov	r1, r3
 80009d6:	6878      	ldr	r0, [r7, #4]
 80009d8:	f001 f9a9 	bl	8001d2e <VL53L1_get_user_zone>
 80009dc:	4603      	mov	r3, r0
 80009de:	77fb      	strb	r3, [r7, #31]

	inter_measurement_period_ms =  VL53L1DevDataGet(Dev,
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	695b      	ldr	r3, [r3, #20]
 80009e4:	61bb      	str	r3, [r7, #24]
				LLData.inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE)
 80009e6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d10a      	bne.n	8000a04 <VL53L1_SetDistanceMode+0x8a>
		Status = VL53L1_get_timeouts_us(Dev, &PhaseCalTimeoutUs,
 80009ee:	f107 0314 	add.w	r3, r7, #20
 80009f2:	f107 0210 	add.w	r2, r7, #16
 80009f6:	f107 010c 	add.w	r1, r7, #12
 80009fa:	6878      	ldr	r0, [r7, #4]
 80009fc:	f001 f8d2 	bl	8001ba4 <VL53L1_get_timeouts_us>
 8000a00:	4603      	mov	r3, r0
 8000a02:	77fb      	strb	r3, [r7, #31]
			&MmTimeoutUs, &TimingBudget);

	if (Status == VL53L1_ERROR_NONE)
 8000a04:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d107      	bne.n	8000a1c <VL53L1_SetDistanceMode+0xa2>
		Status = SetPresetMode(Dev,
 8000a0c:	7fba      	ldrb	r2, [r7, #30]
 8000a0e:	7f79      	ldrb	r1, [r7, #29]
 8000a10:	69bb      	ldr	r3, [r7, #24]
 8000a12:	6878      	ldr	r0, [r7, #4]
 8000a14:	f7ff ff02 	bl	800081c <SetPresetMode>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	77fb      	strb	r3, [r7, #31]
				PresetMode,
				InternalDistanceMode,
				inter_measurement_period_ms);

	if (Status == VL53L1_ERROR_NONE) {
 8000a1c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d10b      	bne.n	8000a3c <VL53L1_SetDistanceMode+0xc2>
		VL53L1DevDataSet(Dev, CurrentParameters.InternalDistanceMode,
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	7fba      	ldrb	r2, [r7, #30]
 8000a28:	f883 237e 	strb.w	r2, [r3, #894]	; 0x37e
				InternalDistanceMode);
		VL53L1DevDataSet(Dev, CurrentParameters.NewDistanceMode,
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	7fba      	ldrb	r2, [r7, #30]
 8000a30:	f883 237f 	strb.w	r2, [r3, #895]	; 0x37f
				InternalDistanceMode);
		VL53L1DevDataSet(Dev, CurrentParameters.DistanceMode,
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	78fa      	ldrb	r2, [r7, #3]
 8000a38:	f883 237d 	strb.w	r2, [r3, #893]	; 0x37d
				DistanceMode);
	}

	if (Status == VL53L1_ERROR_NONE) {
 8000a3c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d10e      	bne.n	8000a62 <VL53L1_SetDistanceMode+0xe8>
		Status = VL53L1_set_timeouts_us(Dev, PhaseCalTimeoutUs,
 8000a44:	68f9      	ldr	r1, [r7, #12]
 8000a46:	693a      	ldr	r2, [r7, #16]
 8000a48:	697b      	ldr	r3, [r7, #20]
 8000a4a:	6878      	ldr	r0, [r7, #4]
 8000a4c:	f001 f872 	bl	8001b34 <VL53L1_set_timeouts_us>
 8000a50:	4603      	mov	r3, r0
 8000a52:	77fb      	strb	r3, [r7, #31]
			MmTimeoutUs, TimingBudget);

		if (Status == VL53L1_ERROR_NONE)
 8000a54:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d102      	bne.n	8000a62 <VL53L1_SetDistanceMode+0xe8>
			VL53L1DevDataSet(Dev, LLData.range_config_timeout_us,
 8000a5c:	697a      	ldr	r2, [r7, #20]
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	611a      	str	r2, [r3, #16]
				TimingBudget);
	}

	if (Status == VL53L1_ERROR_NONE)
 8000a62:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d107      	bne.n	8000a7a <VL53L1_SetDistanceMode+0x100>
		Status = VL53L1_set_user_zone(Dev, &user_zone);
 8000a6a:	f107 0308 	add.w	r3, r7, #8
 8000a6e:	4619      	mov	r1, r3
 8000a70:	6878      	ldr	r0, [r7, #4]
 8000a72:	f001 f939 	bl	8001ce8 <VL53L1_set_user_zone>
 8000a76:	4603      	mov	r3, r0
 8000a78:	77fb      	strb	r3, [r7, #31]

	LOG_FUNCTION_END(Status);
	return Status;
 8000a7a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	3720      	adds	r7, #32
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
	...

08000a88 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>:



VL53L1_Error VL53L1_SetMeasurementTimingBudgetMicroSeconds(VL53L1_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b08c      	sub	sp, #48	; 0x30
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
 8000a90:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8000a92:	2300      	movs	r3, #0
 8000a94:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t MmTimeoutUs;
	VL53L1_PresetModes PresetMode;
	uint32_t PhaseCalTimeoutUs;
	uint32_t vhv;
	int32_t vhv_loops;
	uint32_t FDAMaxTimingBudgetUs = FDA_MAX_TIMING_BUDGET_US;
 8000a98:	4b63      	ldr	r3, [pc, #396]	; (8000c28 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1a0>)
 8000a9a:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	/* Timing budget is limited to 10 seconds */
	if (MeasurementTimingBudgetMicroSeconds > 10000000)
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	4a63      	ldr	r2, [pc, #396]	; (8000c2c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x1a4>)
 8000aa0:	4293      	cmp	r3, r2
 8000aa2:	d902      	bls.n	8000aaa <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x22>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8000aa4:	23fc      	movs	r3, #252	; 0xfc
 8000aa6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L1_ERROR_NONE) {
 8000aaa:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d109      	bne.n	8000ac6 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x3e>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 8000ab2:	f107 031a 	add.w	r3, r7, #26
 8000ab6:	461a      	mov	r2, r3
 8000ab8:	2105      	movs	r1, #5
 8000aba:	6878      	ldr	r0, [r7, #4]
 8000abc:	f000 fac0 	bl	8001040 <VL53L1_GetSequenceStepEnable>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM1, &Mm1Enabled);
	}

	if (Status == VL53L1_ERROR_NONE) {
 8000ac6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d109      	bne.n	8000ae2 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x5a>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 8000ace:	f107 0319 	add.w	r3, r7, #25
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	2106      	movs	r1, #6
 8000ad6:	6878      	ldr	r0, [r7, #4]
 8000ad8:	f000 fab2 	bl	8001040 <VL53L1_GetSequenceStepEnable>
 8000adc:	4603      	mov	r3, r0
 8000ade:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM2, &Mm2Enabled);
	}

	if (Status == VL53L1_ERROR_NONE)
 8000ae2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d10b      	bne.n	8000b02 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x7a>
		Status = VL53L1_get_timeouts_us(Dev,
 8000aea:	f107 0314 	add.w	r3, r7, #20
 8000aee:	f107 0210 	add.w	r2, r7, #16
 8000af2:	f107 010c 	add.w	r1, r7, #12
 8000af6:	6878      	ldr	r0, [r7, #4]
 8000af8:	f001 f854 	bl	8001ba4 <VL53L1_get_timeouts_us>
 8000afc:	4603      	mov	r3, r0
 8000afe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&TimingBudget);

	if (Status == VL53L1_ERROR_NONE) {
 8000b02:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d17f      	bne.n	8000c0a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x182>
		PresetMode = VL53L1DevDataGet(Dev, CurrentParameters.PresetMode);
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	f893 337c 	ldrb.w	r3, [r3, #892]	; 0x37c
 8000b10:	76fb      	strb	r3, [r7, #27]

		TimingGuard = 0;
 8000b12:	2300      	movs	r3, #0
 8000b14:	62bb      	str	r3, [r7, #40]	; 0x28
		divisor = 1;
 8000b16:	2301      	movs	r3, #1
 8000b18:	627b      	str	r3, [r7, #36]	; 0x24
		switch (PresetMode) {
 8000b1a:	7efb      	ldrb	r3, [r7, #27]
 8000b1c:	2b04      	cmp	r3, #4
 8000b1e:	d004      	beq.n	8000b2a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xa2>
 8000b20:	2b08      	cmp	r3, #8
 8000b22:	d023      	beq.n	8000b6c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xe4>
 8000b24:	2b03      	cmp	r3, #3
 8000b26:	d00e      	beq.n	8000b46 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xbe>
 8000b28:	e03f      	b.n	8000baa <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x122>
		case VL53L1_PRESETMODE_LITE_RANGING:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8000b2a:	7ebb      	ldrb	r3, [r7, #26]
 8000b2c:	2b01      	cmp	r3, #1
 8000b2e:	d002      	beq.n	8000b36 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xae>
 8000b30:	7e7b      	ldrb	r3, [r7, #25]
 8000b32:	2b01      	cmp	r3, #1
 8000b34:	d103      	bne.n	8000b3e <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xb6>
				TimingGuard = 5000;
 8000b36:	f241 3388 	movw	r3, #5000	; 0x1388
 8000b3a:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				TimingGuard = 1000;
		break;
 8000b3c:	e038      	b.n	8000bb0 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x128>
				TimingGuard = 1000;
 8000b3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b42:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8000b44:	e034      	b.n	8000bb0 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x128>

		case VL53L1_PRESETMODE_AUTONOMOUS:
			FDAMaxTimingBudgetUs *= 2;
 8000b46:	69fb      	ldr	r3, [r7, #28]
 8000b48:	005b      	lsls	r3, r3, #1
 8000b4a:	61fb      	str	r3, [r7, #28]
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8000b4c:	7ebb      	ldrb	r3, [r7, #26]
 8000b4e:	2b01      	cmp	r3, #1
 8000b50:	d002      	beq.n	8000b58 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xd0>
 8000b52:	7e7b      	ldrb	r3, [r7, #25]
 8000b54:	2b01      	cmp	r3, #1
 8000b56:	d103      	bne.n	8000b60 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xd8>
				TimingGuard = 26600;
 8000b58:	f246 73e8 	movw	r3, #26600	; 0x67e8
 8000b5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8000b5e:	e002      	b.n	8000b66 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0xde>
			else
				TimingGuard = 21600;
 8000b60:	f245 4360 	movw	r3, #21600	; 0x5460
 8000b64:	62bb      	str	r3, [r7, #40]	; 0x28
			divisor = 2;
 8000b66:	2302      	movs	r3, #2
 8000b68:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 8000b6a:	e021      	b.n	8000bb0 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x128>

		case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
			FDAMaxTimingBudgetUs *= 2;
 8000b6c:	69fb      	ldr	r3, [r7, #28]
 8000b6e:	005b      	lsls	r3, r3, #1
 8000b70:	61fb      	str	r3, [r7, #28]
			vhv = LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
 8000b72:	23f5      	movs	r3, #245	; 0xf5
 8000b74:	623b      	str	r3, [r7, #32]
			VL53L1_get_tuning_parm(Dev,
 8000b76:	f107 0308 	add.w	r3, r7, #8
 8000b7a:	461a      	mov	r2, r3
 8000b7c:	f248 0136 	movw	r1, #32822	; 0x8036
 8000b80:	6878      	ldr	r0, [r7, #4]
 8000b82:	f002 f907 	bl	8002d94 <VL53L1_get_tuning_parm>
				VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND,
				&vhv_loops);
			if (vhv_loops > 0) {
 8000b86:	68bb      	ldr	r3, [r7, #8]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	dd07      	ble.n	8000b9c <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x114>
				vhv += vhv_loops *
 8000b8c:	68bb      	ldr	r3, [r7, #8]
 8000b8e:	22f5      	movs	r2, #245	; 0xf5
 8000b90:	fb02 f303 	mul.w	r3, r2, r3
 8000b94:	461a      	mov	r2, r3
 8000b96:	6a3b      	ldr	r3, [r7, #32]
 8000b98:	4413      	add	r3, r2
 8000b9a:	623b      	str	r3, [r7, #32]
					LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
			}
			TimingGuard = LOWPOWER_AUTO_OVERHEAD_BEFORE_A_RANGING +
 8000b9c:	6a3b      	ldr	r3, [r7, #32]
 8000b9e:	f603 53dc 	addw	r3, r3, #3548	; 0xddc
 8000ba2:	62bb      	str	r3, [r7, #40]	; 0x28
				LOWPOWER_AUTO_OVERHEAD_BETWEEN_A_B_RANGING +
				vhv;
			divisor = 2;
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	627b      	str	r3, [r7, #36]	; 0x24
		break;
 8000ba8:	e002      	b.n	8000bb0 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x128>

		default:
			/* Unsupported mode */
			Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 8000baa:	23f8      	movs	r3, #248	; 0xf8
 8000bac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}

		if (MeasurementTimingBudgetMicroSeconds <= TimingGuard)
 8000bb0:	683a      	ldr	r2, [r7, #0]
 8000bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	d803      	bhi.n	8000bc0 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x138>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 8000bb8:	23fc      	movs	r3, #252	; 0xfc
 8000bba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000bbe:	e003      	b.n	8000bc8 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x140>
		else {
			TimingBudget = (MeasurementTimingBudgetMicroSeconds
					- TimingGuard);
 8000bc0:	683a      	ldr	r2, [r7, #0]
 8000bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bc4:	1ad3      	subs	r3, r2, r3
			TimingBudget = (MeasurementTimingBudgetMicroSeconds
 8000bc6:	617b      	str	r3, [r7, #20]
		}

		if (Status == VL53L1_ERROR_NONE) {
 8000bc8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d11c      	bne.n	8000c0a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x182>
			if (TimingBudget > FDAMaxTimingBudgetUs)
 8000bd0:	697a      	ldr	r2, [r7, #20]
 8000bd2:	69fb      	ldr	r3, [r7, #28]
 8000bd4:	429a      	cmp	r2, r3
 8000bd6:	d903      	bls.n	8000be0 <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x158>
				Status = VL53L1_ERROR_INVALID_PARAMS;
 8000bd8:	23fc      	movs	r3, #252	; 0xfc
 8000bda:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000bde:	e00d      	b.n	8000bfc <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x174>
			else {
				TimingBudget /= divisor;
 8000be0:	697a      	ldr	r2, [r7, #20]
 8000be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000be4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000be8:	617b      	str	r3, [r7, #20]
				Status = VL53L1_set_timeouts_us(
 8000bea:	68f9      	ldr	r1, [r7, #12]
 8000bec:	693a      	ldr	r2, [r7, #16]
 8000bee:	697b      	ldr	r3, [r7, #20]
 8000bf0:	6878      	ldr	r0, [r7, #4]
 8000bf2:	f000 ff9f 	bl	8001b34 <VL53L1_set_timeouts_us>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					PhaseCalTimeoutUs,
					MmTimeoutUs,
					TimingBudget);
			}

			if (Status == VL53L1_ERROR_NONE)
 8000bfc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d102      	bne.n	8000c0a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x182>
				VL53L1DevDataSet(Dev,
 8000c04:	697a      	ldr	r2, [r7, #20]
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	611a      	str	r2, [r3, #16]
					LLData.range_config_timeout_us,
					TimingBudget);
		}
	}
	if (Status == VL53L1_ERROR_NONE) {
 8000c0a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d103      	bne.n	8000c1a <VL53L1_SetMeasurementTimingBudgetMicroSeconds+0x192>
		VL53L1DevDataSet(Dev,
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	683a      	ldr	r2, [r7, #0]
 8000c16:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380
			CurrentParameters.MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8000c1a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3730      	adds	r7, #48	; 0x30
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	00086470 	.word	0x00086470
 8000c2c:	00989680 	.word	0x00989680

08000c30 <VL53L1_GetMeasurementTimingBudgetMicroSeconds>:


VL53L1_Error VL53L1_GetMeasurementTimingBudgetMicroSeconds(VL53L1_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b08c      	sub	sp, #48	; 0x30
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
 8000c38:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t Mm1Enabled = 0;
 8000c40:	2300      	movs	r3, #0
 8000c42:	76fb      	strb	r3, [r7, #27]
	uint8_t Mm2Enabled = 0;
 8000c44:	2300      	movs	r3, #0
 8000c46:	76bb      	strb	r3, [r7, #26]
	uint32_t  MmTimeoutUs = 0;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	617b      	str	r3, [r7, #20]
	uint32_t  RangeTimeoutUs = 0;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	613b      	str	r3, [r7, #16]
	uint32_t  MeasTimingBdg = 0;
 8000c50:	2300      	movs	r3, #0
 8000c52:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PhaseCalTimeoutUs = 0;
 8000c54:	2300      	movs	r3, #0
 8000c56:	60fb      	str	r3, [r7, #12]
	uint32_t vhv;
	int32_t vhv_loops;

	LOG_FUNCTION_START("");

	*pMeasurementTimingBudgetMicroSeconds = 0;
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	601a      	str	r2, [r3, #0]

	if (Status == VL53L1_ERROR_NONE)
 8000c5e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d109      	bne.n	8000c7a <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x4a>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 8000c66:	f107 031b 	add.w	r3, r7, #27
 8000c6a:	461a      	mov	r2, r3
 8000c6c:	2105      	movs	r1, #5
 8000c6e:	6878      	ldr	r0, [r7, #4]
 8000c70:	f000 f9e6 	bl	8001040 <VL53L1_GetSequenceStepEnable>
 8000c74:	4603      	mov	r3, r0
 8000c76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM1, &Mm1Enabled);

	if (Status == VL53L1_ERROR_NONE)
 8000c7a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d109      	bne.n	8000c96 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x66>
		Status = VL53L1_GetSequenceStepEnable(Dev,
 8000c82:	f107 031a 	add.w	r3, r7, #26
 8000c86:	461a      	mov	r2, r3
 8000c88:	2106      	movs	r1, #6
 8000c8a:	6878      	ldr	r0, [r7, #4]
 8000c8c:	f000 f9d8 	bl	8001040 <VL53L1_GetSequenceStepEnable>
 8000c90:	4603      	mov	r3, r0
 8000c92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L1_SEQUENCESTEP_MM2, &Mm2Enabled);

	if (Status == VL53L1_ERROR_NONE)
 8000c96:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d10b      	bne.n	8000cb6 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x86>
		Status = VL53L1_get_timeouts_us(Dev,
 8000c9e:	f107 0310 	add.w	r3, r7, #16
 8000ca2:	f107 0214 	add.w	r2, r7, #20
 8000ca6:	f107 010c 	add.w	r1, r7, #12
 8000caa:	6878      	ldr	r0, [r7, #4]
 8000cac:	f000 ff7a 	bl	8001ba4 <VL53L1_get_timeouts_us>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			&PhaseCalTimeoutUs,
			&MmTimeoutUs,
			&RangeTimeoutUs);

	if (Status == VL53L1_ERROR_NONE) {
 8000cb6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d154      	bne.n	8000d68 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x138>
		PresetMode = VL53L1DevDataGet(Dev, CurrentParameters.PresetMode);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	f893 337c 	ldrb.w	r3, [r3, #892]	; 0x37c
 8000cc4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		switch (PresetMode) {
 8000cc8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000ccc:	2b04      	cmp	r3, #4
 8000cce:	d004      	beq.n	8000cda <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xaa>
 8000cd0:	2b08      	cmp	r3, #8
 8000cd2:	d027      	beq.n	8000d24 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xf4>
 8000cd4:	2b03      	cmp	r3, #3
 8000cd6:	d011      	beq.n	8000cfc <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xcc>
 8000cd8:	e043      	b.n	8000d62 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x132>
		case VL53L1_PRESETMODE_LITE_RANGING:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8000cda:	7efb      	ldrb	r3, [r7, #27]
 8000cdc:	2b01      	cmp	r3, #1
 8000cde:	d002      	beq.n	8000ce6 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xb6>
 8000ce0:	7ebb      	ldrb	r3, [r7, #26]
 8000ce2:	2b01      	cmp	r3, #1
 8000ce4:	d105      	bne.n	8000cf2 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xc2>
				MeasTimingBdg = RangeTimeoutUs + 5000;
 8000ce6:	693b      	ldr	r3, [r7, #16]
 8000ce8:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8000cec:	3308      	adds	r3, #8
 8000cee:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				MeasTimingBdg = RangeTimeoutUs + 1000;

		break;
 8000cf0:	e03a      	b.n	8000d68 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x138>
				MeasTimingBdg = RangeTimeoutUs + 1000;
 8000cf2:	693b      	ldr	r3, [r7, #16]
 8000cf4:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000cf8:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8000cfa:	e035      	b.n	8000d68 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x138>

		case VL53L1_PRESETMODE_AUTONOMOUS:
			if ((Mm1Enabled == 1) || (Mm2Enabled == 1))
 8000cfc:	7efb      	ldrb	r3, [r7, #27]
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d002      	beq.n	8000d08 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xd8>
 8000d02:	7ebb      	ldrb	r3, [r7, #26]
 8000d04:	2b01      	cmp	r3, #1
 8000d06:	d106      	bne.n	8000d16 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0xe6>
				MeasTimingBdg = 2 * RangeTimeoutUs + 26600;
 8000d08:	693b      	ldr	r3, [r7, #16]
 8000d0a:	f503 534f 	add.w	r3, r3, #13248	; 0x33c0
 8000d0e:	3334      	adds	r3, #52	; 0x34
 8000d10:	005b      	lsls	r3, r3, #1
 8000d12:	62bb      	str	r3, [r7, #40]	; 0x28
			else
				MeasTimingBdg = 2 * RangeTimeoutUs + 21600;

		break;
 8000d14:	e028      	b.n	8000d68 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x138>
				MeasTimingBdg = 2 * RangeTimeoutUs + 21600;
 8000d16:	693b      	ldr	r3, [r7, #16]
 8000d18:	f503 5328 	add.w	r3, r3, #10752	; 0x2a00
 8000d1c:	3330      	adds	r3, #48	; 0x30
 8000d1e:	005b      	lsls	r3, r3, #1
 8000d20:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8000d22:	e021      	b.n	8000d68 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x138>

		case VL53L1_PRESETMODE_LOWPOWER_AUTONOMOUS:
			vhv = LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
 8000d24:	23f5      	movs	r3, #245	; 0xf5
 8000d26:	627b      	str	r3, [r7, #36]	; 0x24
			VL53L1_get_tuning_parm(Dev,
 8000d28:	f107 0308 	add.w	r3, r7, #8
 8000d2c:	461a      	mov	r2, r3
 8000d2e:	f248 0136 	movw	r1, #32822	; 0x8036
 8000d32:	6878      	ldr	r0, [r7, #4]
 8000d34:	f002 f82e 	bl	8002d94 <VL53L1_get_tuning_parm>
				VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND,
				&vhv_loops);
			if (vhv_loops > 0) {
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	dd07      	ble.n	8000d4e <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x11e>
				vhv += vhv_loops *
 8000d3e:	68bb      	ldr	r3, [r7, #8]
 8000d40:	22f5      	movs	r2, #245	; 0xf5
 8000d42:	fb02 f303 	mul.w	r3, r2, r3
 8000d46:	461a      	mov	r2, r3
 8000d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d4a:	4413      	add	r3, r2
 8000d4c:	627b      	str	r3, [r7, #36]	; 0x24
					LOWPOWER_AUTO_VHV_LOOP_DURATION_US;
			}
			TimingGuard = LOWPOWER_AUTO_OVERHEAD_BEFORE_A_RANGING +
 8000d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d50:	f603 53dc 	addw	r3, r3, #3548	; 0xddc
 8000d54:	61fb      	str	r3, [r7, #28]
				LOWPOWER_AUTO_OVERHEAD_BETWEEN_A_B_RANGING +
				vhv;
			MeasTimingBdg = 2 * RangeTimeoutUs + TimingGuard;
 8000d56:	693b      	ldr	r3, [r7, #16]
 8000d58:	005a      	lsls	r2, r3, #1
 8000d5a:	69fb      	ldr	r3, [r7, #28]
 8000d5c:	4413      	add	r3, r2
 8000d5e:	62bb      	str	r3, [r7, #40]	; 0x28
		break;
 8000d60:	e002      	b.n	8000d68 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x138>

		default:
			/* Unsupported mode */
			Status = VL53L1_ERROR_MODE_NOT_SUPPORTED;
 8000d62:	23f8      	movs	r3, #248	; 0xf8
 8000d64:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
	}
	if (Status == VL53L1_ERROR_NONE)
 8000d68:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d102      	bne.n	8000d76 <VL53L1_GetMeasurementTimingBudgetMicroSeconds+0x146>
		*pMeasurementTimingBudgetMicroSeconds = MeasTimingBdg;
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000d74:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8000d76:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3730      	adds	r7, #48	; 0x30
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
	...

08000d84 <VL53L1_SetInterMeasurementPeriodMilliSeconds>:



VL53L1_Error VL53L1_SetInterMeasurementPeriodMilliSeconds(VL53L1_DEV Dev,
	uint32_t InterMeasurementPeriodMilliSeconds)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b084      	sub	sp, #16
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
 8000d8c:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	73fb      	strb	r3, [r7, #15]
	uint32_t adjustedIMP;

	LOG_FUNCTION_START("");

	/* Fix for Ticket 468205 actual measurement period shorter than set */
	adjustedIMP = InterMeasurementPeriodMilliSeconds;
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	60bb      	str	r3, [r7, #8]
	adjustedIMP += (adjustedIMP * 64) / 1000;
 8000d96:	68bb      	ldr	r3, [r7, #8]
 8000d98:	019b      	lsls	r3, r3, #6
 8000d9a:	4a09      	ldr	r2, [pc, #36]	; (8000dc0 <VL53L1_SetInterMeasurementPeriodMilliSeconds+0x3c>)
 8000d9c:	fba2 2303 	umull	r2, r3, r2, r3
 8000da0:	099b      	lsrs	r3, r3, #6
 8000da2:	68ba      	ldr	r2, [r7, #8]
 8000da4:	4413      	add	r3, r2
 8000da6:	60bb      	str	r3, [r7, #8]
	/* End of fix for Ticket 468205 */
	Status = VL53L1_set_inter_measurement_period_ms(Dev,
 8000da8:	68b9      	ldr	r1, [r7, #8]
 8000daa:	6878      	ldr	r0, [r7, #4]
 8000dac:	f000 fe73 	bl	8001a96 <VL53L1_set_inter_measurement_period_ms>
 8000db0:	4603      	mov	r3, r0
 8000db2:	73fb      	strb	r3, [r7, #15]
			adjustedIMP);

	LOG_FUNCTION_END(Status);
	return Status;
 8000db4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	3710      	adds	r7, #16
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	10624dd3 	.word	0x10624dd3

08000dc4 <VL53L1_GetInterMeasurementPeriodMilliSeconds>:

VL53L1_Error VL53L1_GetInterMeasurementPeriodMilliSeconds(VL53L1_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
 8000dcc:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	73fb      	strb	r3, [r7, #15]
	uint32_t adjustedIMP;

	LOG_FUNCTION_START("");

	Status = VL53L1_get_inter_measurement_period_ms(Dev, &adjustedIMP);
 8000dd2:	f107 0308 	add.w	r3, r7, #8
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	6878      	ldr	r0, [r7, #4]
 8000dda:	f000 fe85 	bl	8001ae8 <VL53L1_get_inter_measurement_period_ms>
 8000dde:	4603      	mov	r3, r0
 8000de0:	73fb      	strb	r3, [r7, #15]
	/* Fix for Ticket 468205 actual measurement period shorter than set */
	adjustedIMP -= (adjustedIMP * 64) / 1000;
 8000de2:	68ba      	ldr	r2, [r7, #8]
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	019b      	lsls	r3, r3, #6
 8000de8:	4907      	ldr	r1, [pc, #28]	; (8000e08 <VL53L1_GetInterMeasurementPeriodMilliSeconds+0x44>)
 8000dea:	fba1 1303 	umull	r1, r3, r1, r3
 8000dee:	099b      	lsrs	r3, r3, #6
 8000df0:	1ad3      	subs	r3, r2, r3
 8000df2:	60bb      	str	r3, [r7, #8]
	*pInterMeasurementPeriodMilliSeconds = adjustedIMP;
 8000df4:	68ba      	ldr	r2, [r7, #8]
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	601a      	str	r2, [r3, #0]
	/* End of fix for Ticket 468205 */

	LOG_FUNCTION_END(Status);
	return Status;
 8000dfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3710      	adds	r7, #16
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	10624dd3 	.word	0x10624dd3

08000e0c <SetLimitValue>:
	return Status;
}

static VL53L1_Error SetLimitValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
		FixPoint1616_t value)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b086      	sub	sp, #24
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	60f8      	str	r0, [r7, #12]
 8000e14:	460b      	mov	r3, r1
 8000e16:	607a      	str	r2, [r7, #4]
 8000e18:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	75fb      	strb	r3, [r7, #23]
	uint16_t tmpuint16; /* temporary variable */

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8000e1e:	897b      	ldrh	r3, [r7, #10]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d002      	beq.n	8000e2a <SetLimitValue+0x1e>
 8000e24:	2b01      	cmp	r3, #1
 8000e26:	d009      	beq.n	8000e3c <SetLimitValue+0x30>
 8000e28:	e011      	b.n	8000e4e <SetLimitValue+0x42>
	case VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT142(value);
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	0b9b      	lsrs	r3, r3, #14
 8000e2e:	82bb      	strh	r3, [r7, #20]
		VL53L1_set_lite_sigma_threshold(Dev, tmpuint16);
 8000e30:	8abb      	ldrh	r3, [r7, #20]
 8000e32:	4619      	mov	r1, r3
 8000e34:	68f8      	ldr	r0, [r7, #12]
 8000e36:	f001 fa07 	bl	8002248 <VL53L1_set_lite_sigma_threshold>
		break;
 8000e3a:	e00a      	b.n	8000e52 <SetLimitValue+0x46>
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		tmpuint16 = VL53L1_FIXPOINT1616TOFIXPOINT97(value);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	0a5b      	lsrs	r3, r3, #9
 8000e40:	82bb      	strh	r3, [r7, #20]
		VL53L1_set_lite_min_count_rate(Dev, tmpuint16);
 8000e42:	8abb      	ldrh	r3, [r7, #20]
 8000e44:	4619      	mov	r1, r3
 8000e46:	68f8      	ldr	r0, [r7, #12]
 8000e48:	f001 fa2a 	bl	80022a0 <VL53L1_set_lite_min_count_rate>
		break;
 8000e4c:	e001      	b.n	8000e52 <SetLimitValue+0x46>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8000e4e:	23fc      	movs	r3, #252	; 0xfc
 8000e50:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8000e52:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3718      	adds	r7, #24
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}

08000e5e <VL53L1_SetLimitCheckEnable>:


VL53L1_Error VL53L1_SetLimitCheckEnable(VL53L1_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	b084      	sub	sp, #16
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	6078      	str	r0, [r7, #4]
 8000e66:	460b      	mov	r3, r1
 8000e68:	807b      	strh	r3, [r7, #2]
 8000e6a:	4613      	mov	r3, r2
 8000e6c:	707b      	strb	r3, [r7, #1]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	73fb      	strb	r3, [r7, #15]
	FixPoint1616_t TempFix1616 = 0;
 8000e72:	2300      	movs	r3, #0
 8000e74:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");


	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 8000e76:	887b      	ldrh	r3, [r7, #2]
 8000e78:	2b01      	cmp	r3, #1
 8000e7a:	d902      	bls.n	8000e82 <VL53L1_SetLimitCheckEnable+0x24>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8000e7c:	23fc      	movs	r3, #252	; 0xfc
 8000e7e:	73fb      	strb	r3, [r7, #15]
 8000e80:	e014      	b.n	8000eac <VL53L1_SetLimitCheckEnable+0x4e>
	} else {
		/* TempFix1616 contains either 0 or the limit value */
		if (LimitCheckEnable == 0)
 8000e82:	787b      	ldrb	r3, [r7, #1]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d102      	bne.n	8000e8e <VL53L1_SetLimitCheckEnable+0x30>
			TempFix1616 = 0;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	60bb      	str	r3, [r7, #8]
 8000e8c:	e006      	b.n	8000e9c <VL53L1_SetLimitCheckEnable+0x3e>
		else
			VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8000e8e:	887b      	ldrh	r3, [r7, #2]
 8000e90:	687a      	ldr	r2, [r7, #4]
 8000e92:	33e0      	adds	r3, #224	; 0xe0
 8000e94:	009b      	lsls	r3, r3, #2
 8000e96:	4413      	add	r3, r2
 8000e98:	689b      	ldr	r3, [r3, #8]
 8000e9a:	60bb      	str	r3, [r7, #8]
				LimitCheckId, TempFix1616);

		Status = SetLimitValue(Dev, LimitCheckId, TempFix1616);
 8000e9c:	887b      	ldrh	r3, [r7, #2]
 8000e9e:	68ba      	ldr	r2, [r7, #8]
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	6878      	ldr	r0, [r7, #4]
 8000ea4:	f7ff ffb2 	bl	8000e0c <SetLimitValue>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	73fb      	strb	r3, [r7, #15]
	}

	if (Status == VL53L1_ERROR_NONE)
 8000eac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d10c      	bne.n	8000ece <VL53L1_SetLimitCheckEnable+0x70>
		VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8000eb4:	887b      	ldrh	r3, [r7, #2]
 8000eb6:	787a      	ldrb	r2, [r7, #1]
 8000eb8:	2a00      	cmp	r2, #0
 8000eba:	bf14      	ite	ne
 8000ebc:	2201      	movne	r2, #1
 8000ebe:	2200      	moveq	r2, #0
 8000ec0:	b2d2      	uxtb	r2, r2
 8000ec2:	4611      	mov	r1, r2
 8000ec4:	687a      	ldr	r2, [r7, #4]
 8000ec6:	4413      	add	r3, r2
 8000ec8:	460a      	mov	r2, r1
 8000eca:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
			((LimitCheckEnable == 0) ? 0 : 1));



	LOG_FUNCTION_END(Status);
	return Status;
 8000ece:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3710      	adds	r7, #16
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <VL53L1_GetLimitCheckEnable>:

VL53L1_Error VL53L1_GetLimitCheckEnable(VL53L1_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8000eda:	b480      	push	{r7}
 8000edc:	b087      	sub	sp, #28
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	60f8      	str	r0, [r7, #12]
 8000ee2:	460b      	mov	r3, r1
 8000ee4:	607a      	str	r2, [r7, #4]
 8000ee6:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 8000eec:	897b      	ldrh	r3, [r7, #10]
 8000eee:	2b01      	cmp	r3, #1
 8000ef0:	d905      	bls.n	8000efe <VL53L1_GetLimitCheckEnable+0x24>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8000ef2:	23fc      	movs	r3, #252	; 0xfc
 8000ef4:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2200      	movs	r2, #0
 8000efa:	701a      	strb	r2, [r3, #0]
 8000efc:	e008      	b.n	8000f10 <VL53L1_GetLimitCheckEnable+0x36>
	} else {
		VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8000efe:	897b      	ldrh	r3, [r7, #10]
 8000f00:	68fa      	ldr	r2, [r7, #12]
 8000f02:	4413      	add	r3, r2
 8000f04:	f893 3384 	ldrb.w	r3, [r3, #900]	; 0x384
 8000f08:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	7dba      	ldrb	r2, [r7, #22]
 8000f0e:	701a      	strb	r2, [r3, #0]
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8000f10:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	371c      	adds	r7, #28
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr

08000f20 <VL53L1_SetLimitCheckValue>:

VL53L1_Error VL53L1_SetLimitCheckValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b086      	sub	sp, #24
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	60f8      	str	r0, [r7, #12]
 8000f28:	460b      	mov	r3, r1
 8000f2a:	607a      	str	r2, [r7, #4]
 8000f2c:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	75fb      	strb	r3, [r7, #23]
	uint8_t LimitChecksEnable;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L1_CHECKENABLE_NUMBER_OF_CHECKS) {
 8000f32:	897b      	ldrh	r3, [r7, #10]
 8000f34:	2b01      	cmp	r3, #1
 8000f36:	d902      	bls.n	8000f3e <VL53L1_SetLimitCheckValue+0x1e>
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8000f38:	23fc      	movs	r3, #252	; 0xfc
 8000f3a:	75fb      	strb	r3, [r7, #23]
 8000f3c:	e023      	b.n	8000f86 <VL53L1_SetLimitCheckValue+0x66>
	} else {

		VL53L1_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8000f3e:	897b      	ldrh	r3, [r7, #10]
 8000f40:	68fa      	ldr	r2, [r7, #12]
 8000f42:	4413      	add	r3, r2
 8000f44:	f893 3384 	ldrb.w	r3, [r3, #900]	; 0x384
 8000f48:	75bb      	strb	r3, [r7, #22]
				LimitCheckId,
				LimitChecksEnable);

		if (LimitChecksEnable == 0) {
 8000f4a:	7dbb      	ldrb	r3, [r7, #22]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d107      	bne.n	8000f60 <VL53L1_SetLimitCheckValue+0x40>
			/* disabled write only internal value */
			VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8000f50:	897b      	ldrh	r3, [r7, #10]
 8000f52:	68fa      	ldr	r2, [r7, #12]
 8000f54:	33e0      	adds	r3, #224	; 0xe0
 8000f56:	009b      	lsls	r3, r3, #2
 8000f58:	4413      	add	r3, r2
 8000f5a:	687a      	ldr	r2, [r7, #4]
 8000f5c:	609a      	str	r2, [r3, #8]
 8000f5e:	e012      	b.n	8000f86 <VL53L1_SetLimitCheckValue+0x66>
				LimitCheckId, LimitCheckValue);
		} else {

			Status = SetLimitValue(Dev, LimitCheckId,
 8000f60:	897b      	ldrh	r3, [r7, #10]
 8000f62:	687a      	ldr	r2, [r7, #4]
 8000f64:	4619      	mov	r1, r3
 8000f66:	68f8      	ldr	r0, [r7, #12]
 8000f68:	f7ff ff50 	bl	8000e0c <SetLimitValue>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue);

			if (Status == VL53L1_ERROR_NONE) {
 8000f70:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d106      	bne.n	8000f86 <VL53L1_SetLimitCheckValue+0x66>
				VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8000f78:	897b      	ldrh	r3, [r7, #10]
 8000f7a:	68fa      	ldr	r2, [r7, #12]
 8000f7c:	33e0      	adds	r3, #224	; 0xe0
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	4413      	add	r3, r2
 8000f82:	687a      	ldr	r2, [r7, #4]
 8000f84:	609a      	str	r2, [r3, #8]
			}
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8000f86:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3718      	adds	r7, #24
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <VL53L1_GetLimitCheckValue>:

VL53L1_Error VL53L1_GetLimitCheckValue(VL53L1_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8000f92:	b580      	push	{r7, lr}
 8000f94:	b088      	sub	sp, #32
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	60f8      	str	r0, [r7, #12]
 8000f9a:	460b      	mov	r3, r1
 8000f9c:	607a      	str	r2, [r7, #4]
 8000f9e:	817b      	strh	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	77fb      	strb	r3, [r7, #31]
	FixPoint1616_t TempFix1616;
	uint16_t SigmaThresh;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8000fa4:	897b      	ldrh	r3, [r7, #10]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d002      	beq.n	8000fb0 <VL53L1_GetLimitCheckValue+0x1e>
 8000faa:	2b01      	cmp	r3, #1
 8000fac:	d00c      	beq.n	8000fc8 <VL53L1_GetLimitCheckValue+0x36>
 8000fae:	e017      	b.n	8000fe0 <VL53L1_GetLimitCheckValue+0x4e>
	case VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE:
		Status = VL53L1_get_lite_sigma_threshold(Dev, &SigmaThresh);
 8000fb0:	f107 0314 	add.w	r3, r7, #20
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	68f8      	ldr	r0, [r7, #12]
 8000fb8:	f001 f930 	bl	800221c <VL53L1_get_lite_sigma_threshold>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	77fb      	strb	r3, [r7, #31]
		TempFix1616 = VL53L1_FIXPOINT142TOFIXPOINT1616(SigmaThresh);
 8000fc0:	8abb      	ldrh	r3, [r7, #20]
 8000fc2:	039b      	lsls	r3, r3, #14
 8000fc4:	61bb      	str	r3, [r7, #24]
		break;
 8000fc6:	e00d      	b.n	8000fe4 <VL53L1_GetLimitCheckValue+0x52>
	case VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L1_get_lite_min_count_rate(Dev, &MinCountRate);
 8000fc8:	f107 0316 	add.w	r3, r7, #22
 8000fcc:	4619      	mov	r1, r3
 8000fce:	68f8      	ldr	r0, [r7, #12]
 8000fd0:	f001 f950 	bl	8002274 <VL53L1_get_lite_min_count_rate>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	77fb      	strb	r3, [r7, #31]
		TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(MinCountRate);
 8000fd8:	8afb      	ldrh	r3, [r7, #22]
 8000fda:	025b      	lsls	r3, r3, #9
 8000fdc:	61bb      	str	r3, [r7, #24]
		break;
 8000fde:	e001      	b.n	8000fe4 <VL53L1_GetLimitCheckValue+0x52>
	default:
		Status = VL53L1_ERROR_INVALID_PARAMS;
 8000fe0:	23fc      	movs	r3, #252	; 0xfc
 8000fe2:	77fb      	strb	r3, [r7, #31]
	}

	if (Status == VL53L1_ERROR_NONE) {
 8000fe4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d123      	bne.n	8001034 <VL53L1_GetLimitCheckValue+0xa2>

		if (TempFix1616 == 0) {
 8000fec:	69bb      	ldr	r3, [r7, #24]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d110      	bne.n	8001014 <VL53L1_GetLimitCheckValue+0x82>
			/* disabled: return value from memory */
			VL53L1_GETARRAYPARAMETERFIELD(Dev,
 8000ff2:	897b      	ldrh	r3, [r7, #10]
 8000ff4:	68fa      	ldr	r2, [r7, #12]
 8000ff6:	33e0      	adds	r3, #224	; 0xe0
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	4413      	add	r3, r2
 8000ffc:	689b      	ldr	r3, [r3, #8]
 8000ffe:	61bb      	str	r3, [r7, #24]
				LimitChecksValue, LimitCheckId,
				TempFix1616);
			*pLimitCheckValue = TempFix1616;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	69ba      	ldr	r2, [r7, #24]
 8001004:	601a      	str	r2, [r3, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8001006:	897b      	ldrh	r3, [r7, #10]
 8001008:	68fa      	ldr	r2, [r7, #12]
 800100a:	4413      	add	r3, r2
 800100c:	2200      	movs	r2, #0
 800100e:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
 8001012:	e00f      	b.n	8001034 <VL53L1_GetLimitCheckValue+0xa2>
				LimitChecksEnable, LimitCheckId, 0);
		} else {
			*pLimitCheckValue = TempFix1616;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	69ba      	ldr	r2, [r7, #24]
 8001018:	601a      	str	r2, [r3, #0]
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 800101a:	897b      	ldrh	r3, [r7, #10]
 800101c:	68fa      	ldr	r2, [r7, #12]
 800101e:	33e0      	adds	r3, #224	; 0xe0
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	4413      	add	r3, r2
 8001024:	69ba      	ldr	r2, [r7, #24]
 8001026:	609a      	str	r2, [r3, #8]
				LimitChecksValue, LimitCheckId,
				TempFix1616);
			VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8001028:	897b      	ldrh	r3, [r7, #10]
 800102a:	68fa      	ldr	r2, [r7, #12]
 800102c:	4413      	add	r3, r2
 800102e:	2201      	movs	r2, #1
 8001030:	f883 2384 	strb.w	r2, [r3, #900]	; 0x384
				LimitChecksEnable, LimitCheckId, 1);
		}
	}
	LOG_FUNCTION_END(Status);
	return Status;
 8001034:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8001038:	4618      	mov	r0, r3
 800103a:	3720      	adds	r7, #32
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}

08001040 <VL53L1_GetSequenceStepEnable>:
}


VL53L1_Error VL53L1_GetSequenceStepEnable(VL53L1_DEV Dev,
	VL53L1_SequenceStepId SequenceStepId, uint8_t *pSequenceStepEnabled)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b086      	sub	sp, #24
 8001044:	af00      	add	r7, sp, #0
 8001046:	60f8      	str	r0, [r7, #12]
 8001048:	460b      	mov	r3, r1
 800104a:	607a      	str	r2, [r7, #4]
 800104c:	72fb      	strb	r3, [r7, #11]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 800104e:	2300      	movs	r3, #0
 8001050:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	Status = VL53L1_get_sequence_config_bit(Dev,
 8001052:	7afb      	ldrb	r3, [r7, #11]
 8001054:	687a      	ldr	r2, [r7, #4]
 8001056:	4619      	mov	r1, r3
 8001058:	68f8      	ldr	r0, [r7, #12]
 800105a:	f000 fe0e 	bl	8001c7a <VL53L1_get_sequence_config_bit>
 800105e:	4603      	mov	r3, r0
 8001060:	75fb      	strb	r3, [r7, #23]
		(VL53L1_DeviceSequenceConfig)SequenceStepId,
		pSequenceStepEnabled);

	LOG_FUNCTION_END(Status);
	return Status;
 8001062:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001066:	4618      	mov	r0, r3
 8001068:	3718      	adds	r7, #24
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
	...

08001070 <VL53L1_StartMeasurement>:
/* Group PAL Measurement Functions */



VL53L1_Error VL53L1_StartMeasurement(VL53L1_DEV Dev)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b086      	sub	sp, #24
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
#define TIMED_MODE_TIMING_GUARD_MILLISECONDS 4
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8001078:	2300      	movs	r3, #0
 800107a:	75fb      	strb	r3, [r7, #23]
	VL53L1_Error lStatus;
	uint32_t MTBus, IMPms;

	LOG_FUNCTION_START("");

	CurrPalState = VL53L1DevDataGet(Dev, PalState);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	f893 3378 	ldrb.w	r3, [r3, #888]	; 0x378
 8001082:	75bb      	strb	r3, [r7, #22]
	switch (CurrPalState) {
 8001084:	7dbb      	ldrb	r3, [r7, #22]
 8001086:	2b05      	cmp	r3, #5
 8001088:	dc06      	bgt.n	8001098 <VL53L1_StartMeasurement+0x28>
 800108a:	2b04      	cmp	r3, #4
 800108c:	da0b      	bge.n	80010a6 <VL53L1_StartMeasurement+0x36>
 800108e:	2b00      	cmp	r3, #0
 8001090:	db0c      	blt.n	80010ac <VL53L1_StartMeasurement+0x3c>
 8001092:	2b02      	cmp	r3, #2
 8001094:	dd07      	ble.n	80010a6 <VL53L1_StartMeasurement+0x36>
 8001096:	e003      	b.n	80010a0 <VL53L1_StartMeasurement+0x30>
 8001098:	3b62      	subs	r3, #98	; 0x62
 800109a:	2b01      	cmp	r3, #1
 800109c:	d806      	bhi.n	80010ac <VL53L1_StartMeasurement+0x3c>
 800109e:	e002      	b.n	80010a6 <VL53L1_StartMeasurement+0x36>
	case VL53L1_STATE_IDLE:
		Status = VL53L1_ERROR_NONE;
 80010a0:	2300      	movs	r3, #0
 80010a2:	75fb      	strb	r3, [r7, #23]
		break;
 80010a4:	e004      	b.n	80010b0 <VL53L1_StartMeasurement+0x40>
	case VL53L1_STATE_STANDBY:
	case VL53L1_STATE_RUNNING:
	case VL53L1_STATE_RESET:
	case VL53L1_STATE_UNKNOWN:
	case VL53L1_STATE_ERROR:
		Status = VL53L1_ERROR_INVALID_COMMAND;
 80010a6:	23f2      	movs	r3, #242	; 0xf2
 80010a8:	75fb      	strb	r3, [r7, #23]
		break;
 80010aa:	e001      	b.n	80010b0 <VL53L1_StartMeasurement+0x40>
	default:
		Status = VL53L1_ERROR_UNDEFINED;
 80010ac:	23fd      	movs	r3, #253	; 0xfd
 80010ae:	75fb      	strb	r3, [r7, #23]
	}

	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	789b      	ldrb	r3, [r3, #2]
 80010b4:	757b      	strb	r3, [r7, #21]

	/* Check timing configuration between timing budget and
	* inter measurement period */
	if ((Status == VL53L1_ERROR_NONE) &&
 80010b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d11f      	bne.n	80010fe <VL53L1_StartMeasurement+0x8e>
 80010be:	7d7b      	ldrb	r3, [r7, #21]
 80010c0:	2b40      	cmp	r3, #64	; 0x40
 80010c2:	d11c      	bne.n	80010fe <VL53L1_StartMeasurement+0x8e>
		(DeviceMeasurementMode == VL53L1_DEVICEMEASUREMENTMODE_TIMED)) {
		lStatus = VL53L1_GetMeasurementTimingBudgetMicroSeconds(Dev,
 80010c4:	f107 0310 	add.w	r3, r7, #16
 80010c8:	4619      	mov	r1, r3
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	f7ff fdb0 	bl	8000c30 <VL53L1_GetMeasurementTimingBudgetMicroSeconds>
 80010d0:	4603      	mov	r3, r0
 80010d2:	753b      	strb	r3, [r7, #20]
				&MTBus);
		/* convert timing budget in ms */
		MTBus /= 1000;
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	4a17      	ldr	r2, [pc, #92]	; (8001134 <VL53L1_StartMeasurement+0xc4>)
 80010d8:	fba2 2303 	umull	r2, r3, r2, r3
 80010dc:	099b      	lsrs	r3, r3, #6
 80010de:	613b      	str	r3, [r7, #16]
		lStatus = VL53L1_GetInterMeasurementPeriodMilliSeconds(Dev,
 80010e0:	f107 030c 	add.w	r3, r7, #12
 80010e4:	4619      	mov	r1, r3
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f7ff fe6c 	bl	8000dc4 <VL53L1_GetInterMeasurementPeriodMilliSeconds>
 80010ec:	4603      	mov	r3, r0
 80010ee:	753b      	strb	r3, [r7, #20]
				&IMPms);
		/* trick to get rid of compiler "set but not used" warning */
		SUPPRESS_UNUSED_WARNING(lStatus);
		if (IMPms < MTBus + TIMED_MODE_TIMING_GUARD_MILLISECONDS)
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	1d1a      	adds	r2, r3, #4
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	429a      	cmp	r2, r3
 80010f8:	d901      	bls.n	80010fe <VL53L1_StartMeasurement+0x8e>
			Status = VL53L1_ERROR_INVALID_PARAMS;
 80010fa:	23fc      	movs	r3, #252	; 0xfc
 80010fc:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L1_ERROR_NONE)
 80010fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d107      	bne.n	8001116 <VL53L1_StartMeasurement+0xa6>
		Status = VL53L1_init_and_start_range(
 8001106:	7d7b      	ldrb	r3, [r7, #21]
 8001108:	2206      	movs	r2, #6
 800110a:	4619      	mov	r1, r3
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	f001 f8fd 	bl	800230c <VL53L1_init_and_start_range>
 8001112:	4603      	mov	r3, r0
 8001114:	75fb      	strb	r3, [r7, #23]
				Dev,
				DeviceMeasurementMode,
				VL53L1_DEVICECONFIGLEVEL_FULL);

	/* Set PAL State to Running */
	if (Status == VL53L1_ERROR_NONE)
 8001116:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d103      	bne.n	8001126 <VL53L1_StartMeasurement+0xb6>
		VL53L1DevDataSet(Dev, PalState, VL53L1_STATE_RUNNING);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2204      	movs	r2, #4
 8001122:	f883 2378 	strb.w	r2, [r3, #888]	; 0x378


	LOG_FUNCTION_END(Status);
	return Status;
 8001126:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800112a:	4618      	mov	r0, r3
 800112c:	3718      	adds	r7, #24
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	10624dd3 	.word	0x10624dd3

08001138 <ChangePresetMode>:
	LOG_FUNCTION_END(Status);
	return Status;
}

static VL53L1_Error ChangePresetMode(VL53L1_DEV Dev)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b08a      	sub	sp, #40	; 0x28
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8001140:	2300      	movs	r3, #0
 8001142:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t DeviceMeasurementMode;
	uint32_t inter_measurement_period_ms;

	LOG_FUNCTION_START("");

	Status = VL53L1_get_user_zone(Dev, &user_zone);
 8001146:	f107 0318 	add.w	r3, r7, #24
 800114a:	4619      	mov	r1, r3
 800114c:	6878      	ldr	r0, [r7, #4]
 800114e:	f000 fdee 	bl	8001d2e <VL53L1_get_user_zone>
 8001152:	4603      	mov	r3, r0
 8001154:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	/*  Initialize variables fix ticket EwokP #475395 */
	PresetMode = VL53L1DevDataGet(Dev,
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	f893 337c 	ldrb.w	r3, [r3, #892]	; 0x37c
 800115e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			CurrentParameters.PresetMode);
	NewDistanceMode = VL53L1DevDataGet(Dev,
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	f893 337f 	ldrb.w	r3, [r3, #895]	; 0x37f
 8001168:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			CurrentParameters.NewDistanceMode);
	/*  End of Initialize variables fix ticket EwokP #475395 */
	if (Status == VL53L1_ERROR_NONE)
 800116c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001170:	2b00      	cmp	r3, #0
 8001172:	d10b      	bne.n	800118c <ChangePresetMode+0x54>
		Status = VL53L1_get_timeouts_us(Dev, &PhaseCalTimeoutUs,
 8001174:	f107 0314 	add.w	r3, r7, #20
 8001178:	f107 0210 	add.w	r2, r7, #16
 800117c:	f107 010c 	add.w	r1, r7, #12
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	f000 fd0f 	bl	8001ba4 <VL53L1_get_timeouts_us>
 8001186:	4603      	mov	r3, r0
 8001188:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			&MmTimeoutUs, &TimingBudget);

	if (Status == VL53L1_ERROR_NONE)
 800118c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001190:	2b00      	cmp	r3, #0
 8001192:	d105      	bne.n	80011a0 <ChangePresetMode+0x68>
		Status = VL53L1_stop_range(Dev);
 8001194:	6878      	ldr	r0, [r7, #4]
 8001196:	f001 fae3 	bl	8002760 <VL53L1_stop_range>
 800119a:	4603      	mov	r3, r0
 800119c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (Status == VL53L1_ERROR_NONE)
 80011a0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d107      	bne.n	80011b8 <ChangePresetMode+0x80>
		Status = VL53L1_WaitUs(Dev, 500);
 80011a8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80011ac:	6878      	ldr	r0, [r7, #4]
 80011ae:	f004 ff3d 	bl	800602c <VL53L1_WaitUs>
 80011b2:	4603      	mov	r3, r0
 80011b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (Status == VL53L1_ERROR_NONE) {
 80011b8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d10d      	bne.n	80011dc <ChangePresetMode+0xa4>
		inter_measurement_period_ms =  VL53L1DevDataGet(Dev,
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	695b      	ldr	r3, [r3, #20]
 80011c4:	623b      	str	r3, [r7, #32]
					LLData.inter_measurement_period_ms);

		Status = SetPresetMode(Dev,
 80011c6:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80011ca:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 80011ce:	6a3b      	ldr	r3, [r7, #32]
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	f7ff fb23 	bl	800081c <SetPresetMode>
 80011d6:	4603      	mov	r3, r0
 80011d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				PresetMode,
				NewDistanceMode,
				inter_measurement_period_ms);
	}

	if (Status == VL53L1_ERROR_NONE) {
 80011dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d10f      	bne.n	8001204 <ChangePresetMode+0xcc>
		Status = VL53L1_set_timeouts_us(Dev, PhaseCalTimeoutUs,
 80011e4:	68f9      	ldr	r1, [r7, #12]
 80011e6:	693a      	ldr	r2, [r7, #16]
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f000 fca2 	bl	8001b34 <VL53L1_set_timeouts_us>
 80011f0:	4603      	mov	r3, r0
 80011f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			MmTimeoutUs, TimingBudget);

		if (Status == VL53L1_ERROR_NONE)
 80011f6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d102      	bne.n	8001204 <ChangePresetMode+0xcc>
			VL53L1DevDataSet(Dev, LLData.range_config_timeout_us,
 80011fe:	697a      	ldr	r2, [r7, #20]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	611a      	str	r2, [r3, #16]
				TimingBudget);
	}

	if (Status == VL53L1_ERROR_NONE)
 8001204:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001208:	2b00      	cmp	r3, #0
 800120a:	d108      	bne.n	800121e <ChangePresetMode+0xe6>
		Status = VL53L1_set_user_zone(Dev, &user_zone);
 800120c:	f107 0318 	add.w	r3, r7, #24
 8001210:	4619      	mov	r1, r3
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f000 fd68 	bl	8001ce8 <VL53L1_set_user_zone>
 8001218:	4603      	mov	r3, r0
 800121a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (Status == VL53L1_ERROR_NONE) {
 800121e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001222:	2b00      	cmp	r3, #0
 8001224:	d10b      	bne.n	800123e <ChangePresetMode+0x106>
		DeviceMeasurementMode = VL53L1DevDataGet(Dev,
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	789b      	ldrb	r3, [r3, #2]
 800122a:	77fb      	strb	r3, [r7, #31]
				LLData.measurement_mode);

		Status = VL53L1_init_and_start_range(
 800122c:	7ffb      	ldrb	r3, [r7, #31]
 800122e:	2206      	movs	r2, #6
 8001230:	4619      	mov	r1, r3
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f001 f86a 	bl	800230c <VL53L1_init_and_start_range>
 8001238:	4603      	mov	r3, r0
 800123a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				Dev,
				DeviceMeasurementMode,
				VL53L1_DEVICECONFIGLEVEL_FULL);
	}

	if (Status == VL53L1_ERROR_NONE)
 800123e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001242:	2b00      	cmp	r3, #0
 8001244:	d104      	bne.n	8001250 <ChangePresetMode+0x118>
		VL53L1DevDataSet(Dev,
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800124c:	f883 237e 	strb.w	r2, [r3, #894]	; 0x37e
			CurrentParameters.InternalDistanceMode,
			NewDistanceMode);

	LOG_FUNCTION_END(Status);
	return Status;
 8001250:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8001254:	4618      	mov	r0, r3
 8001256:	3728      	adds	r7, #40	; 0x28
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}

0800125c <VL53L1_ClearInterruptAndStartMeasurement>:


VL53L1_Error VL53L1_ClearInterruptAndStartMeasurement(VL53L1_DEV Dev)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8001264:	2300      	movs	r3, #0
 8001266:	73fb      	strb	r3, [r7, #15]
	VL53L1_DistanceModes InternalDistanceMode;
	VL53L1_DistanceModes NewDistanceMode;

	LOG_FUNCTION_START("");

	DeviceMeasurementMode = VL53L1DevDataGet(Dev, LLData.measurement_mode);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	789b      	ldrb	r3, [r3, #2]
 800126c:	73bb      	strb	r3, [r7, #14]
	InternalDistanceMode = VL53L1DevDataGet(Dev,
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	f893 337e 	ldrb.w	r3, [r3, #894]	; 0x37e
 8001274:	737b      	strb	r3, [r7, #13]
			CurrentParameters.InternalDistanceMode);
	NewDistanceMode = VL53L1DevDataGet(Dev,
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	f893 337f 	ldrb.w	r3, [r3, #895]	; 0x37f
 800127c:	733b      	strb	r3, [r7, #12]
			CurrentParameters.NewDistanceMode);

	if (NewDistanceMode != InternalDistanceMode)
 800127e:	7b3a      	ldrb	r2, [r7, #12]
 8001280:	7b7b      	ldrb	r3, [r7, #13]
 8001282:	429a      	cmp	r2, r3
 8001284:	d005      	beq.n	8001292 <VL53L1_ClearInterruptAndStartMeasurement+0x36>
		Status = ChangePresetMode(Dev);
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f7ff ff56 	bl	8001138 <ChangePresetMode>
 800128c:	4603      	mov	r3, r0
 800128e:	73fb      	strb	r3, [r7, #15]
 8001290:	e006      	b.n	80012a0 <VL53L1_ClearInterruptAndStartMeasurement+0x44>
	else
		Status = VL53L1_clear_interrupt_and_enable_next_range(
 8001292:	7bbb      	ldrb	r3, [r7, #14]
 8001294:	4619      	mov	r1, r3
 8001296:	6878      	ldr	r0, [r7, #4]
 8001298:	f001 fbc1 	bl	8002a1e <VL53L1_clear_interrupt_and_enable_next_range>
 800129c:	4603      	mov	r3, r0
 800129e:	73fb      	strb	r3, [r7, #15]
						Dev,
						DeviceMeasurementMode);

	LOG_FUNCTION_END(Status);
	return Status;
 80012a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	3710      	adds	r7, #16
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}

080012ac <ComputeRQL>:


static uint8_t ComputeRQL(uint8_t active_results,
		uint8_t FilteredRangeStatus,
		VL53L1_range_data_t *presults_data)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b08d      	sub	sp, #52	; 0x34
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	4603      	mov	r3, r0
 80012b4:	603a      	str	r2, [r7, #0]
 80012b6:	71fb      	strb	r3, [r7, #7]
 80012b8:	460b      	mov	r3, r1
 80012ba:	71bb      	strb	r3, [r7, #6]
	int16_t SRL = 300;
 80012bc:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80012c0:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t SRAS = 30;
 80012c2:	231e      	movs	r3, #30
 80012c4:	847b      	strh	r3, [r7, #34]	; 0x22
	FixPoint1616_t RAS;
	FixPoint1616_t SRQL;
	FixPoint1616_t GI =   7713587; /* 117.7 * 65536 */
 80012c6:	4b34      	ldr	r3, [pc, #208]	; (8001398 <ComputeRQL+0xec>)
 80012c8:	61fb      	str	r3, [r7, #28]
	FixPoint1616_t GGm =  3198157; /* 48.8 * 65536 */
 80012ca:	4b34      	ldr	r3, [pc, #208]	; (800139c <ComputeRQL+0xf0>)
 80012cc:	61bb      	str	r3, [r7, #24]
	FixPoint1616_t LRAP = 6554;    /* 0.1 * 65536 */
 80012ce:	f641 139a 	movw	r3, #6554	; 0x199a
 80012d2:	617b      	str	r3, [r7, #20]
	FixPoint1616_t partial;
	uint8_t finalvalue;
	uint8_t returnvalue;

	if (active_results == 0)
 80012d4:	79fb      	ldrb	r3, [r7, #7]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d103      	bne.n	80012e2 <ComputeRQL+0x36>
		returnvalue = 0;
 80012da:	2300      	movs	r3, #0
 80012dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80012e0:	e052      	b.n	8001388 <ComputeRQL+0xdc>
	else if (FilteredRangeStatus == VL53L1_DEVICEERROR_PHASECONSISTENCY)
 80012e2:	79bb      	ldrb	r3, [r7, #6]
 80012e4:	2b07      	cmp	r3, #7
 80012e6:	d103      	bne.n	80012f0 <ComputeRQL+0x44>
		returnvalue = 50;
 80012e8:	2332      	movs	r3, #50	; 0x32
 80012ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80012ee:	e04b      	b.n	8001388 <ComputeRQL+0xdc>
	else {
		if (presults_data->median_range_mm < SRL)
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80012f6:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 80012fa:	429a      	cmp	r2, r3
 80012fc:	dd03      	ble.n	8001306 <ComputeRQL+0x5a>
			RAS = SRAS * 65536;
 80012fe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001300:	041b      	lsls	r3, r3, #16
 8001302:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001304:	e007      	b.n	8001316 <ComputeRQL+0x6a>
		else
			RAS = LRAP * presults_data->median_range_mm;
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800130c:	461a      	mov	r2, r3
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	fb03 f302 	mul.w	r3, r3, r2
 8001314:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Fix1616 + (fix1616 * uint16_t / fix1616) * 65536 = fix1616 */
		if (RAS != 0) {
 8001316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001318:	2b00      	cmp	r3, #0
 800131a:	d020      	beq.n	800135e <ComputeRQL+0xb2>
			partial = (GGm * presults_data->sigma_mm);
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8001320:	461a      	mov	r2, r3
 8001322:	69bb      	ldr	r3, [r7, #24]
 8001324:	fb03 f302 	mul.w	r3, r3, r2
 8001328:	613b      	str	r3, [r7, #16]
			partial = partial + (RAS >> 1);
 800132a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800132c:	085b      	lsrs	r3, r3, #1
 800132e:	693a      	ldr	r2, [r7, #16]
 8001330:	4413      	add	r3, r2
 8001332:	613b      	str	r3, [r7, #16]
			partial = partial / RAS;
 8001334:	693a      	ldr	r2, [r7, #16]
 8001336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001338:	fbb2 f3f3 	udiv	r3, r2, r3
 800133c:	613b      	str	r3, [r7, #16]
			partial = partial * 65536;
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	041b      	lsls	r3, r3, #16
 8001342:	613b      	str	r3, [r7, #16]
			if (partial <= GI)
 8001344:	693a      	ldr	r2, [r7, #16]
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	429a      	cmp	r2, r3
 800134a:	d804      	bhi.n	8001356 <ComputeRQL+0xaa>
				SRQL = GI - partial;
 800134c:	69fa      	ldr	r2, [r7, #28]
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	62bb      	str	r3, [r7, #40]	; 0x28
 8001354:	e006      	b.n	8001364 <ComputeRQL+0xb8>
			else
				SRQL = 50 * 65536;
 8001356:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800135a:	62bb      	str	r3, [r7, #40]	; 0x28
 800135c:	e002      	b.n	8001364 <ComputeRQL+0xb8>
		} else
			SRQL = 100 * 65536;
 800135e:	f44f 03c8 	mov.w	r3, #6553600	; 0x640000
 8001362:	62bb      	str	r3, [r7, #40]	; 0x28

		finalvalue = (uint8_t)(SRQL >> 16);
 8001364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001366:	0c1b      	lsrs	r3, r3, #16
 8001368:	73fb      	strb	r3, [r7, #15]
		returnvalue = MAX(50, MIN(100, finalvalue));
 800136a:	7bfb      	ldrb	r3, [r7, #15]
 800136c:	2b64      	cmp	r3, #100	; 0x64
 800136e:	d802      	bhi.n	8001376 <ComputeRQL+0xca>
 8001370:	7bfb      	ldrb	r3, [r7, #15]
 8001372:	2b32      	cmp	r3, #50	; 0x32
 8001374:	dd05      	ble.n	8001382 <ComputeRQL+0xd6>
 8001376:	7bfb      	ldrb	r3, [r7, #15]
 8001378:	2b64      	cmp	r3, #100	; 0x64
 800137a:	bf28      	it	cs
 800137c:	2364      	movcs	r3, #100	; 0x64
 800137e:	b2db      	uxtb	r3, r3
 8001380:	e000      	b.n	8001384 <ComputeRQL+0xd8>
 8001382:	2332      	movs	r3, #50	; 0x32
 8001384:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	return returnvalue;
 8001388:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800138c:	4618      	mov	r0, r3
 800138e:	3734      	adds	r7, #52	; 0x34
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr
 8001398:	0075b333 	.word	0x0075b333
 800139c:	0030cccd 	.word	0x0030cccd

080013a0 <ConvertStatusLite>:


static uint8_t ConvertStatusLite(uint8_t FilteredRangeStatus)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b085      	sub	sp, #20
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	4603      	mov	r3, r0
 80013a8:	71fb      	strb	r3, [r7, #7]
	uint8_t RangeStatus;

	switch (FilteredRangeStatus) {
 80013aa:	79fb      	ldrb	r3, [r7, #7]
 80013ac:	3b04      	subs	r3, #4
 80013ae:	2b0f      	cmp	r3, #15
 80013b0:	d83d      	bhi.n	800142e <ConvertStatusLite+0x8e>
 80013b2:	a201      	add	r2, pc, #4	; (adr r2, 80013b8 <ConvertStatusLite+0x18>)
 80013b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013b8:	0800140b 	.word	0x0800140b
 80013bc:	08001405 	.word	0x08001405
 80013c0:	08001411 	.word	0x08001411
 80013c4:	08001417 	.word	0x08001417
 80013c8:	08001423 	.word	0x08001423
 80013cc:	08001429 	.word	0x08001429
 80013d0:	0800142f 	.word	0x0800142f
 80013d4:	0800142f 	.word	0x0800142f
 80013d8:	0800141d 	.word	0x0800141d
 80013dc:	0800142f 	.word	0x0800142f
 80013e0:	0800142f 	.word	0x0800142f
 80013e4:	0800142f 	.word	0x0800142f
 80013e8:	0800142f 	.word	0x0800142f
 80013ec:	0800142f 	.word	0x0800142f
 80013f0:	080013f9 	.word	0x080013f9
 80013f4:	080013ff 	.word	0x080013ff
	case VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY:
		RangeStatus = VL53L1_RANGESTATUS_SYNCRONISATION_INT;
 80013f8:	230a      	movs	r3, #10
 80013fa:	73fb      	strb	r3, [r7, #15]
		break;
 80013fc:	e019      	b.n	8001432 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_NO_WRAP_CHECK_FAIL;
 80013fe:	2306      	movs	r3, #6
 8001400:	73fb      	strb	r3, [r7, #15]
		break;
 8001402:	e016      	b.n	8001432 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGEPHASECHECK:
		RangeStatus = VL53L1_RANGESTATUS_OUTOFBOUNDS_FAIL;
 8001404:	2304      	movs	r3, #4
 8001406:	73fb      	strb	r3, [r7, #15]
		break;
 8001408:	e013      	b.n	8001432 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_MSRCNOTARGET:
		RangeStatus = VL53L1_RANGESTATUS_SIGNAL_FAIL;
 800140a:	2302      	movs	r3, #2
 800140c:	73fb      	strb	r3, [r7, #15]
		break;
 800140e:	e010      	b.n	8001432 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK:
		RangeStatus = VL53L1_RANGESTATUS_SIGMA_FAIL;
 8001410:	2301      	movs	r3, #1
 8001412:	73fb      	strb	r3, [r7, #15]
		break;
 8001414:	e00d      	b.n	8001432 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_PHASECONSISTENCY:
		RangeStatus = VL53L1_RANGESTATUS_WRAP_TARGET_FAIL;
 8001416:	2307      	movs	r3, #7
 8001418:	73fb      	strb	r3, [r7, #15]
		break;
 800141a:	e00a      	b.n	8001432 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGEIGNORETHRESHOLD:
		RangeStatus = VL53L1_RANGESTATUS_XTALK_SIGNAL_FAIL;
 800141c:	2309      	movs	r3, #9
 800141e:	73fb      	strb	r3, [r7, #15]
		break;
 8001420:	e007      	b.n	8001432 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_MINCLIP:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID_MIN_RANGE_CLIPPED;
 8001422:	2303      	movs	r3, #3
 8001424:	73fb      	strb	r3, [r7, #15]
		break;
 8001426:	e004      	b.n	8001432 <ConvertStatusLite+0x92>
	case VL53L1_DEVICEERROR_RANGECOMPLETE:
		RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 8001428:	2300      	movs	r3, #0
 800142a:	73fb      	strb	r3, [r7, #15]
		break;
 800142c:	e001      	b.n	8001432 <ConvertStatusLite+0x92>
	default:
		RangeStatus = VL53L1_RANGESTATUS_NONE;
 800142e:	23ff      	movs	r3, #255	; 0xff
 8001430:	73fb      	strb	r3, [r7, #15]
	}

	return RangeStatus;
 8001432:	7bfb      	ldrb	r3, [r7, #15]
}
 8001434:	4618      	mov	r0, r3
 8001436:	3714      	adds	r7, #20
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr

08001440 <SetSimpleData>:

static VL53L1_Error SetSimpleData(VL53L1_DEV Dev,
	uint8_t active_results, uint8_t device_status,
	VL53L1_range_data_t *presults_data,
	VL53L1_RangingMeasurementData_t *pRangeData)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b08c      	sub	sp, #48	; 0x30
 8001444:	af00      	add	r7, sp, #0
 8001446:	60f8      	str	r0, [r7, #12]
 8001448:	607b      	str	r3, [r7, #4]
 800144a:	460b      	mov	r3, r1
 800144c:	72fb      	strb	r3, [r7, #11]
 800144e:	4613      	mov	r3, r2
 8001450:	72bb      	strb	r3, [r7, #10]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8001452:	2300      	movs	r3, #0
 8001454:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	FixPoint1616_t SignalRate;
	FixPoint1616_t TempFix1616;
	FixPoint1616_t LimitCheckValue;
	int16_t Range;

	pRangeData->TimeStamp = presults_data->time_stamp;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	685a      	ldr	r2, [r3, #4]
 800145c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800145e:	601a      	str	r2, [r3, #0]

	FilteredRangeStatus = presults_data->range_status & 0x1F;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001466:	f003 031f 	and.w	r3, r3, #31
 800146a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	pRangeData->RangeQualityLevel = ComputeRQL(active_results,
 800146e:	f897 102e 	ldrb.w	r1, [r7, #46]	; 0x2e
 8001472:	7afb      	ldrb	r3, [r7, #11]
 8001474:	687a      	ldr	r2, [r7, #4]
 8001476:	4618      	mov	r0, r3
 8001478:	f7ff ff18 	bl	80012ac <ComputeRQL>
 800147c:	4603      	mov	r3, r0
 800147e:	461a      	mov	r2, r3
 8001480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001482:	715a      	strb	r2, [r3, #5]
					FilteredRangeStatus,
					presults_data);

	SignalRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001488:	025b      	lsls	r3, r3, #9
 800148a:	62bb      	str	r3, [r7, #40]	; 0x28
		presults_data->peak_signal_count_rate_mcps);
	pRangeData->SignalRateRtnMegaCps
		= SignalRate;
 800148c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800148e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001490:	609a      	str	r2, [r3, #8]

	AmbientRate = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001496:	025b      	lsls	r3, r3, #9
 8001498:	627b      	str	r3, [r7, #36]	; 0x24
		presults_data->ambient_count_rate_mcps);
	pRangeData->AmbientRateRtnMegaCps = AmbientRate;
 800149a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800149c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800149e:	60da      	str	r2, [r3, #12]

	pRangeData->EffectiveSpadRtnCount =
		presults_data->actual_effective_spads;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	8a1a      	ldrh	r2, [r3, #16]
	pRangeData->EffectiveSpadRtnCount =
 80014a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014a6:	821a      	strh	r2, [r3, #16]

	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80014ac:	025b      	lsls	r3, r3, #9
 80014ae:	623b      	str	r3, [r7, #32]
			presults_data->sigma_mm);

	pRangeData->SigmaMilliMeter = TempFix1616;
 80014b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014b2:	6a3a      	ldr	r2, [r7, #32]
 80014b4:	615a      	str	r2, [r3, #20]

	pRangeData->RangeMilliMeter = presults_data->median_range_mm;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
 80014bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014be:	831a      	strh	r2, [r3, #24]

	pRangeData->RangeFractionalPart = 0;
 80014c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014c2:	2200      	movs	r2, #0
 80014c4:	769a      	strb	r2, [r3, #26]

	/* Treat device error status first */
	switch (device_status) {
 80014c6:	7abb      	ldrb	r3, [r7, #10]
 80014c8:	3b01      	subs	r3, #1
 80014ca:	2b10      	cmp	r3, #16
 80014cc:	d82c      	bhi.n	8001528 <SetSimpleData+0xe8>
 80014ce:	a201      	add	r2, pc, #4	; (adr r2, 80014d4 <SetSimpleData+0x94>)
 80014d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014d4:	08001519 	.word	0x08001519
 80014d8:	08001519 	.word	0x08001519
 80014dc:	08001519 	.word	0x08001519
 80014e0:	08001529 	.word	0x08001529
 80014e4:	08001529 	.word	0x08001529
 80014e8:	08001529 	.word	0x08001529
 80014ec:	08001529 	.word	0x08001529
 80014f0:	08001529 	.word	0x08001529
 80014f4:	08001529 	.word	0x08001529
 80014f8:	08001529 	.word	0x08001529
 80014fc:	08001529 	.word	0x08001529
 8001500:	08001529 	.word	0x08001529
 8001504:	08001521 	.word	0x08001521
 8001508:	08001529 	.word	0x08001529
 800150c:	08001529 	.word	0x08001529
 8001510:	08001529 	.word	0x08001529
 8001514:	08001519 	.word	0x08001519
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_VCSELCONTINUITYTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_HARDWARE_FAIL;
 8001518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800151a:	2205      	movs	r2, #5
 800151c:	76da      	strb	r2, [r3, #27]
		break;
 800151e:	e006      	b.n	800152e <SetSimpleData+0xee>
	case VL53L1_DEVICEERROR_USERROICLIP:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_MIN_RANGE_FAIL;
 8001520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001522:	220d      	movs	r2, #13
 8001524:	76da      	strb	r2, [r3, #27]
		break;
 8001526:	e002      	b.n	800152e <SetSimpleData+0xee>
	default:
		pRangeData->RangeStatus = VL53L1_RANGESTATUS_RANGE_VALID;
 8001528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800152a:	2200      	movs	r2, #0
 800152c:	76da      	strb	r2, [r3, #27]
	}

	/* Now deal with range status according to the ranging preset */
	if (pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) {
 800152e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001530:	7edb      	ldrb	r3, [r3, #27]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d108      	bne.n	8001548 <SetSimpleData+0x108>
			pRangeData->RangeStatus =
				ConvertStatusLite(FilteredRangeStatus);
 8001536:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800153a:	4618      	mov	r0, r3
 800153c:	f7ff ff30 	bl	80013a0 <ConvertStatusLite>
 8001540:	4603      	mov	r3, r0
 8001542:	461a      	mov	r2, r3
			pRangeData->RangeStatus =
 8001544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001546:	76da      	strb	r2, [r3, #27]
	}

	/* Update current Limit Check */
	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800154c:	025b      	lsls	r3, r3, #9
 800154e:	623b      	str	r3, [r7, #32]
			presults_data->sigma_mm);
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	6a3a      	ldr	r2, [r7, #32]
 8001554:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390
		LimitChecksCurrent, VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
		TempFix1616);

	TempFix1616 = VL53L1_FIXPOINT97TOFIXPOINT1616(
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800155c:	025b      	lsls	r3, r3, #9
 800155e:	623b      	str	r3, [r7, #32]
			presults_data->peak_signal_count_rate_mcps);
	VL53L1_SETARRAYPARAMETERFIELD(Dev,
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	6a3a      	ldr	r2, [r7, #32]
 8001564:	f8c3 2394 	str.w	r2, [r3, #916]	; 0x394
		LimitChecksCurrent, VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
		TempFix1616);

	/* Update Limit Check Status */
	/* Sigma */
	VL53L1_GetLimitCheckValue(Dev,
 8001568:	f107 0314 	add.w	r3, r7, #20
 800156c:	461a      	mov	r2, r3
 800156e:	2100      	movs	r1, #0
 8001570:	68f8      	ldr	r0, [r7, #12]
 8001572:	f7ff fd0e 	bl	8000f92 <VL53L1_GetLimitCheckValue>
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
			&LimitCheckValue);

	SigmaLimitflag = (FilteredRangeStatus ==
			VL53L1_DEVICEERROR_SIGMATHRESHOLDCHECK)
			? 1 : 0;
 8001576:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800157a:	2b06      	cmp	r3, #6
 800157c:	bf0c      	ite	eq
 800157e:	2301      	moveq	r3, #1
 8001580:	2300      	movne	r3, #0
 8001582:	b2db      	uxtb	r3, r3
	SigmaLimitflag = (FilteredRangeStatus ==
 8001584:	77fb      	strb	r3, [r7, #31]

	VL53L1_GetLimitCheckEnable(Dev,
 8001586:	f107 0319 	add.w	r3, r7, #25
 800158a:	461a      	mov	r2, r3
 800158c:	2100      	movs	r1, #0
 800158e:	68f8      	ldr	r0, [r7, #12]
 8001590:	f7ff fca3 	bl	8000eda <VL53L1_GetLimitCheckEnable>
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE,
			&Temp8Enable);

	Temp8 = ((Temp8Enable == 1) && (SigmaLimitflag == 1)) ? 1 : 0;
 8001594:	7e7b      	ldrb	r3, [r7, #25]
 8001596:	2b01      	cmp	r3, #1
 8001598:	d104      	bne.n	80015a4 <SetSimpleData+0x164>
 800159a:	7ffb      	ldrb	r3, [r7, #31]
 800159c:	2b01      	cmp	r3, #1
 800159e:	d101      	bne.n	80015a4 <SetSimpleData+0x164>
 80015a0:	2301      	movs	r3, #1
 80015a2:	e000      	b.n	80015a6 <SetSimpleData+0x166>
 80015a4:	2300      	movs	r3, #0
 80015a6:	77bb      	strb	r3, [r7, #30]
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	7fba      	ldrb	r2, [r7, #30]
 80015ac:	f883 2386 	strb.w	r2, [r3, #902]	; 0x386
			VL53L1_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

	/* Signal Rate */
	VL53L1_GetLimitCheckValue(Dev,
 80015b0:	f107 0314 	add.w	r3, r7, #20
 80015b4:	461a      	mov	r2, r3
 80015b6:	2101      	movs	r1, #1
 80015b8:	68f8      	ldr	r0, [r7, #12]
 80015ba:	f7ff fcea 	bl	8000f92 <VL53L1_GetLimitCheckValue>
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&LimitCheckValue);

	SignalLimitflag = (FilteredRangeStatus ==
			VL53L1_DEVICEERROR_MSRCNOTARGET)
			? 1 : 0;
 80015be:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80015c2:	2b04      	cmp	r3, #4
 80015c4:	bf0c      	ite	eq
 80015c6:	2301      	moveq	r3, #1
 80015c8:	2300      	movne	r3, #0
 80015ca:	b2db      	uxtb	r3, r3
	SignalLimitflag = (FilteredRangeStatus ==
 80015cc:	777b      	strb	r3, [r7, #29]

	VL53L1_GetLimitCheckEnable(Dev,
 80015ce:	f107 0319 	add.w	r3, r7, #25
 80015d2:	461a      	mov	r2, r3
 80015d4:	2101      	movs	r1, #1
 80015d6:	68f8      	ldr	r0, [r7, #12]
 80015d8:	f7ff fc7f 	bl	8000eda <VL53L1_GetLimitCheckEnable>
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&Temp8Enable);

	Temp8 = ((Temp8Enable == 1) && (SignalLimitflag == 1)) ? 1 : 0;
 80015dc:	7e7b      	ldrb	r3, [r7, #25]
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d104      	bne.n	80015ec <SetSimpleData+0x1ac>
 80015e2:	7f7b      	ldrb	r3, [r7, #29]
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d101      	bne.n	80015ec <SetSimpleData+0x1ac>
 80015e8:	2301      	movs	r3, #1
 80015ea:	e000      	b.n	80015ee <SetSimpleData+0x1ae>
 80015ec:	2300      	movs	r3, #0
 80015ee:	77bb      	strb	r3, [r7, #30]
	VL53L1_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	7fba      	ldrb	r2, [r7, #30]
 80015f4:	f883 2387 	strb.w	r2, [r3, #903]	; 0x387
			VL53L1_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, Temp8);

	Range = pRangeData->RangeMilliMeter;
 80015f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015fa:	8b1b      	ldrh	r3, [r3, #24]
 80015fc:	837b      	strh	r3, [r7, #26]
	if ((pRangeData->RangeStatus == VL53L1_RANGESTATUS_RANGE_VALID) &&
 80015fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001600:	7edb      	ldrb	r3, [r3, #27]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d110      	bne.n	8001628 <SetSimpleData+0x1e8>
 8001606:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800160a:	2b00      	cmp	r3, #0
 800160c:	da0c      	bge.n	8001628 <SetSimpleData+0x1e8>
		(Range < 0)) {
		if (Range < BDTable[VL53L1_TUNING_PROXY_MIN])
 800160e:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8001612:	4b08      	ldr	r3, [pc, #32]	; (8001634 <SetSimpleData+0x1f4>)
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	429a      	cmp	r2, r3
 8001618:	da03      	bge.n	8001622 <SetSimpleData+0x1e2>
			pRangeData->RangeStatus =
 800161a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800161c:	220e      	movs	r2, #14
 800161e:	76da      	strb	r2, [r3, #27]
 8001620:	e002      	b.n	8001628 <SetSimpleData+0x1e8>
					VL53L1_RANGESTATUS_RANGE_INVALID;
		else
			pRangeData->RangeMilliMeter = 0;
 8001622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001624:	2200      	movs	r2, #0
 8001626:	831a      	strh	r2, [r3, #24]
	}

	return Status;
 8001628:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800162c:	4618      	mov	r0, r3
 800162e:	3730      	adds	r7, #48	; 0x30
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	20000000 	.word	0x20000000

08001638 <VL53L1_GetRangingMeasurementData>:



VL53L1_Error VL53L1_GetRangingMeasurementData(VL53L1_DEV Dev,
	VL53L1_RangingMeasurementData_t *pRangingMeasurementData)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b0a8      	sub	sp, #160	; 0xa0
 800163c:	af02      	add	r7, sp, #8
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	6039      	str	r1, [r7, #0]
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8001642:	2300      	movs	r3, #0
 8001644:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	VL53L1_range_results_t       results;
	VL53L1_range_results_t       *presults = &results;
 8001648:	f107 0308 	add.w	r3, r7, #8
 800164c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

	LOG_FUNCTION_START("");


	/* Clear Ranging Data */
	memset(pRangingMeasurementData, 0xFF,
 8001650:	221c      	movs	r2, #28
 8001652:	21ff      	movs	r1, #255	; 0xff
 8001654:	6838      	ldr	r0, [r7, #0]
 8001656:	f00b f806 	bl	800c666 <memset>
		sizeof(VL53L1_RangingMeasurementData_t));

	/* Get Ranging Data */
	Status = VL53L1_get_device_results(
 800165a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800165e:	2102      	movs	r1, #2
 8001660:	6878      	ldr	r0, [r7, #4]
 8001662:	f001 f95e 	bl	8002922 <VL53L1_get_device_results>
 8001666:	4603      	mov	r3, r0
 8001668:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
			Dev,
			VL53L1_DEVICERESULTSLEVEL_FULL,
			presults);

	if (Status == VL53L1_ERROR_NONE) {
 800166c:	f997 3097 	ldrsb.w	r3, [r7, #151]	; 0x97
 8001670:	2b00      	cmp	r3, #0
 8001672:	d117      	bne.n	80016a4 <VL53L1_GetRangingMeasurementData+0x6c>
		pRangingMeasurementData->StreamCount = presults->stream_count;
 8001674:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001678:	789a      	ldrb	r2, [r3, #2]
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	711a      	strb	r2, [r3, #4]

		/* in case of lite ranging or autonomous the following function
		 * returns index = 0
		 */
		presults_data = &(presults->data[0]);
 800167e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001682:	3304      	adds	r3, #4
 8001684:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		Status = SetSimpleData(Dev, 1,
 8001688:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800168c:	78da      	ldrb	r2, [r3, #3]
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	9300      	str	r3, [sp, #0]
 8001692:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001696:	2101      	movs	r1, #1
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f7ff fed1 	bl	8001440 <SetSimpleData>
 800169e:	4603      	mov	r3, r0
 80016a0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				presults_data,
				pRangingMeasurementData);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80016a4:	f997 3097 	ldrsb.w	r3, [r7, #151]	; 0x97
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3798      	adds	r7, #152	; 0x98
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <VL53L1_SetThresholdConfig>:

/* Group PAL detection triggered events Functions */

VL53L1_Error VL53L1_SetThresholdConfig(VL53L1_DEV Dev,
		VL53L1_DetectionConfig_t *pConfig)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b08e      	sub	sp, #56	; 0x38
 80016b4:	af02      	add	r7, sp, #8
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	6039      	str	r1, [r7, #0]
#define BADTHRESBOUNDS(T) \
	(((T.CrossMode == VL53L1_THRESHOLD_OUT_OF_WINDOW) || \
	(T.CrossMode == VL53L1_THRESHOLD_IN_WINDOW)) && (T.Low > T.High))

	VL53L1_Error Status = VL53L1_ERROR_NONE;
 80016ba:	2300      	movs	r3, #0
 80016bc:	76fb      	strb	r3, [r7, #27]
	FixPoint1616_t gain, high1616, low1616;
	VL53L1_LLDriverData_t *pdev;

	LOG_FUNCTION_START("");

	pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	62fb      	str	r3, [r7, #44]	; 0x2c

	Status = VL53L1_get_GPIO_interrupt_config(Dev, &Cfg);
 80016c2:	f107 030c 	add.w	r3, r7, #12
 80016c6:	4619      	mov	r1, r3
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f001 fb1f 	bl	8002d0c <VL53L1_get_GPIO_interrupt_config>
 80016ce:	4603      	mov	r3, r0
 80016d0:	76fb      	strb	r3, [r7, #27]
	if (Status == VL53L1_ERROR_NONE) {
 80016d2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	f040 80ba 	bne.w	8001850 <VL53L1_SetThresholdConfig+0x1a0>
		if (pConfig->DetectionMode == VL53L1_DETECTION_NORMAL_RUN) {
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d10d      	bne.n	8001700 <VL53L1_SetThresholdConfig+0x50>
			Cfg.intr_new_measure_ready = 1;
 80016e4:	2301      	movs	r3, #1
 80016e6:	73bb      	strb	r3, [r7, #14]
			Status = VL53L1_set_GPIO_interrupt_config_struct(Dev,
 80016e8:	8b3b      	ldrh	r3, [r7, #24]
 80016ea:	f8ad 3000 	strh.w	r3, [sp]
 80016ee:	f107 030c 	add.w	r3, r7, #12
 80016f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	f001 fadb 	bl	8002cb0 <VL53L1_set_GPIO_interrupt_config_struct>
 80016fa:	4603      	mov	r3, r0
 80016fc:	76fb      	strb	r3, [r7, #27]
 80016fe:	e0a7      	b.n	8001850 <VL53L1_SetThresholdConfig+0x1a0>
					Cfg);
		} else {
			if (BADTHRESBOUNDS(pConfig->Distance))
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	789b      	ldrb	r3, [r3, #2]
 8001704:	2b02      	cmp	r3, #2
 8001706:	d003      	beq.n	8001710 <VL53L1_SetThresholdConfig+0x60>
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	789b      	ldrb	r3, [r3, #2]
 800170c:	2b03      	cmp	r3, #3
 800170e:	d107      	bne.n	8001720 <VL53L1_SetThresholdConfig+0x70>
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	88da      	ldrh	r2, [r3, #6]
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	889b      	ldrh	r3, [r3, #4]
 8001718:	429a      	cmp	r2, r3
 800171a:	d901      	bls.n	8001720 <VL53L1_SetThresholdConfig+0x70>
				Status = VL53L1_ERROR_INVALID_PARAMS;
 800171c:	23fc      	movs	r3, #252	; 0xfc
 800171e:	76fb      	strb	r3, [r7, #27]
			if ((Status == VL53L1_ERROR_NONE) &&
 8001720:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d10f      	bne.n	8001748 <VL53L1_SetThresholdConfig+0x98>
					(BADTHRESBOUNDS(pConfig->Rate)))
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	7a1b      	ldrb	r3, [r3, #8]
			if ((Status == VL53L1_ERROR_NONE) &&
 800172c:	2b02      	cmp	r3, #2
 800172e:	d003      	beq.n	8001738 <VL53L1_SetThresholdConfig+0x88>
					(BADTHRESBOUNDS(pConfig->Rate)))
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	7a1b      	ldrb	r3, [r3, #8]
 8001734:	2b03      	cmp	r3, #3
 8001736:	d107      	bne.n	8001748 <VL53L1_SetThresholdConfig+0x98>
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	691a      	ldr	r2, [r3, #16]
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	429a      	cmp	r2, r3
 8001742:	d901      	bls.n	8001748 <VL53L1_SetThresholdConfig+0x98>
				Status = VL53L1_ERROR_INVALID_PARAMS;
 8001744:	23fc      	movs	r3, #252	; 0xfc
 8001746:	76fb      	strb	r3, [r7, #27]
			if (Status == VL53L1_ERROR_NONE) {
 8001748:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d149      	bne.n	80017e4 <VL53L1_SetThresholdConfig+0x134>
				Cfg.intr_new_measure_ready = 0;
 8001750:	2300      	movs	r3, #0
 8001752:	73bb      	strb	r3, [r7, #14]
				Cfg.intr_no_target = pConfig->IntrNoTarget;
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	785b      	ldrb	r3, [r3, #1]
 8001758:	73fb      	strb	r3, [r7, #15]
				/* fix ticket 466238
				 * Apply invert distance gain to thresholds */
				g = pdev->gain_cal.standard_ranging_gain_factor;
 800175a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800175c:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8001760:	857b      	strh	r3, [r7, #42]	; 0x2a
				/* gain is ufix 5.11, convert to 16.16 */
				gain = (FixPoint1616_t) ((uint32_t)g << 5);
 8001762:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001764:	015b      	lsls	r3, r3, #5
 8001766:	627b      	str	r3, [r7, #36]	; 0x24
				high1616 = (FixPoint1616_t) ((uint32_t)
						pConfig->Distance.High << 16);
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	889b      	ldrh	r3, [r3, #4]
				high1616 = (FixPoint1616_t) ((uint32_t)
 800176c:	041b      	lsls	r3, r3, #16
 800176e:	623b      	str	r3, [r7, #32]
				low1616 = (FixPoint1616_t) ((uint32_t)
						pConfig->Distance.Low << 16);
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	88db      	ldrh	r3, [r3, #6]
				low1616 = (FixPoint1616_t) ((uint32_t)
 8001774:	041b      	lsls	r3, r3, #16
 8001776:	61fb      	str	r3, [r7, #28]
				/* +32768 to round the results*/
				high1616 = (high1616 + 32768) / gain;
 8001778:	6a3b      	ldr	r3, [r7, #32]
 800177a:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800177e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001780:	fbb2 f3f3 	udiv	r3, r2, r3
 8001784:	623b      	str	r3, [r7, #32]
				low1616 = (low1616 + 32768) / gain;
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800178c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800178e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001792:	61fb      	str	r3, [r7, #28]
				Cfg.threshold_distance_high = (uint16_t)
 8001794:	6a3b      	ldr	r3, [r7, #32]
 8001796:	b29b      	uxth	r3, r3
 8001798:	827b      	strh	r3, [r7, #18]
						(high1616 & 0xFFFF);
				Cfg.threshold_distance_low = (uint16_t)
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	b29b      	uxth	r3, r3
 800179e:	82bb      	strh	r3, [r7, #20]
						(low1616 & 0xFFFF);
				/* end fix ticket 466238 */
				Cfg.threshold_rate_high =
					VL53L1_FIXPOINT1616TOFIXPOINT97(
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	0a5b      	lsrs	r3, r3, #9
 80017a6:	b29b      	uxth	r3, r3
				Cfg.threshold_rate_high =
 80017a8:	82fb      	strh	r3, [r7, #22]
							pConfig->Rate.High);
				Cfg.threshold_rate_low =
					VL53L1_FIXPOINT1616TOFIXPOINT97(
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	691b      	ldr	r3, [r3, #16]
 80017ae:	0a5b      	lsrs	r3, r3, #9
 80017b0:	b29b      	uxth	r3, r3
				Cfg.threshold_rate_low =
 80017b2:	833b      	strh	r3, [r7, #24]
							pConfig->Rate.Low);

				Cfg.intr_mode_distance = ConvertModeToLLD(
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	789a      	ldrb	r2, [r3, #2]
 80017b8:	f107 031b 	add.w	r3, r7, #27
 80017bc:	4611      	mov	r1, r2
 80017be:	4618      	mov	r0, r3
 80017c0:	f7fe feee 	bl	80005a0 <ConvertModeToLLD>
 80017c4:	4603      	mov	r3, r0
 80017c6:	733b      	strb	r3, [r7, #12]
						&Status,
						pConfig->Distance.CrossMode);
				if (Status == VL53L1_ERROR_NONE)
 80017c8:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d109      	bne.n	80017e4 <VL53L1_SetThresholdConfig+0x134>
					Cfg.intr_mode_rate = ConvertModeToLLD(
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	7a1a      	ldrb	r2, [r3, #8]
 80017d4:	f107 031b 	add.w	r3, r7, #27
 80017d8:	4611      	mov	r1, r2
 80017da:	4618      	mov	r0, r3
 80017dc:	f7fe fee0 	bl	80005a0 <ConvertModeToLLD>
 80017e0:	4603      	mov	r3, r0
 80017e2:	737b      	strb	r3, [r7, #13]
						&Status,
						pConfig->Rate.CrossMode);
			}

			/* Refine thresholds combination now */
			if (Status == VL53L1_ERROR_NONE) {
 80017e4:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d122      	bne.n	8001832 <VL53L1_SetThresholdConfig+0x182>
				Cfg.intr_combined_mode = 1;
 80017ec:	2301      	movs	r3, #1
 80017ee:	743b      	strb	r3, [r7, #16]
				switch (pConfig->DetectionMode) {
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	3b01      	subs	r3, #1
 80017f6:	2b03      	cmp	r3, #3
 80017f8:	d817      	bhi.n	800182a <VL53L1_SetThresholdConfig+0x17a>
 80017fa:	a201      	add	r2, pc, #4	; (adr r2, 8001800 <VL53L1_SetThresholdConfig+0x150>)
 80017fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001800:	08001811 	.word	0x08001811
 8001804:	0800181b 	.word	0x0800181b
 8001808:	08001825 	.word	0x08001825
 800180c:	08001831 	.word	0x08001831
				case VL53L1_DETECTION_DISTANCE_ONLY:
					Cfg.threshold_rate_high = 0;
 8001810:	2300      	movs	r3, #0
 8001812:	82fb      	strh	r3, [r7, #22]
					Cfg.threshold_rate_low = 0;
 8001814:	2300      	movs	r3, #0
 8001816:	833b      	strh	r3, [r7, #24]
					break;
 8001818:	e00b      	b.n	8001832 <VL53L1_SetThresholdConfig+0x182>
				case VL53L1_DETECTION_RATE_ONLY:
					Cfg.threshold_distance_high = 0;
 800181a:	2300      	movs	r3, #0
 800181c:	827b      	strh	r3, [r7, #18]
					Cfg.threshold_distance_low = 0;
 800181e:	2300      	movs	r3, #0
 8001820:	82bb      	strh	r3, [r7, #20]
					break;
 8001822:	e006      	b.n	8001832 <VL53L1_SetThresholdConfig+0x182>
					/* Nothing to do all is already
					 * in place
					 */
					break;
				case VL53L1_DETECTION_DISTANCE_AND_RATE:
					Cfg.intr_combined_mode = 0;
 8001824:	2300      	movs	r3, #0
 8001826:	743b      	strb	r3, [r7, #16]
					break;
 8001828:	e003      	b.n	8001832 <VL53L1_SetThresholdConfig+0x182>
				default:
					Status = VL53L1_ERROR_INVALID_PARAMS;
 800182a:	23fc      	movs	r3, #252	; 0xfc
 800182c:	76fb      	strb	r3, [r7, #27]
 800182e:	e000      	b.n	8001832 <VL53L1_SetThresholdConfig+0x182>
					break;
 8001830:	bf00      	nop
				}
			}

			if (Status == VL53L1_ERROR_NONE)
 8001832:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d10a      	bne.n	8001850 <VL53L1_SetThresholdConfig+0x1a0>
				Status =
				VL53L1_set_GPIO_interrupt_config_struct(Dev,
 800183a:	8b3b      	ldrh	r3, [r7, #24]
 800183c:	f8ad 3000 	strh.w	r3, [sp]
 8001840:	f107 030c 	add.w	r3, r7, #12
 8001844:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f001 fa32 	bl	8002cb0 <VL53L1_set_GPIO_interrupt_config_struct>
 800184c:	4603      	mov	r3, r0
				Status =
 800184e:	76fb      	strb	r3, [r7, #27]

		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8001850:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8001854:	4618      	mov	r0, r3
 8001856:	3730      	adds	r7, #48	; 0x30
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}

0800185c <VL53L1_data_init>:


VL53L1_Error VL53L1_data_init(
	VL53L1_DEV        Dev,
	uint8_t           read_p2p_data)
{
 800185c:	b5b0      	push	{r4, r5, r7, lr}
 800185e:	b088      	sub	sp, #32
 8001860:	af04      	add	r7, sp, #16
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	460b      	mov	r3, r1
 8001866:	70fb      	strb	r3, [r7, #3]
	/*
	 * Initialise pdev data structure
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 8001868:	2300      	movs	r3, #0
 800186a:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t    *pdev =
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	60bb      	str	r3, [r7, #8]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_init_ll_driver_state(
 8001870:	2162      	movs	r1, #98	; 0x62
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f002 f98c 	bl	8003b90 <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_UNKNOWN);

	pdev->wait_method             = VL53L1_WAIT_METHOD_BLOCKING;
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	2200      	movs	r2, #0
 800187c:	701a      	strb	r2, [r3, #0]
	pdev->preset_mode             = VL53L1_DEVICEPRESETMODE_STANDARD_RANGING;
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	2201      	movs	r2, #1
 8001882:	705a      	strb	r2, [r3, #1]
	pdev->measurement_mode        = VL53L1_DEVICEMEASUREMENTMODE_STOP;
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	2200      	movs	r2, #0
 8001888:	709a      	strb	r2, [r3, #2]

	pdev->offset_calibration_mode =
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	2201      	movs	r2, #1
 800188e:	70da      	strb	r2, [r3, #3]
		VL53L1_OFFSETCALIBRATIONMODE__MM1_MM2__STANDARD;
	pdev->offset_correction_mode  =
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	2201      	movs	r2, #1
 8001894:	711a      	strb	r2, [r3, #4]
		VL53L1_OFFSETCORRECTIONMODE__MM1_MM2_OFFSETS;

	pdev->phasecal_config_timeout_us  =  1000;
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800189c:	609a      	str	r2, [r3, #8]
	pdev->mm_config_timeout_us        =  2000;
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80018a4:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = 13000;
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	f243 22c8 	movw	r2, #13000	; 0x32c8
 80018ac:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms =   100;
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	2264      	movs	r2, #100	; 0x64
 80018b2:	615a      	str	r2, [r3, #20]
	pdev->dss_config__target_total_rate_mcps = 0x0A00;
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 80018ba:	831a      	strh	r2, [r3, #24]
	pdev->debug_mode                  =  0x00;
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	2200      	movs	r2, #0
 80018c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	/* initialise gain calibration values to tuning parameter values */

	pdev->gain_cal.standard_ranging_gain_factor =
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	f240 72db 	movw	r2, #2011	; 0x7db
 80018ca:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
			VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR_DEFAULT;

	/*
	 * Initialise version structure
	 */
	VL53L1_init_version(Dev);
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f002 f942 	bl	8003b58 <VL53L1_init_version>
	 *
	 *  Contains the key NVM data e.g identification info fast oscillator
	 *  freq, max trim and laser safety info
	 */

	if (read_p2p_data > 0 && status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 80018d4:	78fb      	ldrb	r3, [r7, #3]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d008      	beq.n	80018ec <VL53L1_data_init+0x90>
 80018da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d104      	bne.n	80018ec <VL53L1_data_init+0x90>
			status = VL53L1_read_p2p_data(Dev);
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f000 f857 	bl	8001996 <VL53L1_read_p2p_data>
 80018e8:	4603      	mov	r3, r0
 80018ea:	73fb      	strb	r3, [r7, #15]

	/* Initialise Ref SPAD Char configuration structure */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_refspadchar_config_struct(
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	f503 7388 	add.w	r3, r3, #272	; 0x110
	status =
 80018f2:	4618      	mov	r0, r3
 80018f4:	f001 fc72 	bl	80031dc <VL53L1_init_refspadchar_config_struct>
 80018f8:	4603      	mov	r3, r0
 80018fa:	73fb      	strb	r3, [r7, #15]
#endif

	/* Initialise SPAD Self Check (SSC) configuration structure */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_ssc_config_struct(
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	f503 7390 	add.w	r3, r3, #288	; 0x120
	status =
 8001902:	4618      	mov	r0, r3
 8001904:	f001 fc8e 	bl	8003224 <VL53L1_init_ssc_config_struct>
 8001908:	4603      	mov	r3, r0
 800190a:	73fb      	strb	r3, [r7, #15]

	/* Initialise Private Xtalk configuration structure
	 * - Fill with customer NVM data to begin
	 */
	status =
		VL53L1_init_xtalk_config_struct(
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	f103 0242 	add.w	r2, r3, #66	; 0x42
 8001912:	68bb      	ldr	r3, [r7, #8]
 8001914:	f503 7396 	add.w	r3, r3, #300	; 0x12c
	status =
 8001918:	4619      	mov	r1, r3
 800191a:	4610      	mov	r0, r2
 800191c:	f001 fca3 	bl	8003266 <VL53L1_init_xtalk_config_struct>
 8001920:	4603      	mov	r3, r0
 8001922:	73fb      	strb	r3, [r7, #15]

	/* Initialise Offset Calibration configuration structure
	 */
#ifndef VL53L1_NOCALIB
	status =
		VL53L1_init_offset_cal_config_struct(
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	f503 73a2 	add.w	r3, r3, #324	; 0x144
	status =
 800192a:	4618      	mov	r0, r3
 800192c:	f001 fcfd 	bl	800332a <VL53L1_init_offset_cal_config_struct>
 8001930:	4603      	mov	r3, r0
 8001932:	73fb      	strb	r3, [r7, #15]

	/* Initialise Tuning Parameter structure
	 * - Added as part of Patch_AddingTuningParmStorage_11821
	 */
	status =
		VL53L1_init_tuning_parm_storage_struct(
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	33a4      	adds	r3, #164	; 0xa4
	status =
 8001938:	4618      	mov	r0, r3
 800193a:	f001 fd1d 	bl	8003378 <VL53L1_init_tuning_parm_storage_struct>
 800193e:	4603      	mov	r3, r0
 8001940:	73fb      	strb	r3, [r7, #15]
			&(pdev->tuning_parms));

	status = VL53L1_set_vhv_loopbound(Dev,
 8001942:	2120      	movs	r1, #32
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f000 fcc1 	bl	80022cc <VL53L1_set_vhv_loopbound>
 800194a:	4603      	mov	r3, r0
 800194c:	73fb      	strb	r3, [r7, #15]
	/*
	 * Initialise default settings - much happen *after*
	 * reading /setting  of static_nvm_managed
	 */

	if (status == VL53L1_ERROR_NONE)
 800194e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d116      	bne.n	8001984 <VL53L1_data_init+0x128>
		status = VL53L1_set_preset_mode(
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	7858      	ldrb	r0, [r3, #1]
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	8b1c      	ldrh	r4, [r3, #24]
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	689d      	ldr	r5, [r3, #8]
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	68db      	ldr	r3, [r3, #12]
 8001966:	68ba      	ldr	r2, [r7, #8]
 8001968:	6912      	ldr	r2, [r2, #16]
 800196a:	68b9      	ldr	r1, [r7, #8]
 800196c:	6949      	ldr	r1, [r1, #20]
 800196e:	9102      	str	r1, [sp, #8]
 8001970:	9201      	str	r2, [sp, #4]
 8001972:	9300      	str	r3, [sp, #0]
 8001974:	462b      	mov	r3, r5
 8001976:	4622      	mov	r2, r4
 8001978:	4601      	mov	r1, r0
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f000 fad8 	bl	8001f30 <VL53L1_set_preset_mode>
 8001980:	4603      	mov	r3, r0
 8001982:	73fb      	strb	r3, [r7, #15]
						pdev->range_config_timeout_us,
						pdev->inter_measurement_period_ms);

	/* Initial Low Power Auto Mode data structures */
	/* Added for Patch_LowPowerAutoMode */
	VL53L1_low_power_auto_data_init(
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f002 ff16 	bl	80047b6 <VL53L1_low_power_auto_data_init>

#endif

	LOG_FUNCTION_END(status);

	return status;
 800198a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800198e:	4618      	mov	r0, r3
 8001990:	3710      	adds	r7, #16
 8001992:	46bd      	mov	sp, r7
 8001994:	bdb0      	pop	{r4, r5, r7, pc}

08001996 <VL53L1_read_p2p_data>:


VL53L1_Error VL53L1_read_p2p_data(
	VL53L1_DEV        Dev)
{
 8001996:	b580      	push	{r7, lr}
 8001998:	b084      	sub	sp, #16
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
	 *
	 *  Contains the key NVM data e.g identification info
	 *  fast oscillator freq, max trim and laser safety info
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 800199e:	2300      	movs	r3, #0
 80019a0:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE)
 80019a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d108      	bne.n	80019c0 <VL53L1_read_p2p_data+0x2a>
		status = VL53L1_get_static_nvm_managed(
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80019b4:	4619      	mov	r1, r3
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f003 f952 	bl	8004c60 <VL53L1_get_static_nvm_managed>
 80019bc:	4603      	mov	r3, r0
 80019be:	73fb      	strb	r3, [r7, #15]
						Dev,
						&(pdev->stat_nvm));

	if (status == VL53L1_ERROR_NONE)
 80019c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d107      	bne.n	80019d8 <VL53L1_read_p2p_data+0x42>
		status = VL53L1_get_customer_nvm_managed(
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	3342      	adds	r3, #66	; 0x42
 80019cc:	4619      	mov	r1, r3
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f003 fa84 	bl	8004edc <VL53L1_get_customer_nvm_managed>
 80019d4:	4603      	mov	r3, r0
 80019d6:	73fb      	strb	r3, [r7, #15]
						Dev,
						&(pdev->customer));

	if (status == VL53L1_ERROR_NONE) {
 80019d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d115      	bne.n	8001a0c <VL53L1_read_p2p_data+0x76>

		status = VL53L1_get_nvm_copy_data(
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	f503 73fd 	add.w	r3, r3, #506	; 0x1fa
 80019e6:	4619      	mov	r1, r3
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f004 f95d 	bl	8005ca8 <VL53L1_get_nvm_copy_data>
 80019ee:	4603      	mov	r3, r0
 80019f0:	73fb      	strb	r3, [r7, #15]
						Dev,
						&(pdev->nvm_copy_data));

		/* copy Return Good SPADs to buffer */
		if (status == VL53L1_ERROR_NONE)
 80019f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d108      	bne.n	8001a0c <VL53L1_read_p2p_data+0x76>
			VL53L1_copy_rtn_good_spads_to_buffer(
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	f503 72fd 	add.w	r2, r3, #506	; 0x1fa
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	33f0      	adds	r3, #240	; 0xf0
 8001a04:	4619      	mov	r1, r3
 8001a06:	4610      	mov	r0, r2
 8001a08:	f002 fa25 	bl	8003e56 <VL53L1_copy_rtn_good_spads_to_buffer>

	/*
	 * read slow osc calibration value
	 * counts per ms
	 */
	if (status == VL53L1_ERROR_NONE)
 8001a0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d109      	bne.n	8001a28 <VL53L1_read_p2p_data+0x92>
		status =
			VL53L1_RdWord(
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
		status =
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	21de      	movs	r1, #222	; 0xde
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f004 faa4 	bl	8005f6c <VL53L1_RdWord>
 8001a24:	4603      	mov	r3, r0
 8001a26:	73fb      	strb	r3, [r7, #15]

	/*
	 * Check if there a sensible value for osc_measured__fast_osc__frequency
	 */

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency < 0x1000) {
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	f8b3 315e 	ldrh.w	r3, [r3, #350]	; 0x15e
 8001a2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a32:	d204      	bcs.n	8001a3e <VL53L1_read_p2p_data+0xa8>
			VL53L1_TRACE_LEVEL_WARNING,
			"\nInvalid %s value (0x%04X) - forcing to 0x%04X\n\n",
			"pdev->stat_nvm.osc_measured__fast_osc__frequency",
			pdev->stat_nvm.osc_measured__fast_osc__frequency,
			0xBCCC);
		pdev->stat_nvm.osc_measured__fast_osc__frequency = 0xBCCC;
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	f64b 42cc 	movw	r2, #48332	; 0xbccc
 8001a3a:	f8a3 215e 	strh.w	r2, [r3, #350]	; 0x15e

	/*
	 * Get MM ROI - contains optical centre as SPAD number
	 */

	if (status == VL53L1_ERROR_NONE)
 8001a3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d107      	bne.n	8001a56 <VL53L1_read_p2p_data+0xc0>
		status =
			VL53L1_get_mode_mitigation_roi(
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	339e      	adds	r3, #158	; 0x9e
		status =
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f000 f990 	bl	8001d72 <VL53L1_get_mode_mitigation_roi>
 8001a52:	4603      	mov	r3, r0
 8001a54:	73fb      	strb	r3, [r7, #15]

	/* catch parts where the optical centre is
	 * no programmed in to the NVM
	 */

	if (pdev->optical_centre.x_centre == 0 &&
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d114      	bne.n	8001a8a <VL53L1_read_p2p_data+0xf4>
		pdev->optical_centre.y_centre == 0) {
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
	if (pdev->optical_centre.x_centre == 0 &&
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d10f      	bne.n	8001a8a <VL53L1_read_p2p_data+0xf4>
		pdev->optical_centre.x_centre =
				pdev->mm_roi.x_centre << 4;
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 8001a70:	011b      	lsls	r3, r3, #4
 8001a72:	b2da      	uxtb	r2, r3
		pdev->optical_centre.x_centre =
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
		pdev->optical_centre.y_centre =
				pdev->mm_roi.y_centre << 4;
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	f893 309f 	ldrb.w	r3, [r3, #159]	; 0x9f
 8001a80:	011b      	lsls	r3, r3, #4
 8001a82:	b2da      	uxtb	r2, r3
		pdev->optical_centre.y_centre =
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
	}

	LOG_FUNCTION_END(status);

	return status;
 8001a8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3710      	adds	r7, #16
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}

08001a96 <VL53L1_set_inter_measurement_period_ms>:


VL53L1_Error VL53L1_set_inter_measurement_period_ms(
	VL53L1_DEV              Dev,
	uint32_t                inter_measurement_period_ms)
{
 8001a96:	b480      	push	{r7}
 8001a98:	b085      	sub	sp, #20
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
 8001a9e:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for setting the inter measurement period
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	f8b3 32b4 	ldrh.w	r3, [r3, #692]	; 0x2b4
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d101      	bne.n	8001ab6 <VL53L1_set_inter_measurement_period_ms+0x20>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8001ab2:	23f1      	movs	r3, #241	; 0xf1
 8001ab4:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE) {
 8001ab6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d10c      	bne.n	8001ad8 <VL53L1_set_inter_measurement_period_ms+0x42>
		pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	683a      	ldr	r2, [r7, #0]
 8001ac2:	615a      	str	r2, [r3, #20]
		pdev->tim_cfg.system__intermeasurement_period = \
			inter_measurement_period_ms *
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	f8b3 32b4 	ldrh.w	r3, [r3, #692]	; 0x2b4
 8001aca:	461a      	mov	r2, r3
			inter_measurement_period_ms *
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	fb03 f202 	mul.w	r2, r3, r2
		pdev->tim_cfg.system__intermeasurement_period = \
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
	}

	LOG_FUNCTION_END(status);

	return status;
 8001ad8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3714      	adds	r7, #20
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <VL53L1_get_inter_measurement_period_ms>:


VL53L1_Error VL53L1_get_inter_measurement_period_ms(
	VL53L1_DEV              Dev,
	uint32_t               *pinter_measurement_period_ms)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b085      	sub	sp, #20
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for getting the inter measurement period
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8001af2:	2300      	movs	r3, #0
 8001af4:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	if (pdev->dbg_results.result__osc_calibrate_val == 0)
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	f8b3 32b4 	ldrh.w	r3, [r3, #692]	; 0x2b4
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d101      	bne.n	8001b08 <VL53L1_get_inter_measurement_period_ms+0x20>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8001b04:	23f1      	movs	r3, #241	; 0xf1
 8001b06:	73fb      	strb	r3, [r7, #15]

	if (status == VL53L1_ERROR_NONE)
 8001b08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d109      	bne.n	8001b24 <VL53L1_get_inter_measurement_period_ms+0x3c>
		*pinter_measurement_period_ms = \
			pdev->tim_cfg.system__intermeasurement_period /
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
			(uint32_t)pdev->dbg_results.result__osc_calibrate_val;
 8001b16:	68ba      	ldr	r2, [r7, #8]
 8001b18:	f8b2 22b4 	ldrh.w	r2, [r2, #692]	; 0x2b4
			pdev->tim_cfg.system__intermeasurement_period /
 8001b1c:	fbb3 f2f2 	udiv	r2, r3, r2
		*pinter_measurement_period_ms = \
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	601a      	str	r2, [r3, #0]


	LOG_FUNCTION_END(status);

	return status;
 8001b24:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3714      	adds	r7, #20
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr

08001b34 <VL53L1_set_timeouts_us>:
VL53L1_Error VL53L1_set_timeouts_us(
	VL53L1_DEV          Dev,
	uint32_t            phasecal_config_timeout_us,
	uint32_t            mm_config_timeout_us,
	uint32_t            range_config_timeout_us)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b088      	sub	sp, #32
 8001b38:	af02      	add	r7, sp, #8
 8001b3a:	60f8      	str	r0, [r7, #12]
 8001b3c:	60b9      	str	r1, [r7, #8]
 8001b3e:	607a      	str	r2, [r7, #4]
 8001b40:	603b      	str	r3, [r7, #0]
	/**
	 * Convenience function for setting the MM and range
	 * timeouts
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8001b42:	2300      	movs	r3, #0
 8001b44:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	f8b3 315e 	ldrh.w	r3, [r3, #350]	; 0x15e
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d101      	bne.n	8001b58 <VL53L1_set_timeouts_us+0x24>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8001b54:	23f1      	movs	r3, #241	; 0xf1
 8001b56:	75fb      	strb	r3, [r7, #23]

	if (status == VL53L1_ERROR_NONE) {
 8001b58:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d11b      	bne.n	8001b98 <VL53L1_set_timeouts_us+0x64>

		pdev->phasecal_config_timeout_us = phasecal_config_timeout_us;
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	68ba      	ldr	r2, [r7, #8]
 8001b64:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = mm_config_timeout_us;
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = range_config_timeout_us;
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	683a      	ldr	r2, [r7, #0]
 8001b70:	611a      	str	r2, [r3, #16]

		status =
			VL53L1_calc_timeout_register_values(
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	f8b3 115e 	ldrh.w	r1, [r3, #350]	; 0x15e
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001b7e:	693a      	ldr	r2, [r7, #16]
 8001b80:	f502 72ce 	add.w	r2, r2, #412	; 0x19c
		status =
 8001b84:	9201      	str	r2, [sp, #4]
 8001b86:	9300      	str	r3, [sp, #0]
 8001b88:	460b      	mov	r3, r1
 8001b8a:	683a      	ldr	r2, [r7, #0]
 8001b8c:	6879      	ldr	r1, [r7, #4]
 8001b8e:	68b8      	ldr	r0, [r7, #8]
 8001b90:	f002 fc79 	bl	8004486 <VL53L1_calc_timeout_register_values>
 8001b94:	4603      	mov	r3, r0
 8001b96:	75fb      	strb	r3, [r7, #23]
				&(pdev->tim_cfg));
	}

	LOG_FUNCTION_END(status);

	return status;
 8001b98:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3718      	adds	r7, #24
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <VL53L1_get_timeouts_us>:
VL53L1_Error VL53L1_get_timeouts_us(
	VL53L1_DEV           Dev,
	uint32_t            *pphasecal_config_timeout_us,
	uint32_t            *pmm_config_timeout_us,
	uint32_t			*prange_config_timeout_us)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b088      	sub	sp, #32
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	60f8      	str	r0, [r7, #12]
 8001bac:	60b9      	str	r1, [r7, #8]
 8001bae:	607a      	str	r2, [r7, #4]
 8001bb0:	603b      	str	r3, [r7, #0]
	/**
	 * Convenience function for getting the MM and range
	 * timeouts
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t *pdev =
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);

	uint32_t  macro_period_us = 0;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	617b      	str	r3, [r7, #20]
	uint16_t  timeout_encoded = 0;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (pdev->stat_nvm.osc_measured__fast_osc__frequency == 0)
 8001bc2:	69bb      	ldr	r3, [r7, #24]
 8001bc4:	f8b3 315e 	ldrh.w	r3, [r3, #350]	; 0x15e
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d101      	bne.n	8001bd0 <VL53L1_get_timeouts_us+0x2c>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 8001bcc:	23f1      	movs	r3, #241	; 0xf1
 8001bce:	77fb      	strb	r3, [r7, #31]

	if (status == VL53L1_ERROR_NONE) {
 8001bd0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d14a      	bne.n	8001c6e <VL53L1_get_timeouts_us+0xca>

		/* Update Macro Period for Range A VCSEL Period */
		macro_period_us =
			VL53L1_calc_macro_period_us(
 8001bd8:	69bb      	ldr	r3, [r7, #24]
 8001bda:	f8b3 215e 	ldrh.w	r2, [r3, #350]	; 0x15e
 8001bde:	69bb      	ldr	r3, [r7, #24]
 8001be0:	f893 31a2 	ldrb.w	r3, [r3, #418]	; 0x1a2
		macro_period_us =
 8001be4:	4619      	mov	r1, r3
 8001be6:	4610      	mov	r0, r2
 8001be8:	f002 faf8 	bl	80041dc <VL53L1_calc_macro_period_us>
 8001bec:	6178      	str	r0, [r7, #20]

		/*  Get Phase Cal Timing A timeout */

		*pphasecal_config_timeout_us =
			VL53L1_calc_timeout_us(
				(uint32_t)pdev->gen_cfg.phasecal_config__timeout_macrop,
 8001bee:	69bb      	ldr	r3, [r7, #24]
 8001bf0:	f893 318b 	ldrb.w	r3, [r3, #395]	; 0x18b
			VL53L1_calc_timeout_us(
 8001bf4:	6979      	ldr	r1, [r7, #20]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f002 fbb1 	bl	800435e <VL53L1_calc_timeout_us>
 8001bfc:	4602      	mov	r2, r0
		*pphasecal_config_timeout_us =
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	601a      	str	r2, [r3, #0]
				macro_period_us);

		/*  Get MM Timing A timeout */

		timeout_encoded =
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_hi;
 8001c02:	69bb      	ldr	r3, [r7, #24]
 8001c04:	f893 319c 	ldrb.w	r3, [r3, #412]	; 0x19c
		timeout_encoded =
 8001c08:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 8001c0a:	8a7b      	ldrh	r3, [r7, #18]
 8001c0c:	021b      	lsls	r3, r3, #8
 8001c0e:	b29a      	uxth	r2, r3
			(uint16_t)pdev->tim_cfg.mm_config__timeout_macrop_a_lo;
 8001c10:	69bb      	ldr	r3, [r7, #24]
 8001c12:	f893 319d 	ldrb.w	r3, [r3, #413]	; 0x19d
 8001c16:	b29b      	uxth	r3, r3
		timeout_encoded = (timeout_encoded << 8) +
 8001c18:	4413      	add	r3, r2
 8001c1a:	827b      	strh	r3, [r7, #18]

		*pmm_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 8001c1c:	8a7b      	ldrh	r3, [r7, #18]
 8001c1e:	6979      	ldr	r1, [r7, #20]
 8001c20:	4618      	mov	r0, r3
 8001c22:	f002 fbd5 	bl	80043d0 <VL53L1_calc_decoded_timeout_us>
 8001c26:	4602      	mov	r2, r0
		*pmm_config_timeout_us =
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	601a      	str	r2, [r3, #0]
				macro_period_us);

		/* Get Range Timing A timeout */

		timeout_encoded =
			(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_hi;
 8001c2c:	69bb      	ldr	r3, [r7, #24]
 8001c2e:	f893 31a0 	ldrb.w	r3, [r3, #416]	; 0x1a0
		timeout_encoded =
 8001c32:	827b      	strh	r3, [r7, #18]
		timeout_encoded = (timeout_encoded << 8) +
 8001c34:	8a7b      	ldrh	r3, [r7, #18]
 8001c36:	021b      	lsls	r3, r3, #8
 8001c38:	b29a      	uxth	r2, r3
			(uint16_t)pdev->tim_cfg.range_config__timeout_macrop_a_lo;
 8001c3a:	69bb      	ldr	r3, [r7, #24]
 8001c3c:	f893 31a1 	ldrb.w	r3, [r3, #417]	; 0x1a1
 8001c40:	b29b      	uxth	r3, r3
		timeout_encoded = (timeout_encoded << 8) +
 8001c42:	4413      	add	r3, r2
 8001c44:	827b      	strh	r3, [r7, #18]

		*prange_config_timeout_us =
			VL53L1_calc_decoded_timeout_us(
 8001c46:	8a7b      	ldrh	r3, [r7, #18]
 8001c48:	6979      	ldr	r1, [r7, #20]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f002 fbc0 	bl	80043d0 <VL53L1_calc_decoded_timeout_us>
 8001c50:	4602      	mov	r2, r0
		*prange_config_timeout_us =
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	601a      	str	r2, [r3, #0]
				timeout_encoded,
				macro_period_us);

		pdev->phasecal_config_timeout_us = *pphasecal_config_timeout_us;
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	69bb      	ldr	r3, [r7, #24]
 8001c5c:	609a      	str	r2, [r3, #8]
		pdev->mm_config_timeout_us       = *pmm_config_timeout_us;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	69bb      	ldr	r3, [r7, #24]
 8001c64:	60da      	str	r2, [r3, #12]
		pdev->range_config_timeout_us    = *prange_config_timeout_us;
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	69bb      	ldr	r3, [r7, #24]
 8001c6c:	611a      	str	r2, [r3, #16]

	}

	LOG_FUNCTION_END(status);

	return status;
 8001c6e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3720      	adds	r7, #32
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}

08001c7a <VL53L1_get_sequence_config_bit>:

VL53L1_Error VL53L1_get_sequence_config_bit(
	VL53L1_DEV                    Dev,
	VL53L1_DeviceSequenceConfig   bit_id,
	uint8_t                      *pvalue)
{
 8001c7a:	b480      	push	{r7}
 8001c7c:	b087      	sub	sp, #28
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	60f8      	str	r0, [r7, #12]
 8001c82:	460b      	mov	r3, r1
 8001c84:	607a      	str	r2, [r7, #4]
 8001c86:	72fb      	strb	r3, [r7, #11]
	/**
	 * Convenience function for getting sequence
	 * config enable bits
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev =
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	613b      	str	r3, [r7, #16]
		VL53L1DevStructGetLLDriverHandle(Dev);

	uint8_t  bit_mask        = 0x01;
 8001c90:	2301      	movs	r3, #1
 8001c92:	75bb      	strb	r3, [r7, #22]

	if (bit_id <= VL53L1_DEVICESEQUENCECONFIG_RANGE) {
 8001c94:	7afb      	ldrb	r3, [r7, #11]
 8001c96:	2b07      	cmp	r3, #7
 8001c98:	d81c      	bhi.n	8001cd4 <VL53L1_get_sequence_config_bit+0x5a>

		if (bit_id > 0) {
 8001c9a:	7afb      	ldrb	r3, [r7, #11]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d004      	beq.n	8001caa <VL53L1_get_sequence_config_bit+0x30>
			bit_mask  = 0x01 << bit_id;
 8001ca0:	7afb      	ldrb	r3, [r7, #11]
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca8:	75bb      	strb	r3, [r7, #22]
		}

		*pvalue =
			pdev->dyn_cfg.system__sequence_config & bit_mask;
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	f893 21c5 	ldrb.w	r2, [r3, #453]	; 0x1c5
		*pvalue =
 8001cb0:	7dbb      	ldrb	r3, [r7, #22]
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	b2da      	uxtb	r2, r3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	701a      	strb	r2, [r3, #0]

		if (bit_id > 0) {
 8001cba:	7afb      	ldrb	r3, [r7, #11]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d00b      	beq.n	8001cd8 <VL53L1_get_sequence_config_bit+0x5e>
			*pvalue  = *pvalue >> bit_id;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	7afb      	ldrb	r3, [r7, #11]
 8001cc8:	fa42 f303 	asr.w	r3, r2, r3
 8001ccc:	b2da      	uxtb	r2, r3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	701a      	strb	r2, [r3, #0]
 8001cd2:	e001      	b.n	8001cd8 <VL53L1_get_sequence_config_bit+0x5e>
		}

	} else {
		status = VL53L1_ERROR_INVALID_PARAMS;
 8001cd4:	23fc      	movs	r3, #252	; 0xfc
 8001cd6:	75fb      	strb	r3, [r7, #23]
	}

	return status;
 8001cd8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	371c      	adds	r7, #28
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <VL53L1_set_user_zone>:


VL53L1_Error VL53L1_set_user_zone(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *puser_zone)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for setting the user ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	/* convert (row,col) location into a SPAD number */
	VL53L1_encode_row_col(
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	7858      	ldrb	r0, [r3, #1]
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	7819      	ldrb	r1, [r3, #0]
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	f203 13c3 	addw	r3, r3, #451	; 0x1c3
 8001d08:	461a      	mov	r2, r3
 8001d0a:	f002 fc35 	bl	8004578 <VL53L1_encode_row_col>
		puser_zone->y_centre,
		puser_zone->x_centre,
		&(pdev->dyn_cfg.roi_config__user_roi_centre_spad));

	/* merge x and y sizes */
	VL53L1_encode_zone_size(
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	7898      	ldrb	r0, [r3, #2]
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	78d9      	ldrb	r1, [r3, #3]
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	f002 fc6a 	bl	80045f6 <VL53L1_encode_zone_size>

	/* need to add checks to ensure ROI is within array */

	LOG_FUNCTION_END(status);

	return status;
 8001d22:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3710      	adds	r7, #16
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <VL53L1_get_user_zone>:


VL53L1_Error VL53L1_get_user_zone(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *puser_zone)
{
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b084      	sub	sp, #16
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
 8001d36:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for getting the user ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	73fb      	strb	r3, [r7, #15]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	/* convert SPAD number into (row,col) location*/
	VL53L1_decode_row_col(
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	f893 01c3 	ldrb.w	r0, [r3, #451]	; 0x1c3
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	3301      	adds	r3, #1
 8001d4a:	683a      	ldr	r2, [r7, #0]
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	f002 fea3 	bl	8004a98 <VL53L1_decode_row_col>
			pdev->dyn_cfg.roi_config__user_roi_centre_spad,
			&(puser_zone->y_centre),
			&(puser_zone->x_centre));

	/* extract x and y sizes */
	VL53L1_decode_zone_size(
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	f893 01c4 	ldrb.w	r0, [r3, #452]	; 0x1c4
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	1c99      	adds	r1, r3, #2
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	3303      	adds	r3, #3
 8001d60:	461a      	mov	r2, r3
 8001d62:	f002 fc30 	bl	80045c6 <VL53L1_decode_zone_size>
		&(puser_zone->width),
		&(puser_zone->height));

	LOG_FUNCTION_END(status);

	return status;
 8001d66:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3710      	adds	r7, #16
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}

08001d72 <VL53L1_get_mode_mitigation_roi>:


VL53L1_Error VL53L1_get_mode_mitigation_roi(
	VL53L1_DEV              Dev,
	VL53L1_user_zone_t     *pmm_roi)
{
 8001d72:	b580      	push	{r7, lr}
 8001d74:	b086      	sub	sp, #24
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]
 8001d7a:	6039      	str	r1, [r7, #0]
	/**
	 * Convenience function for getting the mode mitigation ROI
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	613b      	str	r3, [r7, #16]

	uint8_t  x       = 0;
 8001d84:	2300      	movs	r3, #0
 8001d86:	73bb      	strb	r3, [r7, #14]
	uint8_t  y       = 0;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	737b      	strb	r3, [r7, #13]
	uint8_t  xy_size = 0;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* convert SPAD number into (row,col) location */
	VL53L1_decode_row_col(
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	f893 322a 	ldrb.w	r3, [r3, #554]	; 0x22a
 8001d96:	f107 020e 	add.w	r2, r7, #14
 8001d9a:	f107 010d 	add.w	r1, r7, #13
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f002 fe7a 	bl	8004a98 <VL53L1_decode_row_col>
			pdev->nvm_copy_data.roi_config__mode_roi_centre_spad,
			&y,
			&x);

	pmm_roi->x_centre = x;
 8001da4:	7bba      	ldrb	r2, [r7, #14]
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	701a      	strb	r2, [r3, #0]
	pmm_roi->y_centre = y;
 8001daa:	7b7a      	ldrb	r2, [r7, #13]
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	705a      	strb	r2, [r3, #1]
	 * versus the API sense
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */
	xy_size = pdev->nvm_copy_data.roi_config__mode_roi_xy_size;
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	f893 322b 	ldrb.w	r3, [r3, #555]	; 0x22b
 8001db6:	73fb      	strb	r3, [r7, #15]

	pmm_roi->height = xy_size >> 4;
 8001db8:	7bfb      	ldrb	r3, [r7, #15]
 8001dba:	091b      	lsrs	r3, r3, #4
 8001dbc:	b2da      	uxtb	r2, r3
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	70da      	strb	r2, [r3, #3]
	pmm_roi->width  = xy_size & 0x0F;
 8001dc2:	7bfb      	ldrb	r3, [r7, #15]
 8001dc4:	f003 030f 	and.w	r3, r3, #15
 8001dc8:	b2da      	uxtb	r2, r3
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	709a      	strb	r2, [r3, #2]

	LOG_FUNCTION_END(status);

	return status;
 8001dce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3718      	adds	r7, #24
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
	...

08001ddc <VL53L1_get_preset_mode_timing_cfg>:
	VL53L1_DevicePresetModes     device_preset_mode,
	uint16_t                    *pdss_config__target_total_rate_mcps,
	uint32_t                    *pphasecal_config_timeout_us,
	uint32_t                    *pmm_config_timeout_us,
	uint32_t                    *prange_config_timeout_us)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b087      	sub	sp, #28
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	60f8      	str	r0, [r7, #12]
 8001de4:	607a      	str	r2, [r7, #4]
 8001de6:	603b      	str	r3, [r7, #0]
 8001de8:	460b      	mov	r3, r1
 8001dea:	72fb      	strb	r3, [r7, #11]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8001dec:	2300      	movs	r3, #0
 8001dee:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");


	switch (device_preset_mode) {
 8001df4:	7afb      	ldrb	r3, [r7, #11]
 8001df6:	3b01      	subs	r3, #1
 8001df8:	2b25      	cmp	r3, #37	; 0x25
 8001dfa:	f200 808e 	bhi.w	8001f1a <VL53L1_get_preset_mode_timing_cfg+0x13e>
 8001dfe:	a201      	add	r2, pc, #4	; (adr r2, 8001e04 <VL53L1_get_preset_mode_timing_cfg+0x28>)
 8001e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e04:	08001e9d 	.word	0x08001e9d
 8001e08:	08001e9d 	.word	0x08001e9d
 8001e0c:	08001e9d 	.word	0x08001e9d
 8001e10:	08001e9d 	.word	0x08001e9d
 8001e14:	08001e9d 	.word	0x08001e9d
 8001e18:	08001ec7 	.word	0x08001ec7
 8001e1c:	08001ec7 	.word	0x08001ec7
 8001e20:	08001ec7 	.word	0x08001ec7
 8001e24:	08001f1b 	.word	0x08001f1b
 8001e28:	08001f1b 	.word	0x08001f1b
 8001e2c:	08001f1b 	.word	0x08001f1b
 8001e30:	08001f1b 	.word	0x08001f1b
 8001e34:	08001f1b 	.word	0x08001f1b
 8001e38:	08001f1b 	.word	0x08001f1b
 8001e3c:	08001f1b 	.word	0x08001f1b
 8001e40:	08001f1b 	.word	0x08001f1b
 8001e44:	08001e9d 	.word	0x08001e9d
 8001e48:	08001ec7 	.word	0x08001ec7
 8001e4c:	08001f1b 	.word	0x08001f1b
 8001e50:	08001f1b 	.word	0x08001f1b
 8001e54:	08001f1b 	.word	0x08001f1b
 8001e58:	08001f1b 	.word	0x08001f1b
 8001e5c:	08001f1b 	.word	0x08001f1b
 8001e60:	08001f1b 	.word	0x08001f1b
 8001e64:	08001f1b 	.word	0x08001f1b
 8001e68:	08001f1b 	.word	0x08001f1b
 8001e6c:	08001f1b 	.word	0x08001f1b
 8001e70:	08001f1b 	.word	0x08001f1b
 8001e74:	08001f1b 	.word	0x08001f1b
 8001e78:	08001f1b 	.word	0x08001f1b
 8001e7c:	08001f1b 	.word	0x08001f1b
 8001e80:	08001f1b 	.word	0x08001f1b
 8001e84:	08001f1b 	.word	0x08001f1b
 8001e88:	08001f1b 	.word	0x08001f1b
 8001e8c:	08001f1b 	.word	0x08001f1b
 8001e90:	08001ef1 	.word	0x08001ef1
 8001e94:	08001ef1 	.word	0x08001ef1
 8001e98:	08001ef1 	.word	0x08001ef1
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
	case VL53L1_DEVICEPRESETMODE_OLT:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_lite_mcps;
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	f8b3 20ca 	ldrh.w	r2, [r3, #202]	; 0xca
		*pdss_config__target_total_rate_mcps =
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
		*pphasecal_config_timeout_us =
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_lite_us;
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
		*pmm_config_timeout_us =
 8001eb6:	6a3b      	ldr	r3, [r7, #32]
 8001eb8:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_lite_us;
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
		*prange_config_timeout_us =
 8001ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec2:	601a      	str	r2, [r3, #0]
	break;
 8001ec4:	e02c      	b.n	8001f20 <VL53L1_get_preset_mode_timing_cfg+0x144>
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE:
	case VL53L1_DEVICEPRESETMODE_SINGLESHOT_RANGING:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_timed_mcps;
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	; 0xcc
		*pdss_config__target_total_rate_mcps =
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
		*pphasecal_config_timeout_us =
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_timed_us;
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
		*pmm_config_timeout_us =
 8001ee0:	6a3b      	ldr	r3, [r7, #32]
 8001ee2:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_timed_us;
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
		*prange_config_timeout_us =
 8001eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eec:	601a      	str	r2, [r3, #0]
	break;
 8001eee:	e017      	b.n	8001f20 <VL53L1_get_preset_mode_timing_cfg+0x144>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE:
	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE:
		*pdss_config__target_total_rate_mcps =
				pdev->tuning_parms.tp_dss_target_timed_mcps;
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	f8b3 20cc 	ldrh.w	r2, [r3, #204]	; 0xcc
		*pdss_config__target_total_rate_mcps =
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	801a      	strh	r2, [r3, #0]
		*pphasecal_config_timeout_us =
				pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
		*pphasecal_config_timeout_us =
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	601a      	str	r2, [r3, #0]
		*pmm_config_timeout_us =
				pdev->tuning_parms.tp_mm_timeout_lpa_us;
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
		*pmm_config_timeout_us =
 8001f0a:	6a3b      	ldr	r3, [r7, #32]
 8001f0c:	601a      	str	r2, [r3, #0]
		*prange_config_timeout_us =
				pdev->tuning_parms.tp_range_timeout_lpa_us;
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
		*prange_config_timeout_us =
 8001f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f16:	601a      	str	r2, [r3, #0]
	break;
 8001f18:	e002      	b.n	8001f20 <VL53L1_get_preset_mode_timing_cfg+0x144>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 8001f1a:	23fc      	movs	r3, #252	; 0xfc
 8001f1c:	75fb      	strb	r3, [r7, #23]
		break;
 8001f1e:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 8001f20:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	371c      	adds	r7, #28
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr

08001f30 <VL53L1_set_preset_mode>:
	uint16_t                     dss_config__target_total_rate_mcps,
	uint32_t                     phasecal_config_timeout_us,
	uint32_t                     mm_config_timeout_us,
	uint32_t                     range_config_timeout_us,
	uint32_t                     inter_measurement_period_ms)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b092      	sub	sp, #72	; 0x48
 8001f34:	af04      	add	r7, sp, #16
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	607b      	str	r3, [r7, #4]
 8001f3a:	460b      	mov	r3, r1
 8001f3c:	72fb      	strb	r3, [r7, #11]
 8001f3e:	4613      	mov	r3, r2
 8001f40:	813b      	strh	r3, [r7, #8]
	/**
	 * Initializes static and dynamic data structures for
	 * the provided preset mode
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8001f42:	2300      	movs	r3, #0
 8001f44:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	VL53L1_LLDriverData_t *pdev =
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	633b      	str	r3, [r7, #48]	; 0x30
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 8001f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f4e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8001f52:	62fb      	str	r3, [r7, #44]	; 0x2c
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 8001f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f56:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001f5a:	62bb      	str	r3, [r7, #40]	; 0x28
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 8001f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f5e:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 8001f62:	627b      	str	r3, [r7, #36]	; 0x24
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 8001f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f66:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 8001f6a:	623b      	str	r3, [r7, #32]
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 8001f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f6e:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8001f72:	61fb      	str	r3, [r7, #28]
	VL53L1_tuning_parm_storage_t  *ptuning_parms = &(pdev->tuning_parms);
 8001f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f76:	33a4      	adds	r3, #164	; 0xa4
 8001f78:	61bb      	str	r3, [r7, #24]
	VL53L1_low_power_auto_data_t  *plpadata      =
 8001f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f7c:	f503 7339 	add.w	r3, r3, #740	; 0x2e4
 8001f80:	617b      	str	r3, [r7, #20]
					&(pdev->low_power_auto_data);

	LOG_FUNCTION_START("");

	/* save input settings */
	pdev->preset_mode                 = device_preset_mode;
 8001f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f84:	7afa      	ldrb	r2, [r7, #11]
 8001f86:	705a      	strb	r2, [r3, #1]
	pdev->mm_config_timeout_us        = mm_config_timeout_us;
 8001f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f8a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001f8c:	60da      	str	r2, [r3, #12]
	pdev->range_config_timeout_us     = range_config_timeout_us;
 8001f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f90:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001f92:	611a      	str	r2, [r3, #16]
	pdev->inter_measurement_period_ms = inter_measurement_period_ms;
 8001f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001f98:	615a      	str	r2, [r3, #20]

	/* Reset LL Driver state variables */

	VL53L1_init_ll_driver_state(
 8001f9a:	2103      	movs	r1, #3
 8001f9c:	68f8      	ldr	r0, [r7, #12]
 8001f9e:	f001 fdf7 	bl	8003b90 <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_SW_STANDBY);

	/* apply selected preset */

	switch (device_preset_mode) {
 8001fa2:	7afb      	ldrb	r3, [r7, #11]
 8001fa4:	3b01      	subs	r3, #1
 8001fa6:	2b25      	cmp	r3, #37	; 0x25
 8001fa8:	f200 810c 	bhi.w	80021c4 <VL53L1_set_preset_mode+0x294>
 8001fac:	a201      	add	r2, pc, #4	; (adr r2, 8001fb4 <VL53L1_set_preset_mode+0x84>)
 8001fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fb2:	bf00      	nop
 8001fb4:	0800204d 	.word	0x0800204d
 8001fb8:	08002069 	.word	0x08002069
 8001fbc:	08002085 	.word	0x08002085
 8001fc0:	080020a1 	.word	0x080020a1
 8001fc4:	080020bd 	.word	0x080020bd
 8001fc8:	080020d9 	.word	0x080020d9
 8001fcc:	080020f5 	.word	0x080020f5
 8001fd0:	08002111 	.word	0x08002111
 8001fd4:	080021c5 	.word	0x080021c5
 8001fd8:	080021c5 	.word	0x080021c5
 8001fdc:	080021c5 	.word	0x080021c5
 8001fe0:	080021c5 	.word	0x080021c5
 8001fe4:	080021c5 	.word	0x080021c5
 8001fe8:	080021c5 	.word	0x080021c5
 8001fec:	080021c5 	.word	0x080021c5
 8001ff0:	080021c5 	.word	0x080021c5
 8001ff4:	0800212d 	.word	0x0800212d
 8001ff8:	08002149 	.word	0x08002149
 8001ffc:	080021c5 	.word	0x080021c5
 8002000:	080021c5 	.word	0x080021c5
 8002004:	080021c5 	.word	0x080021c5
 8002008:	080021c5 	.word	0x080021c5
 800200c:	080021c5 	.word	0x080021c5
 8002010:	080021c5 	.word	0x080021c5
 8002014:	080021c5 	.word	0x080021c5
 8002018:	080021c5 	.word	0x080021c5
 800201c:	080021c5 	.word	0x080021c5
 8002020:	080021c5 	.word	0x080021c5
 8002024:	080021c5 	.word	0x080021c5
 8002028:	080021c5 	.word	0x080021c5
 800202c:	080021c5 	.word	0x080021c5
 8002030:	080021c5 	.word	0x080021c5
 8002034:	080021c5 	.word	0x080021c5
 8002038:	080021c5 	.word	0x080021c5
 800203c:	080021c5 	.word	0x080021c5
 8002040:	08002165 	.word	0x08002165
 8002044:	08002185 	.word	0x08002185
 8002048:	080021a5 	.word	0x080021a5

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING:
		status = VL53L1_preset_mode_standard_ranging(
 800204c:	69bb      	ldr	r3, [r7, #24]
 800204e:	9301      	str	r3, [sp, #4]
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	9300      	str	r3, [sp, #0]
 8002054:	6a3b      	ldr	r3, [r7, #32]
 8002056:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002058:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800205a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800205c:	f001 fa1a 	bl	8003494 <VL53L1_preset_mode_standard_ranging>
 8002060:	4603      	mov	r3, r0
 8002062:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8002066:	e0b1      	b.n	80021cc <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_SHORT_RANGE:
		status = VL53L1_preset_mode_standard_ranging_short_range(
 8002068:	69bb      	ldr	r3, [r7, #24]
 800206a:	9301      	str	r3, [sp, #4]
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	9300      	str	r3, [sp, #0]
 8002070:	6a3b      	ldr	r3, [r7, #32]
 8002072:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002074:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002076:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002078:	f001 fb2a 	bl	80036d0 <VL53L1_preset_mode_standard_ranging_short_range>
 800207c:	4603      	mov	r3, r0
 800207e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8002082:	e0a3      	b.n	80021cc <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_LONG_RANGE:
		status = VL53L1_preset_mode_standard_ranging_long_range(
 8002084:	69bb      	ldr	r3, [r7, #24]
 8002086:	9301      	str	r3, [sp, #4]
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	9300      	str	r3, [sp, #0]
 800208c:	6a3b      	ldr	r3, [r7, #32]
 800208e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002090:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002092:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002094:	f001 fb5d 	bl	8003752 <VL53L1_preset_mode_standard_ranging_long_range>
 8002098:	4603      	mov	r3, r0
 800209a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800209e:	e095      	b.n	80021cc <VL53L1_set_preset_mode+0x29c>

#ifndef VL53L1_NOCALIB
	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL:
		status = VL53L1_preset_mode_standard_ranging_mm1_cal(
 80020a0:	69bb      	ldr	r3, [r7, #24]
 80020a2:	9301      	str	r3, [sp, #4]
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	9300      	str	r3, [sp, #0]
 80020a8:	6a3b      	ldr	r3, [r7, #32]
 80020aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80020ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80020b0:	f001 fb90 	bl	80037d4 <VL53L1_preset_mode_standard_ranging_mm1_cal>
 80020b4:	4603      	mov	r3, r0
 80020b6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 80020ba:	e087      	b.n	80021cc <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL:
		status = VL53L1_preset_mode_standard_ranging_mm2_cal(
 80020bc:	69bb      	ldr	r3, [r7, #24]
 80020be:	9301      	str	r3, [sp, #4]
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	9300      	str	r3, [sp, #0]
 80020c4:	6a3b      	ldr	r3, [r7, #32]
 80020c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80020ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80020cc:	f001 fba7 	bl	800381e <VL53L1_preset_mode_standard_ranging_mm2_cal>
 80020d0:	4603      	mov	r3, r0
 80020d2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 80020d6:	e079      	b.n	80021cc <VL53L1_set_preset_mode+0x29c>
#endif

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING:
		status = VL53L1_preset_mode_timed_ranging(
 80020d8:	69bb      	ldr	r3, [r7, #24]
 80020da:	9301      	str	r3, [sp, #4]
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	9300      	str	r3, [sp, #0]
 80020e0:	6a3b      	ldr	r3, [r7, #32]
 80020e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80020e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80020e8:	f001 fbbe 	bl	8003868 <VL53L1_preset_mode_timed_ranging>
 80020ec:	4603      	mov	r3, r0
 80020ee:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 80020f2:	e06b      	b.n	80021cc <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_SHORT_RANGE:
		status = VL53L1_preset_mode_timed_ranging_short_range(
 80020f4:	69bb      	ldr	r3, [r7, #24]
 80020f6:	9301      	str	r3, [sp, #4]
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	9300      	str	r3, [sp, #0]
 80020fc:	6a3b      	ldr	r3, [r7, #32]
 80020fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002100:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002102:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002104:	f001 fbea 	bl	80038dc <VL53L1_preset_mode_timed_ranging_short_range>
 8002108:	4603      	mov	r3, r0
 800210a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800210e:	e05d      	b.n	80021cc <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_TIMED_RANGING_LONG_RANGE:
		status = VL53L1_preset_mode_timed_ranging_long_range(
 8002110:	69bb      	ldr	r3, [r7, #24]
 8002112:	9301      	str	r3, [sp, #4]
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	9300      	str	r3, [sp, #0]
 8002118:	6a3b      	ldr	r3, [r7, #32]
 800211a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800211c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800211e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002120:	f001 fc16 	bl	8003950 <VL53L1_preset_mode_timed_ranging_long_range>
 8002124:	4603      	mov	r3, r0
 8002126:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 800212a:	e04f      	b.n	80021cc <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_OLT:
		status = VL53L1_preset_mode_olt(
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	9301      	str	r3, [sp, #4]
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	9300      	str	r3, [sp, #0]
 8002134:	6a3b      	ldr	r3, [r7, #32]
 8002136:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002138:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800213a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800213c:	f001 fcea 	bl	8003b14 <VL53L1_preset_mode_olt>
 8002140:	4603      	mov	r3, r0
 8002142:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8002146:	e041      	b.n	80021cc <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_SINGLESHOT_RANGING:
		status = VL53L1_preset_mode_singleshot_ranging(
 8002148:	69bb      	ldr	r3, [r7, #24]
 800214a:	9301      	str	r3, [sp, #4]
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	9300      	str	r3, [sp, #0]
 8002150:	6a3b      	ldr	r3, [r7, #32]
 8002152:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002154:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002156:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002158:	f001 fca6 	bl	8003aa8 <VL53L1_preset_mode_singleshot_ranging>
 800215c:	4603      	mov	r3, r0
 800215e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					pgeneral,
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms);
		break;
 8002162:	e033      	b.n	80021cc <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_SHORT_RANGE:
		status = VL53L1_preset_mode_low_power_auto_short_ranging(
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	9302      	str	r3, [sp, #8]
 8002168:	69bb      	ldr	r3, [r7, #24]
 800216a:	9301      	str	r3, [sp, #4]
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	9300      	str	r3, [sp, #0]
 8002170:	6a3b      	ldr	r3, [r7, #32]
 8002172:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002174:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002176:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002178:	f001 fc4a 	bl	8003a10 <VL53L1_preset_mode_low_power_auto_short_ranging>
 800217c:	4603      	mov	r3, r0
 800217e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 8002182:	e023      	b.n	80021cc <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_MEDIUM_RANGE:
		status = VL53L1_preset_mode_low_power_auto_ranging(
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	9302      	str	r3, [sp, #8]
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	9301      	str	r3, [sp, #4]
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	9300      	str	r3, [sp, #0]
 8002190:	6a3b      	ldr	r3, [r7, #32]
 8002192:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002194:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002196:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002198:	f001 fc14 	bl	80039c4 <VL53L1_preset_mode_low_power_auto_ranging>
 800219c:	4603      	mov	r3, r0
 800219e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 80021a2:	e013      	b.n	80021cc <VL53L1_set_preset_mode+0x29c>

	case VL53L1_DEVICEPRESETMODE_LOWPOWERAUTO_LONG_RANGE:
		status = VL53L1_preset_mode_low_power_auto_long_ranging(
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	9302      	str	r3, [sp, #8]
 80021a8:	69bb      	ldr	r3, [r7, #24]
 80021aa:	9301      	str	r3, [sp, #4]
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	9300      	str	r3, [sp, #0]
 80021b0:	6a3b      	ldr	r3, [r7, #32]
 80021b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80021b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80021b8:	f001 fc50 	bl	8003a5c <VL53L1_preset_mode_low_power_auto_long_ranging>
 80021bc:	4603      	mov	r3, r0
 80021be:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					ptiming,
					pdynamic,
					psystem,
					ptuning_parms,
					plpadata);
		break;
 80021c2:	e003      	b.n	80021cc <VL53L1_set_preset_mode+0x29c>

	default:
		status = VL53L1_ERROR_INVALID_PARAMS;
 80021c4:	23fc      	movs	r3, #252	; 0xfc
 80021c6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		break;
 80021ca:	bf00      	nop

	}

	/* update DSS target */

	if (status == VL53L1_ERROR_NONE) {
 80021cc:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d105      	bne.n	80021e0 <VL53L1_set_preset_mode+0x2b0>

		pstatic->dss_config__target_total_rate_mcps =
 80021d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021d6:	893a      	ldrh	r2, [r7, #8]
 80021d8:	801a      	strh	r2, [r3, #0]
				dss_config__target_total_rate_mcps;
		pdev->dss_config__target_total_rate_mcps    =
 80021da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021dc:	893a      	ldrh	r2, [r7, #8]
 80021de:	831a      	strh	r2, [r3, #24]
	/*
	 * Update the register timeout values based on input
	 * real time values and preset mode VCSEL periods
	 */

	if (status == VL53L1_ERROR_NONE)
 80021e0:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d108      	bne.n	80021fa <VL53L1_set_preset_mode+0x2ca>
		status =
 80021e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80021ec:	6879      	ldr	r1, [r7, #4]
 80021ee:	68f8      	ldr	r0, [r7, #12]
 80021f0:	f7ff fca0 	bl	8001b34 <VL53L1_set_timeouts_us>
 80021f4:	4603      	mov	r3, r0
 80021f6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				Dev,
				phasecal_config_timeout_us,
				mm_config_timeout_us,
				range_config_timeout_us);

	if (status == VL53L1_ERROR_NONE)
 80021fa:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d106      	bne.n	8002210 <VL53L1_set_preset_mode+0x2e0>
		status =
 8002202:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002204:	68f8      	ldr	r0, [r7, #12]
 8002206:	f7ff fc46 	bl	8001a96 <VL53L1_set_inter_measurement_period_ms>
 800220a:	4603      	mov	r3, r0
 800220c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				Dev,
				inter_measurement_period_ms);

	LOG_FUNCTION_END(status);

	return status;
 8002210:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8002214:	4618      	mov	r0, r3
 8002216:	3738      	adds	r7, #56	; 0x38
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}

0800221c <VL53L1_get_lite_sigma_threshold>:
}

VL53L1_Error VL53L1_get_lite_sigma_threshold(
	VL53L1_DEV                          Dev,
	uint16_t                           *plite_sigma)
{
 800221c:	b480      	push	{r7}
 800221e:	b085      	sub	sp, #20
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	6039      	str	r1, [r7, #0]
	 * Gets the Sigma Threshold value for Lite Mode
	 *
	 * (fixed point 14.2)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8002226:	2300      	movs	r3, #0
 8002228:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	*plite_sigma =
			pdev->tim_cfg.range_config__sigma_thresh;
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	f8b3 21a6 	ldrh.w	r2, [r3, #422]	; 0x1a6
	*plite_sigma =
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 8002238:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 800223c:	4618      	mov	r0, r3
 800223e:	3714      	adds	r7, #20
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <VL53L1_set_lite_sigma_threshold>:

VL53L1_Error VL53L1_set_lite_sigma_threshold(
	VL53L1_DEV                          Dev,
	uint16_t                           lite_sigma)
{
 8002248:	b480      	push	{r7}
 800224a:	b085      	sub	sp, #20
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	460b      	mov	r3, r1
 8002252:	807b      	strh	r3, [r7, #2]
	 * Sets the Sigma threshold value for Lite mode
	 *
	 * (fixed point 14.2)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8002254:	2300      	movs	r3, #0
 8002256:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__sigma_thresh = lite_sigma;
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	887a      	ldrh	r2, [r7, #2]
 8002260:	f8a3 21a6 	strh.w	r2, [r3, #422]	; 0x1a6

	LOG_FUNCTION_END(status);

	return status;
 8002264:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8002268:	4618      	mov	r0, r3
 800226a:	3714      	adds	r7, #20
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr

08002274 <VL53L1_get_lite_min_count_rate>:

VL53L1_Error VL53L1_get_lite_min_count_rate(
	VL53L1_DEV                          Dev,
	uint16_t                           *plite_mincountrate)
{
 8002274:	b480      	push	{r7}
 8002276:	b085      	sub	sp, #20
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	6039      	str	r1, [r7, #0]
	 * Gets the Min Count Rate value for Lite Mode
	 *
	 * (fixed point 9.7 Mcps)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800227e:	2300      	movs	r3, #0
 8002280:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	*plite_mincountrate =
			pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps;
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	f8b3 21a8 	ldrh.w	r2, [r3, #424]	; 0x1a8
	*plite_mincountrate =
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	801a      	strh	r2, [r3, #0]

	LOG_FUNCTION_END(status);

	return status;
 8002290:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8002294:	4618      	mov	r0, r3
 8002296:	3714      	adds	r7, #20
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <VL53L1_set_lite_min_count_rate>:

VL53L1_Error VL53L1_set_lite_min_count_rate(
	VL53L1_DEV                          Dev,
	uint16_t                            lite_mincountrate)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b085      	sub	sp, #20
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	460b      	mov	r3, r1
 80022aa:	807b      	strh	r3, [r7, #2]
	 * Sets the Min COunt Rate value for Lite mode
	 *
	 * (fixed point 19.7Mcps)
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80022ac:	2300      	movs	r3, #0
 80022ae:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->tim_cfg.range_config__min_count_rate_rtn_limit_mcps =
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	887a      	ldrh	r2, [r7, #2]
 80022b8:	f8a3 21a8 	strh.w	r2, [r3, #424]	; 0x1a8
		lite_mincountrate;

	LOG_FUNCTION_END(status);

	return status;
 80022bc:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3714      	adds	r7, #20
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <VL53L1_set_vhv_loopbound>:


VL53L1_Error VL53L1_set_vhv_loopbound(
	VL53L1_DEV                   Dev,
	uint8_t                      vhv_loopbound)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b085      	sub	sp, #20
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	460b      	mov	r3, r1
 80022d6:	70fb      	strb	r3, [r7, #3]
	 * - ensure that any change here is followed by a
	 * init_and_start_range with full i2c packet
	 * configuration.
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80022d8:	2300      	movs	r3, #0
 80022da:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
			(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 80022e6:	f003 0303 	and.w	r3, r3, #3
 80022ea:	b2da      	uxtb	r2, r3
			(vhv_loopbound * 4);
 80022ec:	78fb      	ldrb	r3, [r7, #3]
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	b2db      	uxtb	r3, r3
			(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 80022f2:	4413      	add	r3, r2
 80022f4:	b2da      	uxtb	r2, r3
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160

	LOG_FUNCTION_END(status);

	return status;
 80022fc:	f997 300f 	ldrsb.w	r3, [r7, #15]

}
 8002300:	4618      	mov	r0, r3
 8002302:	3714      	adds	r7, #20
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr

0800230c <VL53L1_init_and_start_range>:

VL53L1_Error VL53L1_init_and_start_range(
	VL53L1_DEV                     Dev,
	uint8_t                        measurement_mode,
	VL53L1_DeviceConfigLevel       device_config_level)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b0d0      	sub	sp, #320	; 0x140
 8002310:	af00      	add	r7, sp, #0
 8002312:	1d3b      	adds	r3, r7, #4
 8002314:	6018      	str	r0, [r3, #0]
 8002316:	4608      	mov	r0, r1
 8002318:	4611      	mov	r1, r2
 800231a:	1cfb      	adds	r3, r7, #3
 800231c:	4602      	mov	r2, r0
 800231e:	701a      	strb	r2, [r3, #0]
 8002320:	1cbb      	adds	r3, r7, #2
 8002322:	460a      	mov	r2, r1
 8002324:	701a      	strb	r2, [r3, #0]
	 * system_control is always sent as the last byte of this
	 * register group (mode_start) either triggers the range
	 * or enables the next range
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8002326:	2300      	movs	r3, #0
 8002328:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800232c:	1d3b      	adds	r3, r7, #4
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130

	uint8_t buffer[VL53L1_MAX_I2C_XFER_SIZE];

	VL53L1_static_nvm_managed_t   *pstatic_nvm   = &(pdev->stat_nvm);
 8002334:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002338:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800233c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	VL53L1_customer_nvm_managed_t *pcustomer_nvm = &(pdev->customer);
 8002340:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002344:	3342      	adds	r3, #66	; 0x42
 8002346:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	VL53L1_static_config_t        *pstatic       = &(pdev->stat_cfg);
 800234a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800234e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8002352:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	VL53L1_general_config_t       *pgeneral      = &(pdev->gen_cfg);
 8002356:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800235a:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800235e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	VL53L1_timing_config_t        *ptiming       = &(pdev->tim_cfg);
 8002362:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002366:	f503 73ce 	add.w	r3, r3, #412	; 0x19c
 800236a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	VL53L1_dynamic_config_t       *pdynamic      = &(pdev->dyn_cfg);
 800236e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002372:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 8002376:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	VL53L1_system_control_t       *psystem       = &(pdev->sys_ctrl);
 800237a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800237e:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8002382:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

	VL53L1_ll_driver_state_t  *pstate   = &(pdev->ll_state);
 8002386:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800238a:	332c      	adds	r3, #44	; 0x2c
 800238c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

	uint8_t  *pbuffer                   = &buffer[0];
 8002390:	f107 030c 	add.w	r3, r7, #12
 8002394:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	uint16_t i                          = 0;
 8002398:	2300      	movs	r3, #0
 800239a:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
	uint16_t i2c_index                  = 0;
 800239e:	2300      	movs	r3, #0
 80023a0:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
	uint16_t i2c_buffer_offset_bytes    = 0;
 80023a4:	2300      	movs	r3, #0
 80023a6:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
	uint16_t i2c_buffer_size_bytes      = 0;
 80023aa:	2300      	movs	r3, #0
 80023ac:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c

	LOG_FUNCTION_START("");

	/* save measurement mode */
	pdev->measurement_mode = measurement_mode;
 80023b0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80023b4:	1cfa      	adds	r2, r7, #3
 80023b6:	7812      	ldrb	r2, [r2, #0]
 80023b8:	709a      	strb	r2, [r3, #2]

	/* Merge measurement mode with mode_start */

	psystem->system__mode_start =
		(psystem->system__mode_start &
 80023ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80023be:	791b      	ldrb	r3, [r3, #4]
 80023c0:	b25b      	sxtb	r3, r3
 80023c2:	f003 030f 	and.w	r3, r3, #15
 80023c6:	b25a      	sxtb	r2, r3
		VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 80023c8:	1cfb      	adds	r3, r7, #3
 80023ca:	f993 3000 	ldrsb.w	r3, [r3]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	b25b      	sxtb	r3, r3
 80023d2:	b2da      	uxtb	r2, r3
	psystem->system__mode_start =
 80023d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80023d8:	711a      	strb	r2, [r3, #4]
		measurement_mode;

	/* copy in rit from xtalk config */

	pdev->stat_cfg.algo__range_ignore_threshold_mcps =
		pdev->xtalk_cfg.crosstalk_range_ignore_threshold_rate_mcps;
 80023da:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80023de:	f8b3 2142 	ldrh.w	r2, [r3, #322]	; 0x142
	pdev->stat_cfg.algo__range_ignore_threshold_mcps =
 80023e2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80023e6:	f8a3 217c 	strh.w	r2, [r3, #380]	; 0x17c
	/* Start Patch_LowPowerAutoMode */

	/* doing this ensures stop_range followed by a get_device_results does
	 * not mess up the counters */

	if (pdev->low_power_auto_data.low_power_auto_range_count == 0xFF) {
 80023ea:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80023ee:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
 80023f2:	2bff      	cmp	r3, #255	; 0xff
 80023f4:	d104      	bne.n	8002400 <VL53L1_init_and_start_range+0xf4>
		pdev->low_power_auto_data.low_power_auto_range_count = 0x0;
 80023f6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80023fa:	2200      	movs	r2, #0
 80023fc:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
	}

	/* For Presence. Override threshold config */
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8002400:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002404:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 8002408:	2b01      	cmp	r3, #1
 800240a:	d133      	bne.n	8002474 <VL53L1_init_and_start_range+0x168>
		(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 800240c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002410:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8002414:	2b00      	cmp	r3, #0
 8002416:	d12d      	bne.n	8002474 <VL53L1_init_and_start_range+0x168>
		/* save interrupt config */
		pdev->low_power_auto_data.saved_interrupt_config =
			pdev->gen_cfg.system__interrupt_config_gpio;
 8002418:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800241c:	f893 2186 	ldrb.w	r2, [r3, #390]	; 0x186
		pdev->low_power_auto_data.saved_interrupt_config =
 8002420:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002424:	f883 22e7 	strb.w	r2, [r3, #743]	; 0x2e7
		/* set intr_new_measure_ready */
		pdev->gen_cfg.system__interrupt_config_gpio = 1 << 5;
 8002428:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800242c:	2220      	movs	r2, #32
 800242e:	f883 2186 	strb.w	r2, [r3, #390]	; 0x186
		/* check MM1/MM2 disabled? */
		if ((pdev->dyn_cfg.system__sequence_config & (
 8002432:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002436:	f893 31c5 	ldrb.w	r3, [r3, #453]	; 0x1c5
 800243a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800243e:	2b00      	cmp	r3, #0
 8002440:	d10c      	bne.n	800245c <VL53L1_init_and_start_range+0x150>
			VL53L1_SEQUENCE_MM1_EN | VL53L1_SEQUENCE_MM2_EN)) ==
				0x0) {
			pdev->customer.algo__part_to_part_range_offset_mm =
				pdev->customer.mm_config__outer_offset_mm * 4;
 8002442:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002446:	f9b3 3058 	ldrsh.w	r3, [r3, #88]	; 0x58
 800244a:	b29b      	uxth	r3, r3
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	b29b      	uxth	r3, r3
 8002450:	b21a      	sxth	r2, r3
			pdev->customer.algo__part_to_part_range_offset_mm =
 8002452:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002456:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 800245a:	e004      	b.n	8002466 <VL53L1_init_and_start_range+0x15a>
		} else {
			pdev->customer.algo__part_to_part_range_offset_mm = 0x0;
 800245c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002460:	2200      	movs	r2, #0
 8002462:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
		}

		/* make sure config gets written out */
		if (device_config_level <
 8002466:	1cbb      	adds	r3, r7, #2
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	2b04      	cmp	r3, #4
 800246c:	d802      	bhi.n	8002474 <VL53L1_init_and_start_range+0x168>
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS) {
			device_config_level =
 800246e:	1cbb      	adds	r3, r7, #2
 8002470:	2205      	movs	r2, #5
 8002472:	701a      	strb	r2, [r3, #0]
				VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS;
		}
	}

	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8002474:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002478:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 800247c:	2b01      	cmp	r3, #1
 800247e:	d110      	bne.n	80024a2 <VL53L1_init_and_start_range+0x196>
		(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 8002480:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002484:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
	if ((pdev->low_power_auto_data.is_low_power_auto_mode == 1) &&
 8002488:	2b01      	cmp	r3, #1
 800248a:	d10a      	bne.n	80024a2 <VL53L1_init_and_start_range+0x196>
		/* restore interrupt config */
		pdev->gen_cfg.system__interrupt_config_gpio =
			pdev->low_power_auto_data.saved_interrupt_config;
 800248c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002490:	f893 22e7 	ldrb.w	r2, [r3, #743]	; 0x2e7
		pdev->gen_cfg.system__interrupt_config_gpio =
 8002494:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002498:	f883 2186 	strb.w	r2, [r3, #390]	; 0x186

		/* make sure config gets written out including VHV config */
		device_config_level = VL53L1_DEVICECONFIGLEVEL_FULL;
 800249c:	1cbb      	adds	r3, r7, #2
 800249e:	2206      	movs	r2, #6
 80024a0:	701a      	strb	r2, [r3, #0]

	/*
	 * Determine Initial I2C index
	 */

	switch (device_config_level) {
 80024a2:	1cbb      	adds	r3, r7, #2
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	3b01      	subs	r3, #1
 80024a8:	2b05      	cmp	r3, #5
 80024aa:	d827      	bhi.n	80024fc <VL53L1_init_and_start_range+0x1f0>
 80024ac:	a201      	add	r2, pc, #4	; (adr r2, 80024b4 <VL53L1_init_and_start_range+0x1a8>)
 80024ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024b2:	bf00      	nop
 80024b4:	080024f5 	.word	0x080024f5
 80024b8:	080024ed 	.word	0x080024ed
 80024bc:	080024e5 	.word	0x080024e5
 80024c0:	080024dd 	.word	0x080024dd
 80024c4:	080024d5 	.word	0x080024d5
 80024c8:	080024cd 	.word	0x080024cd
	case VL53L1_DEVICECONFIGLEVEL_FULL:
		i2c_index = VL53L1_STATIC_NVM_MANAGED_I2C_INDEX;
 80024cc:	2301      	movs	r3, #1
 80024ce:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 80024d2:	e017      	b.n	8002504 <VL53L1_init_and_start_range+0x1f8>
	case VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS:
		i2c_index = VL53L1_CUSTOMER_NVM_MANAGED_I2C_INDEX;
 80024d4:	230d      	movs	r3, #13
 80024d6:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 80024da:	e013      	b.n	8002504 <VL53L1_init_and_start_range+0x1f8>
	case VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS:
		i2c_index = VL53L1_STATIC_CONFIG_I2C_INDEX;
 80024dc:	2324      	movs	r3, #36	; 0x24
 80024de:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 80024e2:	e00f      	b.n	8002504 <VL53L1_init_and_start_range+0x1f8>
	case VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS:
		i2c_index = VL53L1_GENERAL_CONFIG_I2C_INDEX;
 80024e4:	2344      	movs	r3, #68	; 0x44
 80024e6:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 80024ea:	e00b      	b.n	8002504 <VL53L1_init_and_start_range+0x1f8>
	case VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS:
		i2c_index = VL53L1_TIMING_CONFIG_I2C_INDEX;
 80024ec:	235a      	movs	r3, #90	; 0x5a
 80024ee:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 80024f2:	e007      	b.n	8002504 <VL53L1_init_and_start_range+0x1f8>
	case VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS:
		i2c_index = VL53L1_DYNAMIC_CONFIG_I2C_INDEX;
 80024f4:	2371      	movs	r3, #113	; 0x71
 80024f6:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 80024fa:	e003      	b.n	8002504 <VL53L1_init_and_start_range+0x1f8>
	default:
		i2c_index = VL53L1_SYSTEM_CONTROL_I2C_INDEX;
 80024fc:	2383      	movs	r3, #131	; 0x83
 80024fe:	f8a7 3134 	strh.w	r3, [r7, #308]	; 0x134
		break;
 8002502:	bf00      	nop
	}

	/* I2C Buffer size */

	i2c_buffer_size_bytes = \
 8002504:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 8002508:	f1c3 0388 	rsb	r3, r3, #136	; 0x88
 800250c:	f8a7 310c 	strh.w	r3, [r7, #268]	; 0x10c
			 VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES) -
			 i2c_index;

	/* Initialize buffer */

	pbuffer = &buffer[0];
 8002510:	f107 030c 	add.w	r3, r7, #12
 8002514:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	for (i = 0 ; i < i2c_buffer_size_bytes ; i++) {
 8002518:	2300      	movs	r3, #0
 800251a:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
 800251e:	e00b      	b.n	8002538 <VL53L1_init_and_start_range+0x22c>
		*pbuffer++ = 0;
 8002520:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002524:	1c5a      	adds	r2, r3, #1
 8002526:	f8c7 2138 	str.w	r2, [r7, #312]	; 0x138
 800252a:	2200      	movs	r2, #0
 800252c:	701a      	strb	r2, [r3, #0]
	for (i = 0 ; i < i2c_buffer_size_bytes ; i++) {
 800252e:	f8b7 3136 	ldrh.w	r3, [r7, #310]	; 0x136
 8002532:	3301      	adds	r3, #1
 8002534:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
 8002538:	f8b7 2136 	ldrh.w	r2, [r7, #310]	; 0x136
 800253c:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
 8002540:	429a      	cmp	r2, r3
 8002542:	d3ed      	bcc.n	8002520 <VL53L1_init_and_start_range+0x214>
	}

	/* Build I2C buffer */

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_FULL &&
 8002544:	1cbb      	adds	r3, r7, #2
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	2b05      	cmp	r3, #5
 800254a:	d917      	bls.n	800257c <VL53L1_init_and_start_range+0x270>
 800254c:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 8002550:	2b00      	cmp	r3, #0
 8002552:	d113      	bne.n	800257c <VL53L1_init_and_start_range+0x270>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 8002554:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 8002558:	f1c3 0301 	rsb	r3, r3, #1
 800255c:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_static_nvm_managed(
				pstatic_nvm,
				VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8002560:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_static_nvm_managed(
 8002564:	f107 020c 	add.w	r2, r7, #12
 8002568:	4413      	add	r3, r2
		status =
 800256a:	461a      	mov	r2, r3
 800256c:	210b      	movs	r1, #11
 800256e:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 8002572:	f002 fac0 	bl	8004af6 <VL53L1_i2c_encode_static_nvm_managed>
 8002576:	4603      	mov	r3, r0
 8002578:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_CUSTOMER_ONWARDS &&
 800257c:	1cbb      	adds	r3, r7, #2
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	2b04      	cmp	r3, #4
 8002582:	d917      	bls.n	80025b4 <VL53L1_init_and_start_range+0x2a8>
 8002584:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 8002588:	2b00      	cmp	r3, #0
 800258a:	d113      	bne.n	80025b4 <VL53L1_init_and_start_range+0x2a8>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 800258c:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 8002590:	f1c3 030d 	rsb	r3, r3, #13
 8002594:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_customer_nvm_managed(
				pcustomer_nvm,
				VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8002598:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_customer_nvm_managed(
 800259c:	f107 020c 	add.w	r2, r7, #12
 80025a0:	4413      	add	r3, r2
		status =
 80025a2:	461a      	mov	r2, r3
 80025a4:	2117      	movs	r1, #23
 80025a6:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 80025aa:	f002 fb80 	bl	8004cae <VL53L1_i2c_encode_customer_nvm_managed>
 80025ae:	4603      	mov	r3, r0
 80025b0:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_STATIC_ONWARDS &&
 80025b4:	1cbb      	adds	r3, r7, #2
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	2b03      	cmp	r3, #3
 80025ba:	d917      	bls.n	80025ec <VL53L1_init_and_start_range+0x2e0>
 80025bc:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d113      	bne.n	80025ec <VL53L1_init_and_start_range+0x2e0>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 80025c4:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 80025c8:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
 80025cc:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_static_config(
				pstatic,
				VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 80025d0:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_static_config(
 80025d4:	f107 020c 	add.w	r2, r7, #12
 80025d8:	4413      	add	r3, r2
		status =
 80025da:	461a      	mov	r2, r3
 80025dc:	2120      	movs	r1, #32
 80025de:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 80025e2:	f002 fca2 	bl	8004f2a <VL53L1_i2c_encode_static_config>
 80025e6:	4603      	mov	r3, r0
 80025e8:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS &&
 80025ec:	1cbb      	adds	r3, r7, #2
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d917      	bls.n	8002624 <VL53L1_init_and_start_range+0x318>
 80025f4:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d113      	bne.n	8002624 <VL53L1_init_and_start_range+0x318>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 80025fc:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 8002600:	f1c3 0344 	rsb	r3, r3, #68	; 0x44
 8002604:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_general_config(
				pgeneral,
				VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8002608:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_general_config(
 800260c:	f107 020c 	add.w	r2, r7, #12
 8002610:	4413      	add	r3, r2
		status =
 8002612:	461a      	mov	r2, r3
 8002614:	2116      	movs	r1, #22
 8002616:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 800261a:	f002 fd69 	bl	80050f0 <VL53L1_i2c_encode_general_config>
 800261e:	4603      	mov	r3, r0
 8002620:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_TIMING_ONWARDS &&
 8002624:	1cbb      	adds	r3, r7, #2
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	2b01      	cmp	r3, #1
 800262a:	d917      	bls.n	800265c <VL53L1_init_and_start_range+0x350>
 800262c:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 8002630:	2b00      	cmp	r3, #0
 8002632:	d113      	bne.n	800265c <VL53L1_init_and_start_range+0x350>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 8002634:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 8002638:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 800263c:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_timing_config(
				ptiming,
				VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 8002640:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_timing_config(
 8002644:	f107 020c 	add.w	r2, r7, #12
 8002648:	4413      	add	r3, r2
		status =
 800264a:	461a      	mov	r2, r3
 800264c:	2117      	movs	r1, #23
 800264e:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8002652:	f002 fdd1 	bl	80051f8 <VL53L1_i2c_encode_timing_config>
 8002656:	4603      	mov	r3, r0
 8002658:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (device_config_level >= VL53L1_DEVICECONFIGLEVEL_DYNAMIC_ONWARDS &&
 800265c:	1cbb      	adds	r3, r7, #2
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d036      	beq.n	80026d2 <VL53L1_init_and_start_range+0x3c6>
 8002664:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 8002668:	2b00      	cmp	r3, #0
 800266a:	d132      	bne.n	80026d2 <VL53L1_init_and_start_range+0x3c6>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes = \
 800266c:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 8002670:	f1c3 0371 	rsb	r3, r3, #113	; 0x71
 8002674:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
			VL53L1_DYNAMIC_CONFIG_I2C_INDEX - i2c_index;

		/* If in back to back mode, use GPH ID from cfg_state */
		if ((psystem->system__mode_start &
 8002678:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800267c:	791b      	ldrb	r3, [r3, #4]
 800267e:	f003 0320 	and.w	r3, r3, #32
 8002682:	2b00      	cmp	r3, #0
 8002684:	d017      	beq.n	80026b6 <VL53L1_init_and_start_range+0x3aa>
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) ==
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK) {
			pdynamic->system__grouped_parameter_hold_0 = pstate->cfg_gph_id | 0x01;
 8002686:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800268a:	789b      	ldrb	r3, [r3, #2]
 800268c:	f043 0301 	orr.w	r3, r3, #1
 8002690:	b2da      	uxtb	r2, r3
 8002692:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002696:	701a      	strb	r2, [r3, #0]
			pdynamic->system__grouped_parameter_hold_1 = pstate->cfg_gph_id | 0x01;
 8002698:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800269c:	789b      	ldrb	r3, [r3, #2]
 800269e:	f043 0301 	orr.w	r3, r3, #1
 80026a2:	b2da      	uxtb	r2, r3
 80026a4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80026a8:	731a      	strb	r2, [r3, #12]
			pdynamic->system__grouped_parameter_hold   = pstate->cfg_gph_id;
 80026aa:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80026ae:	789a      	ldrb	r2, [r3, #2]
 80026b0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80026b4:	749a      	strb	r2, [r3, #18]
		}
		status =
			VL53L1_i2c_encode_dynamic_config(
				pdynamic,
				VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 80026b6:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_dynamic_config(
 80026ba:	f107 020c 	add.w	r2, r7, #12
 80026be:	4413      	add	r3, r2
		status =
 80026c0:	461a      	mov	r2, r3
 80026c2:	2112      	movs	r1, #18
 80026c4:	f8d7 0118 	ldr.w	r0, [r7, #280]	; 0x118
 80026c8:	f002 fe18 	bl	80052fc <VL53L1_i2c_encode_dynamic_config>
 80026cc:	4603      	mov	r3, r0
 80026ce:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	if (status == VL53L1_ERROR_NONE) {
 80026d2:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d113      	bne.n	8002702 <VL53L1_init_and_start_range+0x3f6>

		i2c_buffer_offset_bytes = \
 80026da:	f8b7 3134 	ldrh.w	r3, [r7, #308]	; 0x134
 80026de:	f1c3 0383 	rsb	r3, r3, #131	; 0x83
 80026e2:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e

		status =
			VL53L1_i2c_encode_system_control(
				psystem,
				VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes]);
 80026e6:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
			VL53L1_i2c_encode_system_control(
 80026ea:	f107 020c 	add.w	r2, r7, #12
 80026ee:	4413      	add	r3, r2
		status =
 80026f0:	461a      	mov	r2, r3
 80026f2:	2105      	movs	r1, #5
 80026f4:	f8d7 0114 	ldr.w	r0, [r7, #276]	; 0x114
 80026f8:	f002 fe85 	bl	8005406 <VL53L1_i2c_encode_system_control>
 80026fc:	4603      	mov	r3, r0
 80026fe:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	/* Send I2C Buffer */

	if (status == VL53L1_ERROR_NONE) {
 8002702:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 8002706:	2b00      	cmp	r3, #0
 8002708:	d10c      	bne.n	8002724 <VL53L1_init_and_start_range+0x418>
		status =
			VL53L1_WriteMulti(
 800270a:	f8b7 310c 	ldrh.w	r3, [r7, #268]	; 0x10c
		status =
 800270e:	f107 020c 	add.w	r2, r7, #12
 8002712:	f8b7 1134 	ldrh.w	r1, [r7, #308]	; 0x134
 8002716:	1d38      	adds	r0, r7, #4
 8002718:	6800      	ldr	r0, [r0, #0]
 800271a:	f003 fb61 	bl	8005de0 <VL53L1_WriteMulti>
 800271e:	4603      	mov	r3, r0
 8002720:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
	}

	/*
	 * Update LL Driver State
	 */
	if (status == VL53L1_ERROR_NONE)
 8002724:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 8002728:	2b00      	cmp	r3, #0
 800272a:	d106      	bne.n	800273a <VL53L1_init_and_start_range+0x42e>
		status = VL53L1_update_ll_driver_rd_state(Dev);
 800272c:	1d3b      	adds	r3, r7, #4
 800272e:	6818      	ldr	r0, [r3, #0]
 8002730:	f001 fa58 	bl	8003be4 <VL53L1_update_ll_driver_rd_state>
 8002734:	4603      	mov	r3, r0
 8002736:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

	if (status == VL53L1_ERROR_NONE)
 800273a:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
 800273e:	2b00      	cmp	r3, #0
 8002740:	d106      	bne.n	8002750 <VL53L1_init_and_start_range+0x444>
		status = VL53L1_update_ll_driver_cfg_state(Dev);
 8002742:	1d3b      	adds	r3, r7, #4
 8002744:	6818      	ldr	r0, [r3, #0]
 8002746:	f001 fb20 	bl	8003d8a <VL53L1_update_ll_driver_cfg_state>
 800274a:	4603      	mov	r3, r0
 800274c:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

	LOG_FUNCTION_END(status);

	return status;
 8002750:	f997 313f 	ldrsb.w	r3, [r7, #319]	; 0x13f
}
 8002754:	4618      	mov	r0, r3
 8002756:	f507 77a0 	add.w	r7, r7, #320	; 0x140
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop

08002760 <VL53L1_stop_range>:


VL53L1_Error VL53L1_stop_range(
	VL53L1_DEV     Dev)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
	/*
	 * Stops any in process range using the ABORT command
	 * Also clears all of the measurement mode bits
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8002768:	2300      	movs	r3, #0
 800276a:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev =
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	60bb      	str	r3, [r7, #8]
			VL53L1DevStructGetLLDriverHandle(Dev);

	/* Merge ABORT mode with mode_start */

	pdev->sys_ctrl.system__mode_start =
			(pdev->sys_ctrl.system__mode_start & VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK) |
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 8002776:	b25b      	sxtb	r3, r3
 8002778:	f003 030f 	and.w	r3, r3, #15
 800277c:	b25b      	sxtb	r3, r3
 800277e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002782:	b25b      	sxtb	r3, r3
 8002784:	b2da      	uxtb	r2, r3
	pdev->sys_ctrl.system__mode_start =
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	f883 21cc 	strb.w	r2, [r3, #460]	; 0x1cc
			 VL53L1_DEVICEMEASUREMENTMODE_ABORT;

	status = VL53L1_set_system_control(
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8002792:	4619      	mov	r1, r3
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	f002 fe71 	bl	800547c <VL53L1_set_system_control>
 800279a:	4603      	mov	r3, r0
 800279c:	73fb      	strb	r3, [r7, #15]
				Dev,
				&pdev->sys_ctrl);

	/* Abort bit is auto clear so clear register group structure to match */
	pdev->sys_ctrl.system__mode_start =
			(pdev->sys_ctrl.system__mode_start & VL53L1_DEVICEMEASUREMENTMODE_STOP_MASK);
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 80027a4:	f003 030f 	and.w	r3, r3, #15
 80027a8:	b2da      	uxtb	r2, r3
	pdev->sys_ctrl.system__mode_start =
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	f883 21cc 	strb.w	r2, [r3, #460]	; 0x1cc

	/* reset zone dynamic info */
	VL53L1_init_ll_driver_state(
 80027b0:	2103      	movs	r1, #3
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f001 f9ec 	bl	8003b90 <VL53L1_init_ll_driver_state>
			Dev,
			VL53L1_DEVICESTATE_SW_STANDBY);

	/* reset low power auto */
	if (pdev->low_power_auto_data.is_low_power_auto_mode == 1)
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d102      	bne.n	80027c8 <VL53L1_stop_range+0x68>
		VL53L1_low_power_auto_data_stop_range(Dev);
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f002 f82b 	bl	800481e <VL53L1_low_power_auto_data_stop_range>

	return status;
 80027c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3710      	adds	r7, #16
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <VL53L1_get_measurement_results>:


VL53L1_Error VL53L1_get_measurement_results(
	VL53L1_DEV                     Dev,
	VL53L1_DeviceResultsLevel      device_results_level)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b0c8      	sub	sp, #288	; 0x120
 80027d8:	af00      	add	r7, sp, #0
 80027da:	1d3b      	adds	r3, r7, #4
 80027dc:	6018      	str	r0, [r3, #0]
 80027de:	460a      	mov	r2, r1
 80027e0:	1cfb      	adds	r3, r7, #3
 80027e2:	701a      	strb	r2, [r3, #0]
	/*
	 * Read via a single I2C multiple byte transaction all
	 * of the requested device measurement data results
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80027e4:	2300      	movs	r3, #0
 80027e6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80027ea:	1d3b      	adds	r3, r7, #4
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

	uint8_t buffer[VL53L1_MAX_I2C_XFER_SIZE];

	VL53L1_system_results_t   *psystem_results = &(pdev->sys_results);
 80027f2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80027f6:	f503 73e7 	add.w	r3, r3, #462	; 0x1ce
 80027fa:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	VL53L1_core_results_t     *pcore_results   = &(pdev->core_results);
 80027fe:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8002802:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002806:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	VL53L1_debug_results_t    *pdebug_results  = &(pdev->dbg_results);
 800280a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800280e:	f503 732b 	add.w	r3, r3, #684	; 0x2ac
 8002812:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	uint16_t i2c_index               = VL53L1_SYSTEM_RESULTS_I2C_INDEX;
 8002816:	2388      	movs	r3, #136	; 0x88
 8002818:	f8a7 310a 	strh.w	r3, [r7, #266]	; 0x10a
	uint16_t i2c_buffer_offset_bytes = 0;
 800281c:	2300      	movs	r3, #0
 800281e:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
	uint16_t i2c_buffer_size_bytes   = 0;
 8002822:	2300      	movs	r3, #0
 8002824:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c

	LOG_FUNCTION_START("");

	/* Determine multi byte read transaction size */

	switch (device_results_level) {
 8002828:	1cfb      	adds	r3, r7, #3
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	2b01      	cmp	r3, #1
 800282e:	d008      	beq.n	8002842 <VL53L1_get_measurement_results+0x6e>
 8002830:	2b02      	cmp	r3, #2
 8002832:	d10d      	bne.n	8002850 <VL53L1_get_measurement_results+0x7c>
	case VL53L1_DEVICERESULTSLEVEL_FULL:
		i2c_buffer_size_bytes =
 8002834:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8002838:	f5c3 7387 	rsb	r3, r3, #270	; 0x10e
 800283c:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				(VL53L1_DEBUG_RESULTS_I2C_INDEX +
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 8002840:	e00a      	b.n	8002858 <VL53L1_get_measurement_results+0x84>
	case VL53L1_DEVICERESULTSLEVEL_UPTO_CORE:
		i2c_buffer_size_bytes =
 8002842:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 8002846:	f1c3 03d5 	rsb	r3, r3, #213	; 0xd5
 800284a:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				(VL53L1_CORE_RESULTS_I2C_INDEX +
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES) -
				i2c_index;
		break;
 800284e:	e003      	b.n	8002858 <VL53L1_get_measurement_results+0x84>
	default:
		i2c_buffer_size_bytes =
 8002850:	232c      	movs	r3, #44	; 0x2c
 8002852:	f8a7 311c 	strh.w	r3, [r7, #284]	; 0x11c
				VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES;
		break;
 8002856:	bf00      	nop
	}

	/* Read  Result Data */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 8002858:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 800285c:	2b00      	cmp	r3, #0
 800285e:	d10c      	bne.n	800287a <VL53L1_get_measurement_results+0xa6>
		status =
			VL53L1_ReadMulti(
 8002860:	f8b7 311c 	ldrh.w	r3, [r7, #284]	; 0x11c
		status =
 8002864:	f107 0208 	add.w	r2, r7, #8
 8002868:	f8b7 110a 	ldrh.w	r1, [r7, #266]	; 0x10a
 800286c:	1d38      	adds	r0, r7, #4
 800286e:	6800      	ldr	r0, [r0, #0]
 8002870:	f003 faec 	bl	8005e4c <VL53L1_ReadMulti>
 8002874:	4603      	mov	r3, r0
 8002876:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				buffer,
				(uint32_t)i2c_buffer_size_bytes);

	/* Decode  I2C buffer */

	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_FULL &&
 800287a:	1cfb      	adds	r3, r7, #3
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	2b01      	cmp	r3, #1
 8002880:	d917      	bls.n	80028b2 <VL53L1_get_measurement_results+0xde>
 8002882:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 8002886:	2b00      	cmp	r3, #0
 8002888:	d113      	bne.n	80028b2 <VL53L1_get_measurement_results+0xde>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 800288a:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 800288e:	f1c3 03d6 	rsb	r3, r3, #214	; 0xd6
 8002892:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
				VL53L1_DEBUG_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53L1_i2c_decode_debug_results(
				VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 8002896:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_debug_results(
 800289a:	f107 0208 	add.w	r2, r7, #8
 800289e:	4413      	add	r3, r2
		status =
 80028a0:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80028a4:	4619      	mov	r1, r3
 80028a6:	2038      	movs	r0, #56	; 0x38
 80028a8:	f002 ff66 	bl	8005778 <VL53L1_i2c_decode_debug_results>
 80028ac:	4603      	mov	r3, r0
 80028ae:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				pdebug_results);
	}

	if (device_results_level >= VL53L1_DEVICERESULTSLEVEL_UPTO_CORE &&
 80028b2:	1cfb      	adds	r3, r7, #3
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d017      	beq.n	80028ea <VL53L1_get_measurement_results+0x116>
 80028ba:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d113      	bne.n	80028ea <VL53L1_get_measurement_results+0x116>
		status == VL53L1_ERROR_NONE) {

		i2c_buffer_offset_bytes =
 80028c2:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 80028c6:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 80028ca:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
				VL53L1_CORE_RESULTS_I2C_INDEX - i2c_index;

		status =
			VL53L1_i2c_decode_core_results(
				VL53L1_CORE_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 80028ce:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_core_results(
 80028d2:	f107 0208 	add.w	r2, r7, #8
 80028d6:	4413      	add	r3, r2
		status =
 80028d8:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80028dc:	4619      	mov	r1, r3
 80028de:	2021      	movs	r0, #33	; 0x21
 80028e0:	f002 fee9 	bl	80056b6 <VL53L1_i2c_decode_core_results>
 80028e4:	4603      	mov	r3, r0
 80028e6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				pcore_results);
	}

	if (status == VL53L1_ERROR_NONE) {
 80028ea:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d110      	bne.n	8002914 <VL53L1_get_measurement_results+0x140>

		i2c_buffer_offset_bytes = 0;
 80028f2:	2300      	movs	r3, #0
 80028f4:	f8a7 3108 	strh.w	r3, [r7, #264]	; 0x108
		status =
			VL53L1_i2c_decode_system_results(
				VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES,
				&buffer[i2c_buffer_offset_bytes],
 80028f8:	f8b7 3108 	ldrh.w	r3, [r7, #264]	; 0x108
			VL53L1_i2c_decode_system_results(
 80028fc:	f107 0208 	add.w	r2, r7, #8
 8002900:	4413      	add	r3, r2
		status =
 8002902:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002906:	4619      	mov	r1, r3
 8002908:	202c      	movs	r0, #44	; 0x2c
 800290a:	f002 fdde 	bl	80054ca <VL53L1_i2c_decode_system_results>
 800290e:	4603      	mov	r3, r0
 8002910:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
				psystem_results);
	}

	LOG_FUNCTION_END(status);

	return status;
 8002914:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
}
 8002918:	4618      	mov	r0, r3
 800291a:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}

08002922 <VL53L1_get_device_results>:

VL53L1_Error VL53L1_get_device_results(
	VL53L1_DEV                    Dev,
	VL53L1_DeviceResultsLevel     device_results_level,
	VL53L1_range_results_t       *prange_results)
{
 8002922:	b580      	push	{r7, lr}
 8002924:	b088      	sub	sp, #32
 8002926:	af00      	add	r7, sp, #0
 8002928:	60f8      	str	r0, [r7, #12]
 800292a:	460b      	mov	r3, r1
 800292c:	607a      	str	r2, [r7, #4]
 800292e:	72fb      	strb	r3, [r7, #11]
	 *  VL53L1_copy_sys_and_core_results_to_range_results()
	 *
	 *  The input measurement mode controls what happens next ...
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8002930:	2300      	movs	r3, #0
 8002932:	77fb      	strb	r3, [r7, #31]

	VL53L1_LLDriverData_t *pdev =
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);
	VL53L1_LLDriverResults_t *pres =
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 800293e:	617b      	str	r3, [r7, #20]
			VL53L1DevStructGetLLResultsHandle(Dev);

	VL53L1_range_results_t   *presults = &(pres->range_results);
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	/* Get device results */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 8002944:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d106      	bne.n	800295a <VL53L1_get_device_results+0x38>
		status = VL53L1_get_measurement_results(
 800294c:	7afb      	ldrb	r3, [r7, #11]
 800294e:	4619      	mov	r1, r3
 8002950:	68f8      	ldr	r0, [r7, #12]
 8002952:	f7ff ff3f 	bl	80027d4 <VL53L1_get_measurement_results>
 8002956:	4603      	mov	r3, r0
 8002958:	77fb      	strb	r3, [r7, #31]
						Dev,
						device_results_level);

	if (status == VL53L1_ERROR_NONE)
 800295a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d10c      	bne.n	800297c <VL53L1_get_device_results+0x5a>
		VL53L1_copy_sys_and_core_results_to_range_results(
				(int32_t)pdev->gain_cal.standard_ranging_gain_factor,
 8002962:	69bb      	ldr	r3, [r7, #24]
 8002964:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
		VL53L1_copy_sys_and_core_results_to_range_results(
 8002968:	4618      	mov	r0, r3
 800296a:	69bb      	ldr	r3, [r7, #24]
 800296c:	f503 71e7 	add.w	r1, r3, #462	; 0x1ce
 8002970:	69bb      	ldr	r3, [r7, #24]
 8002972:	f503 7222 	add.w	r2, r3, #648	; 0x288
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	f000 f86c 	bl	8002a54 <VL53L1_copy_sys_and_core_results_to_range_results>
				&(pdev->core_results),
				presults);

	/* Start Patch_LowPowerAutoMode */
	/* process results from first range of low power auto */
	if (pdev->low_power_auto_data.is_low_power_auto_mode == 1) {
 800297c:	69bb      	ldr	r3, [r7, #24]
 800297e:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 8002982:	2b01      	cmp	r3, #1
 8002984:	d12d      	bne.n	80029e2 <VL53L1_get_device_results+0xc0>
		/* change to manual calibrations. Only needed on the
		 * first range out  */
		if ((status == VL53L1_ERROR_NONE) &&
 8002986:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d10e      	bne.n	80029ac <VL53L1_get_device_results+0x8a>
			(pdev->low_power_auto_data.low_power_auto_range_count == 0)) {
 800298e:	69bb      	ldr	r3, [r7, #24]
 8002990:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
		if ((status == VL53L1_ERROR_NONE) &&
 8002994:	2b00      	cmp	r3, #0
 8002996:	d109      	bne.n	80029ac <VL53L1_get_device_results+0x8a>
			status = VL53L1_low_power_auto_setup_manual_calibration(
 8002998:	68f8      	ldr	r0, [r7, #12]
 800299a:	f001 ff9a 	bl	80048d2 <VL53L1_low_power_auto_setup_manual_calibration>
 800299e:	4603      	mov	r3, r0
 80029a0:	77fb      	strb	r3, [r7, #31]
					Dev);
			pdev->low_power_auto_data.low_power_auto_range_count = 1;
 80029a2:	69bb      	ldr	r3, [r7, #24]
 80029a4:	2201      	movs	r2, #1
 80029a6:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
 80029aa:	e00c      	b.n	80029c6 <VL53L1_get_device_results+0xa4>
		} else if ((status == VL53L1_ERROR_NONE) &&
 80029ac:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d108      	bne.n	80029c6 <VL53L1_get_device_results+0xa4>
			(pdev->low_power_auto_data.low_power_auto_range_count == 1)) {
 80029b4:	69bb      	ldr	r3, [r7, #24]
 80029b6:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
		} else if ((status == VL53L1_ERROR_NONE) &&
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d103      	bne.n	80029c6 <VL53L1_get_device_results+0xa4>
			pdev->low_power_auto_data.low_power_auto_range_count = 2;
 80029be:	69bb      	ldr	r3, [r7, #24]
 80029c0:	2202      	movs	r2, #2
 80029c2:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
		}

		/* perform DSS calculation. This can be performed every range */
		if ((pdev->low_power_auto_data.low_power_auto_range_count != 0xFF) &&
 80029c6:	69bb      	ldr	r3, [r7, #24]
 80029c8:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
 80029cc:	2bff      	cmp	r3, #255	; 0xff
 80029ce:	d008      	beq.n	80029e2 <VL53L1_get_device_results+0xc0>
 80029d0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d104      	bne.n	80029e2 <VL53L1_get_device_results+0xc0>
			(status == VL53L1_ERROR_NONE)) {
			status = VL53L1_low_power_auto_update_DSS(
 80029d8:	68f8      	ldr	r0, [r7, #12]
 80029da:	f001 ffbf 	bl	800495c <VL53L1_low_power_auto_update_DSS>
 80029de:	4603      	mov	r3, r0
 80029e0:	77fb      	strb	r3, [r7, #31]
	}
	/* End Patch_LowPowerAutoMode */

	/* copy current state into results */

	presults->cfg_device_state = pdev->ll_state.cfg_device_state;
 80029e2:	69bb      	ldr	r3, [r7, #24]
 80029e4:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	701a      	strb	r2, [r3, #0]
	presults->rd_device_state  = pdev->ll_state.rd_device_state;
 80029ec:	69bb      	ldr	r3, [r7, #24]
 80029ee:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	705a      	strb	r2, [r3, #1]

	/* copy internal structure to supplied output pointer */

	memcpy(
 80029f6:	2284      	movs	r2, #132	; 0x84
 80029f8:	6939      	ldr	r1, [r7, #16]
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f009 fe28 	bl	800c650 <memcpy>
	/*
	 * Check LL driver and Device are in Sync
	 * If not an error is raised
	 */

	if (status == VL53L1_ERROR_NONE)
 8002a00:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d104      	bne.n	8002a12 <VL53L1_get_device_results+0xf0>
		status = VL53L1_check_ll_driver_rd_state(Dev);
 8002a08:	68f8      	ldr	r0, [r7, #12]
 8002a0a:	f001 f973 	bl	8003cf4 <VL53L1_check_ll_driver_rd_state>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	77fb      	strb	r3, [r7, #31]
			VL53L1_TRACE_MODULE_RANGE_RESULTS_DATA);
#endif

	LOG_FUNCTION_END(status);

	return status;
 8002a12:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3720      	adds	r7, #32
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}

08002a1e <VL53L1_clear_interrupt_and_enable_next_range>:


VL53L1_Error VL53L1_clear_interrupt_and_enable_next_range(
	VL53L1_DEV        Dev,
	uint8_t           measurement_mode)
{
 8002a1e:	b580      	push	{r7, lr}
 8002a20:	b084      	sub	sp, #16
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
 8002a26:	460b      	mov	r3, r1
 8002a28:	70fb      	strb	r3, [r7, #3]
	/*
	 * Enable next range by sending handshake which
	 * clears the interrupt
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	73fb      	strb	r3, [r7, #15]
	/* Dynamic GPH Management     */
	/* Setup GPH absorption point and config values for next measurement */

	/* Update GPH registers, clear interrupt and set measurement mode */

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 8002a2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d107      	bne.n	8002a46 <VL53L1_clear_interrupt_and_enable_next_range+0x28>
		status = VL53L1_init_and_start_range(
 8002a36:	78fb      	ldrb	r3, [r7, #3]
 8002a38:	2203      	movs	r2, #3
 8002a3a:	4619      	mov	r1, r3
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	f7ff fc65 	bl	800230c <VL53L1_init_and_start_range>
 8002a42:	4603      	mov	r3, r0
 8002a44:	73fb      	strb	r3, [r7, #15]
					measurement_mode,
					VL53L1_DEVICECONFIGLEVEL_GENERAL_ONWARDS);

	LOG_FUNCTION_END(status);

	return status;
 8002a46:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3710      	adds	r7, #16
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
	...

08002a54 <VL53L1_copy_sys_and_core_results_to_range_results>:
void VL53L1_copy_sys_and_core_results_to_range_results(
	int32_t                           gain_factor,
	VL53L1_system_results_t          *psys,
	VL53L1_core_results_t            *pcore,
	VL53L1_range_results_t           *presults)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b089      	sub	sp, #36	; 0x24
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	60f8      	str	r0, [r7, #12]
 8002a5c:	60b9      	str	r1, [r7, #8]
 8002a5e:	607a      	str	r2, [r7, #4]
 8002a60:	603b      	str	r3, [r7, #0]
	uint8_t  i = 0;
 8002a62:	2300      	movs	r3, #0
 8002a64:	77fb      	strb	r3, [r7, #31]

	VL53L1_range_data_t *pdata;
	int32_t range_mm = 0;
 8002a66:	2300      	movs	r3, #0
 8002a68:	613b      	str	r3, [r7, #16]
	uint32_t tmpu32 = 0;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	617b      	str	r3, [r7, #20]

	LOG_FUNCTION_START("");

	/* copy results */

	presults->stream_count    = psys->result__stream_count;
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	78da      	ldrb	r2, [r3, #3]
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	709a      	strb	r2, [r3, #2]

	pdata = &(presults->data[0]);
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	3304      	adds	r3, #4
 8002a7a:	61bb      	str	r3, [r7, #24]

	for (i = 0 ; i < 2 ; i++) {
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	77fb      	strb	r3, [r7, #31]
 8002a80:	e0d0      	b.n	8002c24 <VL53L1_copy_sys_and_core_results_to_range_results+0x1d0>

		pdata->range_id     = i;
 8002a82:	69bb      	ldr	r3, [r7, #24]
 8002a84:	7ffa      	ldrb	r2, [r7, #31]
 8002a86:	701a      	strb	r2, [r3, #0]
		pdata->time_stamp   = 0;
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	605a      	str	r2, [r3, #4]

		if ((psys->result__stream_count == 0) &&
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	78db      	ldrb	r3, [r3, #3]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d10a      	bne.n	8002aac <VL53L1_copy_sys_and_core_results_to_range_results+0x58>
			((psys->result__range_status & VL53L1_RANGE_STATUS__RANGE_STATUS_MASK) ==
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	785b      	ldrb	r3, [r3, #1]
 8002a9a:	f003 031f 	and.w	r3, r3, #31
		if ((psys->result__stream_count == 0) &&
 8002a9e:	2b09      	cmp	r3, #9
 8002aa0:	d104      	bne.n	8002aac <VL53L1_copy_sys_and_core_results_to_range_results+0x58>
			VL53L1_DEVICEERROR_RANGECOMPLETE)) {
			pdata->range_status = VL53L1_DEVICEERROR_RANGECOMPLETE_NO_WRAP_CHECK;
 8002aa2:	69bb      	ldr	r3, [r7, #24]
 8002aa4:	2213      	movs	r2, #19
 8002aa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002aaa:	e007      	b.n	8002abc <VL53L1_copy_sys_and_core_results_to_range_results+0x68>
		} else {
			pdata->range_status =
					psys->result__range_status & VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	785b      	ldrb	r3, [r3, #1]
 8002ab0:	f003 031f 	and.w	r3, r3, #31
 8002ab4:	b2da      	uxtb	r2, r3
			pdata->range_status =
 8002ab6:	69bb      	ldr	r3, [r7, #24]
 8002ab8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
		}

		switch (i) {
 8002abc:	7ffb      	ldrb	r3, [r7, #31]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d002      	beq.n	8002ac8 <VL53L1_copy_sys_and_core_results_to_range_results+0x74>
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d05d      	beq.n	8002b82 <VL53L1_copy_sys_and_core_results_to_range_results+0x12e>
 8002ac6:	e0a7      	b.n	8002c18 <VL53L1_copy_sys_and_core_results_to_range_results+0x1c4>

		case 0:

			if (psys->result__report_status == VL53L1_DEVICEREPORTSTATUS_MM1)
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	789b      	ldrb	r3, [r3, #2]
 8002acc:	2b07      	cmp	r3, #7
 8002ace:	d104      	bne.n	8002ada <VL53L1_copy_sys_and_core_results_to_range_results+0x86>
				pdata->actual_effective_spads =
					psys->result__mm_inner_actual_effective_spads_sd0;
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	8a5a      	ldrh	r2, [r3, #18]
				pdata->actual_effective_spads =
 8002ad4:	69bb      	ldr	r3, [r7, #24]
 8002ad6:	821a      	strh	r2, [r3, #16]
 8002ad8:	e00c      	b.n	8002af4 <VL53L1_copy_sys_and_core_results_to_range_results+0xa0>
			else if (psys->result__report_status == VL53L1_DEVICEREPORTSTATUS_MM2)
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	789b      	ldrb	r3, [r3, #2]
 8002ade:	2b08      	cmp	r3, #8
 8002ae0:	d104      	bne.n	8002aec <VL53L1_copy_sys_and_core_results_to_range_results+0x98>
				pdata->actual_effective_spads =
						psys->result__mm_outer_actual_effective_spads_sd0;
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	8a9a      	ldrh	r2, [r3, #20]
				pdata->actual_effective_spads =
 8002ae6:	69bb      	ldr	r3, [r7, #24]
 8002ae8:	821a      	strh	r2, [r3, #16]
 8002aea:	e003      	b.n	8002af4 <VL53L1_copy_sys_and_core_results_to_range_results+0xa0>
			else
				pdata->actual_effective_spads =
					psys->result__dss_actual_effective_spads_sd0;
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	889a      	ldrh	r2, [r3, #4]
				pdata->actual_effective_spads =
 8002af0:	69bb      	ldr	r3, [r7, #24]
 8002af2:	821a      	strh	r2, [r3, #16]

			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0;
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	8a1a      	ldrh	r2, [r3, #16]
			pdata->peak_signal_count_rate_mcps =
 8002af8:	69bb      	ldr	r3, [r7, #24]
 8002afa:	859a      	strh	r2, [r3, #44]	; 0x2c
			pdata->avg_signal_count_rate_mcps =
				psys->result__avg_signal_count_rate_mcps_sd0;
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	8ada      	ldrh	r2, [r3, #22]
			pdata->avg_signal_count_rate_mcps =
 8002b00:	69bb      	ldr	r3, [r7, #24]
 8002b02:	85da      	strh	r2, [r3, #46]	; 0x2e
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd0;
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	891a      	ldrh	r2, [r3, #8]
			pdata->ambient_count_rate_mcps =
 8002b08:	69bb      	ldr	r3, [r7, #24]
 8002b0a:	861a      	strh	r2, [r3, #48]	; 0x30

			/* Start Patch_SigmaEstimateAccuracyImprovement */

			/* shift up sigma estimate to 7 bit fractional and clip to 9 bit int */
			tmpu32 = ((uint32_t)psys->result__sigma_sd0 << 5);
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	895b      	ldrh	r3, [r3, #10]
 8002b10:	015b      	lsls	r3, r3, #5
 8002b12:	617b      	str	r3, [r7, #20]
			if (tmpu32 > 0xFFFF) {
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b1a:	d302      	bcc.n	8002b22 <VL53L1_copy_sys_and_core_results_to_range_results+0xce>
				tmpu32 = 0xFFFF;
 8002b1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b20:	617b      	str	r3, [r7, #20]
			}
			pdata->sigma_mm = (uint16_t)tmpu32;
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	b29a      	uxth	r2, r3
 8002b26:	69bb      	ldr	r3, [r7, #24]
 8002b28:	871a      	strh	r2, [r3, #56]	; 0x38

			/* End Patch_SigmaEstimateAccuracyImprovement */

			pdata->median_phase =
				psys->result__phase_sd0;
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	899a      	ldrh	r2, [r3, #12]
			pdata->median_phase =
 8002b2e:	69bb      	ldr	r3, [r7, #24]
 8002b30:	875a      	strh	r2, [r3, #58]	; 0x3a

			range_mm =
				(int32_t)psys->result__final_crosstalk_corrected_range_mm_sd0;
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	89db      	ldrh	r3, [r3, #14]
			range_mm =
 8002b36:	613b      	str	r3, [r7, #16]

			/* apply correction gain */
			range_mm *= gain_factor;
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	68fa      	ldr	r2, [r7, #12]
 8002b3c:	fb02 f303 	mul.w	r3, r2, r3
 8002b40:	613b      	str	r3, [r7, #16]
			range_mm += 0x0400;
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b48:	613b      	str	r3, [r7, #16]
			range_mm /= 0x0800;
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	da01      	bge.n	8002b54 <VL53L1_copy_sys_and_core_results_to_range_results+0x100>
 8002b50:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8002b54:	12db      	asrs	r3, r3, #11
 8002b56:	613b      	str	r3, [r7, #16]

			pdata->median_range_mm = (int16_t)range_mm;
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	b21a      	sxth	r2, r3
 8002b5c:	69bb      	ldr	r3, [r7, #24]
 8002b5e:	879a      	strh	r2, [r3, #60]	; 0x3c

			pdata->ranging_total_events =
				pcore->result_core__ranging_total_events_sd0;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	685a      	ldr	r2, [r3, #4]
			pdata->ranging_total_events =
 8002b64:	69bb      	ldr	r3, [r7, #24]
 8002b66:	625a      	str	r2, [r3, #36]	; 0x24
			pdata->signal_total_events =
				pcore->result_core__signal_total_events_sd0;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	689a      	ldr	r2, [r3, #8]
			pdata->signal_total_events =
 8002b6c:	69bb      	ldr	r3, [r7, #24]
 8002b6e:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->total_periods_elapsed =
				pcore->result_core__total_periods_elapsed_sd0;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	68da      	ldr	r2, [r3, #12]
			pdata->total_periods_elapsed =
 8002b74:	69bb      	ldr	r3, [r7, #24]
 8002b76:	615a      	str	r2, [r3, #20]
			pdata->ambient_window_events =
				pcore->result_core__ambient_window_events_sd0;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681a      	ldr	r2, [r3, #0]
			pdata->ambient_window_events =
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	621a      	str	r2, [r3, #32]

			break;
 8002b80:	e04a      	b.n	8002c18 <VL53L1_copy_sys_and_core_results_to_range_results+0x1c4>
		case 1:

			pdata->actual_effective_spads =
				psys->result__dss_actual_effective_spads_sd1;
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	8b1a      	ldrh	r2, [r3, #24]
			pdata->actual_effective_spads =
 8002b86:	69bb      	ldr	r3, [r7, #24]
 8002b88:	821a      	strh	r2, [r3, #16]
			pdata->peak_signal_count_rate_mcps =
				psys->result__peak_signal_count_rate_mcps_sd1;
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	8b5a      	ldrh	r2, [r3, #26]
			pdata->peak_signal_count_rate_mcps =
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	859a      	strh	r2, [r3, #44]	; 0x2c
			pdata->avg_signal_count_rate_mcps =
 8002b92:	69bb      	ldr	r3, [r7, #24]
 8002b94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b98:	85da      	strh	r2, [r3, #46]	; 0x2e
				0xFFFF;
			pdata->ambient_count_rate_mcps =
				psys->result__ambient_count_rate_mcps_sd1;
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	8b9a      	ldrh	r2, [r3, #28]
			pdata->ambient_count_rate_mcps =
 8002b9e:	69bb      	ldr	r3, [r7, #24]
 8002ba0:	861a      	strh	r2, [r3, #48]	; 0x30

			/* Start Patch_SigmaEstimateAccuracyImprovement */

			/* shift up sigma estimate to 7 bit fractional and clip to 9 bit int */
			tmpu32 = ((uint32_t)psys->result__sigma_sd1 << 5);
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	8bdb      	ldrh	r3, [r3, #30]
 8002ba6:	015b      	lsls	r3, r3, #5
 8002ba8:	617b      	str	r3, [r7, #20]
			if (tmpu32 > 0xFFFF) {
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bb0:	d302      	bcc.n	8002bb8 <VL53L1_copy_sys_and_core_results_to_range_results+0x164>
				tmpu32 = 0xFFFF;
 8002bb2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002bb6:	617b      	str	r3, [r7, #20]
			}
			pdata->sigma_mm = (uint16_t)tmpu32;
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	b29a      	uxth	r2, r3
 8002bbc:	69bb      	ldr	r3, [r7, #24]
 8002bbe:	871a      	strh	r2, [r3, #56]	; 0x38

			/* End Patch_SigmaEstimateAccuracyImprovement */

			pdata->median_phase =
				psys->result__phase_sd1;
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	8c1a      	ldrh	r2, [r3, #32]
			pdata->median_phase =
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	875a      	strh	r2, [r3, #58]	; 0x3a

			range_mm =
				(int32_t)psys->result__final_crosstalk_corrected_range_mm_sd1;
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
			range_mm =
 8002bcc:	613b      	str	r3, [r7, #16]

			/* apply correction gain */
			range_mm *= gain_factor;
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	68fa      	ldr	r2, [r7, #12]
 8002bd2:	fb02 f303 	mul.w	r3, r2, r3
 8002bd6:	613b      	str	r3, [r7, #16]
			range_mm += 0x0400;
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002bde:	613b      	str	r3, [r7, #16]
			range_mm /= 0x0800;
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	da01      	bge.n	8002bea <VL53L1_copy_sys_and_core_results_to_range_results+0x196>
 8002be6:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 8002bea:	12db      	asrs	r3, r3, #11
 8002bec:	613b      	str	r3, [r7, #16]

			pdata->median_range_mm = (int16_t)range_mm;
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	b21a      	sxth	r2, r3
 8002bf2:	69bb      	ldr	r3, [r7, #24]
 8002bf4:	879a      	strh	r2, [r3, #60]	; 0x3c

			pdata->ranging_total_events =
				pcore->result_core__ranging_total_events_sd1;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	695a      	ldr	r2, [r3, #20]
			pdata->ranging_total_events =
 8002bfa:	69bb      	ldr	r3, [r7, #24]
 8002bfc:	625a      	str	r2, [r3, #36]	; 0x24
			pdata->signal_total_events =
				pcore->result_core__signal_total_events_sd1;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	699a      	ldr	r2, [r3, #24]
			pdata->signal_total_events =
 8002c02:	69bb      	ldr	r3, [r7, #24]
 8002c04:	629a      	str	r2, [r3, #40]	; 0x28
			pdata->total_periods_elapsed  =
				pcore->result_core__total_periods_elapsed_sd1;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	69da      	ldr	r2, [r3, #28]
			pdata->total_periods_elapsed  =
 8002c0a:	69bb      	ldr	r3, [r7, #24]
 8002c0c:	615a      	str	r2, [r3, #20]
			pdata->ambient_window_events =
				pcore->result_core__ambient_window_events_sd1;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	691a      	ldr	r2, [r3, #16]
			pdata->ambient_window_events =
 8002c12:	69bb      	ldr	r3, [r7, #24]
 8002c14:	621a      	str	r2, [r3, #32]

			break;
 8002c16:	bf00      	nop
		}

		pdata++;
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	3340      	adds	r3, #64	; 0x40
 8002c1c:	61bb      	str	r3, [r7, #24]
	for (i = 0 ; i < 2 ; i++) {
 8002c1e:	7ffb      	ldrb	r3, [r7, #31]
 8002c20:	3301      	adds	r3, #1
 8002c22:	77fb      	strb	r3, [r7, #31]
 8002c24:	7ffb      	ldrb	r3, [r7, #31]
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	f67f af2b 	bls.w	8002a82 <VL53L1_copy_sys_and_core_results_to_range_results+0x2e>

	/* Update Global Device Status for results
	 * - Default to no update
	 */

	presults->device_status = VL53L1_DEVICEERROR_NOUPDATE;
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	70da      	strb	r2, [r3, #3]
	 * - If device error condition, update device status
	 * - Remove device status from range status output this should
	 * only contain information relating to range data
	 */

	switch (psys->result__range_status &
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	785b      	ldrb	r3, [r3, #1]
 8002c36:	f003 031f 	and.w	r3, r3, #31
 8002c3a:	3b01      	subs	r3, #1
 8002c3c:	2b10      	cmp	r3, #16
 8002c3e:	d831      	bhi.n	8002ca4 <VL53L1_copy_sys_and_core_results_to_range_results+0x250>
 8002c40:	a201      	add	r2, pc, #4	; (adr r2, 8002c48 <VL53L1_copy_sys_and_core_results_to_range_results+0x1f4>)
 8002c42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c46:	bf00      	nop
 8002c48:	08002c8d 	.word	0x08002c8d
 8002c4c:	08002c8d 	.word	0x08002c8d
 8002c50:	08002c8d 	.word	0x08002c8d
 8002c54:	08002ca5 	.word	0x08002ca5
 8002c58:	08002ca5 	.word	0x08002ca5
 8002c5c:	08002ca5 	.word	0x08002ca5
 8002c60:	08002ca5 	.word	0x08002ca5
 8002c64:	08002ca5 	.word	0x08002ca5
 8002c68:	08002ca5 	.word	0x08002ca5
 8002c6c:	08002ca5 	.word	0x08002ca5
 8002c70:	08002ca5 	.word	0x08002ca5
 8002c74:	08002ca5 	.word	0x08002ca5
 8002c78:	08002c8d 	.word	0x08002c8d
 8002c7c:	08002ca5 	.word	0x08002ca5
 8002c80:	08002ca5 	.word	0x08002ca5
 8002c84:	08002ca5 	.word	0x08002ca5
 8002c88:	08002c8d 	.word	0x08002c8d
	case VL53L1_DEVICEERROR_VCSELWATCHDOGTESTFAILURE:
	case VL53L1_DEVICEERROR_NOVHVVALUEFOUND:
	case VL53L1_DEVICEERROR_USERROICLIP:
	case VL53L1_DEVICEERROR_MULTCLIPFAIL:

		presults->device_status = (psys->result__range_status &
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	785b      	ldrb	r3, [r3, #1]
 8002c90:	f003 031f 	and.w	r3, r3, #31
 8002c94:	b2da      	uxtb	r2, r3
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	70da      	strb	r2, [r3, #3]
				VL53L1_RANGE_STATUS__RANGE_STATUS_MASK);

		presults->data[0].range_status = VL53L1_DEVICEERROR_NOUPDATE;
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	break;
 8002ca2:	bf00      	nop

	}

	LOG_FUNCTION_END(0);
}
 8002ca4:	bf00      	nop
 8002ca6:	3724      	adds	r7, #36	; 0x24
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr

08002cb0 <VL53L1_set_GPIO_interrupt_config_struct>:
 */

VL53L1_Error VL53L1_set_GPIO_interrupt_config_struct(
	VL53L1_DEV                      Dev,
	VL53L1_GPIO_interrupt_config_t	intconf)
{
 8002cb0:	b084      	sub	sp, #16
 8002cb2:	b580      	push	{r7, lr}
 8002cb4:	b086      	sub	sp, #24
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	6078      	str	r0, [r7, #4]
 8002cba:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002cbe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	75fb      	strb	r3, [r7, #23]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	613b      	str	r3, [r7, #16]
	VL53L1_GPIO_interrupt_config_t *pintconf = &(pdev->gpio_interrupt_config);
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	3334      	adds	r3, #52	; 0x34
 8002cce:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	 /* using memcpy(dst, src, size in bytes) */
	memcpy(pintconf, &(intconf), sizeof(VL53L1_GPIO_interrupt_config_t));
 8002cd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cd4:	220e      	movs	r2, #14
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	68f8      	ldr	r0, [r7, #12]
 8002cda:	f009 fcb9 	bl	800c650 <memcpy>

	/* encoded interrupt config */
	pdev->gen_cfg.system__interrupt_config_gpio =
		VL53L1_encode_GPIO_interrupt_config(pintconf);
 8002cde:	68f8      	ldr	r0, [r7, #12]
 8002ce0:	f001 fc9f 	bl	8004622 <VL53L1_encode_GPIO_interrupt_config>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	461a      	mov	r2, r3
	pdev->gen_cfg.system__interrupt_config_gpio =
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	f883 2186 	strb.w	r2, [r3, #390]	; 0x186

	/* set thresholds */
	status = VL53L1_set_GPIO_thresholds_from_struct(
 8002cee:	68f9      	ldr	r1, [r7, #12]
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f001 fd3b 	bl	800476c <VL53L1_set_GPIO_thresholds_from_struct>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	75fb      	strb	r3, [r7, #23]
			Dev,
			pintconf);

	LOG_FUNCTION_END(status);
	return status;
 8002cfa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3718      	adds	r7, #24
 8002d02:	46bd      	mov	sp, r7
 8002d04:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002d08:	b004      	add	sp, #16
 8002d0a:	4770      	bx	lr

08002d0c <VL53L1_get_GPIO_interrupt_config>:
 */

VL53L1_Error VL53L1_get_GPIO_interrupt_config(
	VL53L1_DEV                      Dev,
	VL53L1_GPIO_interrupt_config_t	*pintconf)
{
 8002d0c:	b590      	push	{r4, r7, lr}
 8002d0e:	b089      	sub	sp, #36	; 0x24
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6178      	str	r0, [r7, #20]
 8002d14:	6139      	str	r1, [r7, #16]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8002d16:	2300      	movs	r3, #0
 8002d18:	77fb      	strb	r3, [r7, #31]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	61bb      	str	r3, [r7, #24]

	/*
	 * Decode the system__interrupt_config_gpio register
	 * This makes sure the structure is in line with the register
	 */
	pdev->gpio_interrupt_config = VL53L1_decode_GPIO_interrupt_config(
 8002d1e:	69bb      	ldr	r3, [r7, #24]
 8002d20:	f893 2186 	ldrb.w	r2, [r3, #390]	; 0x186
 8002d24:	69bc      	ldr	r4, [r7, #24]
 8002d26:	463b      	mov	r3, r7
 8002d28:	4611      	mov	r1, r2
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f001 fcab 	bl	8004686 <VL53L1_decode_GPIO_interrupt_config>
 8002d30:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8002d34:	463c      	mov	r4, r7
 8002d36:	6820      	ldr	r0, [r4, #0]
 8002d38:	6861      	ldr	r1, [r4, #4]
 8002d3a:	68a2      	ldr	r2, [r4, #8]
 8002d3c:	c307      	stmia	r3!, {r0, r1, r2}
 8002d3e:	89a2      	ldrh	r2, [r4, #12]
 8002d40:	801a      	strh	r2, [r3, #0]

	/*
	 * Readout the system thresholds
	 */
	pdev->gpio_interrupt_config.threshold_distance_high =
		pdev->dyn_cfg.system__thresh_high;
 8002d42:	69bb      	ldr	r3, [r7, #24]
 8002d44:	f8b3 21b6 	ldrh.w	r2, [r3, #438]	; 0x1b6
	pdev->gpio_interrupt_config.threshold_distance_high =
 8002d48:	69bb      	ldr	r3, [r7, #24]
 8002d4a:	875a      	strh	r2, [r3, #58]	; 0x3a
	pdev->gpio_interrupt_config.threshold_distance_low =
		pdev->dyn_cfg.system__thresh_low;
 8002d4c:	69bb      	ldr	r3, [r7, #24]
 8002d4e:	f8b3 21b8 	ldrh.w	r2, [r3, #440]	; 0x1b8
	pdev->gpio_interrupt_config.threshold_distance_low =
 8002d52:	69bb      	ldr	r3, [r7, #24]
 8002d54:	879a      	strh	r2, [r3, #60]	; 0x3c

	pdev->gpio_interrupt_config.threshold_rate_high =
		pdev->gen_cfg.system__thresh_rate_high;
 8002d56:	69bb      	ldr	r3, [r7, #24]
 8002d58:	f8b3 2190 	ldrh.w	r2, [r3, #400]	; 0x190
	pdev->gpio_interrupt_config.threshold_rate_high =
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	87da      	strh	r2, [r3, #62]	; 0x3e
	pdev->gpio_interrupt_config.threshold_rate_low =
		pdev->gen_cfg.system__thresh_rate_low;
 8002d60:	69bb      	ldr	r3, [r7, #24]
 8002d62:	f8b3 2192 	ldrh.w	r2, [r3, #402]	; 0x192
	pdev->gpio_interrupt_config.threshold_rate_low =
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

	if (pintconf == &(pdev->gpio_interrupt_config))	{
 8002d6c:	69bb      	ldr	r3, [r7, #24]
 8002d6e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d006      	beq.n	8002d86 <VL53L1_get_GPIO_interrupt_config+0x7a>
		/* Cowardly refusing to copy the same memory locations */
	} else {

		/* using memcpy(dst, src, size in bytes) */
		memcpy(pintconf, &(pdev->gpio_interrupt_config),
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	3334      	adds	r3, #52	; 0x34
 8002d7c:	220e      	movs	r2, #14
 8002d7e:	4619      	mov	r1, r3
 8002d80:	6938      	ldr	r0, [r7, #16]
 8002d82:	f009 fc65 	bl	800c650 <memcpy>
				sizeof(VL53L1_GPIO_interrupt_config_t));
	}

	LOG_FUNCTION_END(status);
	return status;
 8002d86:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3724      	adds	r7, #36	; 0x24
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd90      	pop	{r4, r7, pc}
	...

08002d94 <VL53L1_get_tuning_parm>:

VL53L1_Error VL53L1_get_tuning_parm(
	VL53L1_DEV                     Dev,
	VL53L1_TuningParms             tuning_parm_key,
	int32_t                       *ptuning_parm_value)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b087      	sub	sp, #28
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	60f8      	str	r0, [r7, #12]
 8002d9c:	460b      	mov	r3, r1
 8002d9e:	607a      	str	r2, [r7, #4]
 8002da0:	817b      	strh	r3, [r7, #10]
	 * Gets the requested tuning parm value
	 * - Large case statement for returns
	 * - if key does not match, INVALID parm error returned
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8002da2:	2300      	movs	r3, #0
 8002da4:	75fb      	strb	r3, [r7, #23]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	613b      	str	r3, [r7, #16]

	LOG_FUNCTION_START("");

	switch (tuning_parm_key) {
 8002daa:	897b      	ldrh	r3, [r7, #10]
 8002dac:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8002db0:	2b38      	cmp	r3, #56	; 0x38
 8002db2:	f200 8204 	bhi.w	80031be <VL53L1_get_tuning_parm+0x42a>
 8002db6:	a201      	add	r2, pc, #4	; (adr r2, 8002dbc <VL53L1_get_tuning_parm+0x28>)
 8002db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dbc:	08002ea1 	.word	0x08002ea1
 8002dc0:	08002eaf 	.word	0x08002eaf
 8002dc4:	08002ebd 	.word	0x08002ebd
 8002dc8:	08002ecb 	.word	0x08002ecb
 8002dcc:	08002ed9 	.word	0x08002ed9
 8002dd0:	08002ee7 	.word	0x08002ee7
 8002dd4:	08002ef5 	.word	0x08002ef5
 8002dd8:	08002f03 	.word	0x08002f03
 8002ddc:	08002f11 	.word	0x08002f11
 8002de0:	08002f1f 	.word	0x08002f1f
 8002de4:	08002f2d 	.word	0x08002f2d
 8002de8:	08002f3b 	.word	0x08002f3b
 8002dec:	08002f49 	.word	0x08002f49
 8002df0:	08002f57 	.word	0x08002f57
 8002df4:	08002f65 	.word	0x08002f65
 8002df8:	08002f73 	.word	0x08002f73
 8002dfc:	08002f81 	.word	0x08002f81
 8002e00:	08002f8f 	.word	0x08002f8f
 8002e04:	08002f9d 	.word	0x08002f9d
 8002e08:	08002fab 	.word	0x08002fab
 8002e0c:	08002fb9 	.word	0x08002fb9
 8002e10:	08002fc7 	.word	0x08002fc7
 8002e14:	08002fd5 	.word	0x08002fd5
 8002e18:	08002fe3 	.word	0x08002fe3
 8002e1c:	08002ff1 	.word	0x08002ff1
 8002e20:	08002fff 	.word	0x08002fff
 8002e24:	0800300d 	.word	0x0800300d
 8002e28:	0800301b 	.word	0x0800301b
 8002e2c:	08003029 	.word	0x08003029
 8002e30:	08003037 	.word	0x08003037
 8002e34:	08003045 	.word	0x08003045
 8002e38:	08003053 	.word	0x08003053
 8002e3c:	08003061 	.word	0x08003061
 8002e40:	0800306f 	.word	0x0800306f
 8002e44:	0800307d 	.word	0x0800307d
 8002e48:	0800308b 	.word	0x0800308b
 8002e4c:	08003099 	.word	0x08003099
 8002e50:	080030a7 	.word	0x080030a7
 8002e54:	080030b5 	.word	0x080030b5
 8002e58:	080030c3 	.word	0x080030c3
 8002e5c:	080030d1 	.word	0x080030d1
 8002e60:	080030df 	.word	0x080030df
 8002e64:	080030ed 	.word	0x080030ed
 8002e68:	080030fb 	.word	0x080030fb
 8002e6c:	08003109 	.word	0x08003109
 8002e70:	08003117 	.word	0x08003117
 8002e74:	08003125 	.word	0x08003125
 8002e78:	08003133 	.word	0x08003133
 8002e7c:	08003141 	.word	0x08003141
 8002e80:	0800314f 	.word	0x0800314f
 8002e84:	0800315d 	.word	0x0800315d
 8002e88:	0800316b 	.word	0x0800316b
 8002e8c:	08003179 	.word	0x08003179
 8002e90:	08003187 	.word	0x08003187
 8002e94:	08003195 	.word	0x08003195
 8002e98:	080031a3 	.word	0x080031a3
 8002e9c:	080031b1 	.word	0x080031b1

	case VL53L1_TUNINGPARM_VERSION:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_tuning_parm_version;
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
 8002ea6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	601a      	str	r2, [r3, #0]
	break;
 8002eac:	e18e      	b.n	80031cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_KEY_TABLE_VERSION:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_tuning_parm_key_table_version;
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	; 0xa6
 8002eb4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	601a      	str	r2, [r3, #0]
	break;
 8002eba:	e187      	b.n	80031cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LLD_VERSION:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_tuning_parm_lld_version;
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 8002ec2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	601a      	str	r2, [r3, #0]
	break;
 8002ec8:	e180      	b.n	80031cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_consistency_lite_phase_tolerance;
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8002ed0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	601a      	str	r2, [r3, #0]
	break;
 8002ed6:	e179      	b.n	80031cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_PHASECAL_TARGET:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_phasecal_target;
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8002ede:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	601a      	str	r2, [r3, #0]
	break;
 8002ee4:	e172      	b.n	80031cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_cal_repeat_rate;
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	; 0xb2
 8002eec:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	601a      	str	r2, [r3, #0]
	break;
 8002ef2:	e16b      	b.n	80031cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR:
		*ptuning_parm_value =
				(int32_t)pdev->gain_cal.standard_ranging_gain_factor;
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
 8002efa:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	601a      	str	r2, [r3, #0]
	break;
 8002f00:	e164      	b.n	80031cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_min_clip;
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	f893 30b4 	ldrb.w	r3, [r3, #180]	; 0xb4
 8002f08:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	601a      	str	r2, [r3, #0]
	break;
 8002f0e:	e15d      	b.n	80031cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_long_sigma_thresh_mm;
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	f8b3 30b6 	ldrh.w	r3, [r3, #182]	; 0xb6
 8002f16:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	601a      	str	r2, [r3, #0]
	break;
 8002f1c:	e156      	b.n	80031cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_med_sigma_thresh_mm;
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 8002f24:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	601a      	str	r2, [r3, #0]
	break;
 8002f2a:	e14f      	b.n	80031cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_short_sigma_thresh_mm;
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 8002f32:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	601a      	str	r2, [r3, #0]
	break;
 8002f38:	e148      	b.n	80031cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_long_min_count_rate_rtn_mcps;
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	; 0xbc
 8002f40:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	601a      	str	r2, [r3, #0]
	break;
 8002f46:	e141      	b.n	80031cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_med_min_count_rate_rtn_mcps;
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	f8b3 30be 	ldrh.w	r3, [r3, #190]	; 0xbe
 8002f4e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	601a      	str	r2, [r3, #0]
	break;
 8002f54:	e13a      	b.n	80031cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_short_min_count_rate_rtn_mcps;
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	f8b3 30c0 	ldrh.w	r3, [r3, #192]	; 0xc0
 8002f5c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	601a      	str	r2, [r3, #0]
	break;
 8002f62:	e133      	b.n	80031cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_sigma_est_pulse_width_ns;
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
 8002f6a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	601a      	str	r2, [r3, #0]
	break;
 8002f70:	e12c      	b.n	80031cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_sigma_est_amb_width_ns;
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	f893 30c3 	ldrb.w	r3, [r3, #195]	; 0xc3
 8002f78:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	601a      	str	r2, [r3, #0]
	break;
 8002f7e:	e125      	b.n	80031cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_sigma_ref_mm;
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	f893 30c4 	ldrb.w	r3, [r3, #196]	; 0xc4
 8002f86:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	601a      	str	r2, [r3, #0]
	break;
 8002f8c:	e11e      	b.n	80031cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_RIT_MULT:
		*ptuning_parm_value =
				(int32_t)pdev->xtalk_cfg.crosstalk_range_ignore_threshold_mult;
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	f893 3140 	ldrb.w	r3, [r3, #320]	; 0x140
 8002f94:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	601a      	str	r2, [r3, #0]
	break;
 8002f9a:	e117      	b.n	80031cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_seed_cfg ;
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	f893 30c5 	ldrb.w	r3, [r3, #197]	; 0xc5
 8002fa2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	601a      	str	r2, [r3, #0]
	break;
 8002fa8:	e110      	b.n	80031cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_QUANTIFIER:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_quantifier;
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	f893 30c7 	ldrb.w	r3, [r3, #199]	; 0xc7
 8002fb0:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	601a      	str	r2, [r3, #0]
	break;
 8002fb6:	e109      	b.n	80031cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_lite_first_order_select;
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 8002fbe:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	601a      	str	r2, [r3, #0]
	break;
 8002fc4:	e102      	b.n	80031cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS:
		*ptuning_parm_value =
				(int32_t)pdev->xtalk_cfg.lite_mode_crosstalk_margin_kcps;
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	f9b3 313e 	ldrsh.w	r3, [r3, #318]	; 0x13e
 8002fcc:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	601a      	str	r2, [r3, #0]
	break;
 8002fd2:	e0fb      	b.n	80031cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_long;
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 8002fda:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	601a      	str	r2, [r3, #0]
	break;
 8002fe0:	e0f4      	b.n	80031cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_med;
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	f893 30ab 	ldrb.w	r3, [r3, #171]	; 0xab
 8002fe8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	601a      	str	r2, [r3, #0]
	break;
 8002fee:	e0ed      	b.n	80031cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_rtn_lite_short;
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 8002ff6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	601a      	str	r2, [r3, #0]
	break;
 8002ffc:	e0e6      	b.n	80031cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_long;
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	f893 30ad 	ldrb.w	r3, [r3, #173]	; 0xad
 8003004:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	601a      	str	r2, [r3, #0]
	break;
 800300a:	e0df      	b.n	80031cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_med;
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	f893 30ae 	ldrb.w	r3, [r3, #174]	; 0xae
 8003012:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	601a      	str	r2, [r3, #0]
	break;
 8003018:	e0d8      	b.n	80031cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_init_phase_ref_lite_short;
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
 8003020:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	601a      	str	r2, [r3, #0]
	break;
 8003026:	e0d1      	b.n	80031cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_SEED_CONFIG:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_timed_seed_cfg;
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 800302e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	601a      	str	r2, [r3, #0]
	break;
 8003034:	e0ca      	b.n	80031cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_VHV_LOOPBOUND:
		*ptuning_parm_value =
				(int32_t)pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800303c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	601a      	str	r2, [r3, #0]
	break;
 8003042:	e0c3      	b.n	80031cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.device_test_mode;
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 800304a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	601a      	str	r2, [r3, #0]
	break;
 8003050:	e0bc      	b.n	80031cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.vcsel_period;
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	f893 3111 	ldrb.w	r3, [r3, #273]	; 0x111
 8003058:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	601a      	str	r2, [r3, #0]
	break;
 800305e:	e0b5      	b.n	80031cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.timeout_us;
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8003066:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	601a      	str	r2, [r3, #0]
	break;
 800306c:	e0ae      	b.n	80031cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.target_count_rate_mcps;
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	f8b3 3118 	ldrh.w	r3, [r3, #280]	; 0x118
 8003074:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	601a      	str	r2, [r3, #0]
	break;
 800307a:	e0a7      	b.n	80031cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.min_count_rate_limit_mcps;
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	f8b3 311a 	ldrh.w	r3, [r3, #282]	; 0x11a
 8003082:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	601a      	str	r2, [r3, #0]
	break;
 8003088:	e0a0      	b.n	80031cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->refspadchar.max_count_rate_limit_mcps;
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	f8b3 311c 	ldrh.w	r3, [r3, #284]	; 0x11c
 8003090:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	601a      	str	r2, [r3, #0]
	break;
 8003096:	e099      	b.n	80031cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.dss_config__target_total_rate_mcps;;
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 800309e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	601a      	str	r2, [r3, #0]
	break;
 80030a4:	e092      	b.n	80031cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.phasecal_config_timeout_us;
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80030ac:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	601a      	str	r2, [r3, #0]
	break;
 80030b2:	e08b      	b.n	80031cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.mm_config_timeout_us;
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80030ba:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	601a      	str	r2, [r3, #0]
	break;
 80030c0:	e084      	b.n	80031cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.range_config_timeout_us;
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 80030c8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	601a      	str	r2, [r3, #0]
	break;
 80030ce:	e07d      	b.n	80031cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.pre_num_of_samples;
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 80030d6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	601a      	str	r2, [r3, #0]
	break;
 80030dc:	e076      	b.n	80031cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES:
		*ptuning_parm_value =
			(int32_t)pdev->offsetcal_cfg.mm1_num_of_samples;
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	f893 3155 	ldrb.w	r3, [r3, #341]	; 0x155
 80030e4:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	601a      	str	r2, [r3, #0]
	break;
 80030ea:	e06f      	b.n	80031cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES:
		*ptuning_parm_value =
				(int32_t)pdev->offsetcal_cfg.mm2_num_of_samples;
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	f893 3156 	ldrb.w	r3, [r3, #342]	; 0x156
 80030f2:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	601a      	str	r2, [r3, #0]
	break;
 80030f8:	e068      	b.n	80031cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD:
		*ptuning_parm_value =
				(int32_t)pdev->ssc_cfg.vcsel_period;
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	f893 3121 	ldrb.w	r3, [r3, #289]	; 0x121
 8003100:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	601a      	str	r2, [r3, #0]
	break;
 8003106:	e061      	b.n	80031cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_SPADMAP_VCSEL_START:
		*ptuning_parm_value =
				(int32_t)pdev->ssc_cfg.vcsel_start;
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	f893 3122 	ldrb.w	r3, [r3, #290]	; 0x122
 800310e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	601a      	str	r2, [r3, #0]
	break;
 8003114:	e05a      	b.n	80031cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->ssc_cfg.rate_limit_mcps;
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	f8b3 3128 	ldrh.w	r3, [r3, #296]	; 0x128
 800311c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	601a      	str	r2, [r3, #0]
	break;
 8003122:	e053      	b.n	80031cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_dss_target_lite_mcps;
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	f8b3 30ca 	ldrh.w	r3, [r3, #202]	; 0xca
 800312a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	601a      	str	r2, [r3, #0]
	break;
 8003130:	e04c      	b.n	80031cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_dss_target_timed_mcps;
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	; 0xcc
 8003138:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	601a      	str	r2, [r3, #0]
	break;
 800313e:	e045      	b.n	80031cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_phasecal_timeout_lite_us;
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8003146:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	601a      	str	r2, [r3, #0]
	break;
 800314c:	e03e      	b.n	80031cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_phasecal_timeout_timed_us;
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8003154:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	601a      	str	r2, [r3, #0]
	break;
 800315a:	e037      	b.n	80031cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_mm_timeout_lite_us;
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003162:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	601a      	str	r2, [r3, #0]
	break;
 8003168:	e030      	b.n	80031cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_mm_timeout_timed_us;
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003170:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	601a      	str	r2, [r3, #0]
	break;
 8003176:	e029      	b.n	80031cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_range_timeout_lite_us;
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800317e:	461a      	mov	r2, r3
		*ptuning_parm_value =
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	601a      	str	r2, [r3, #0]
	break;
 8003184:	e022      	b.n	80031cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_range_timeout_timed_us;
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800318c:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	601a      	str	r2, [r3, #0]
	break;
 8003192:	e01b      	b.n	80031cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND:
		*ptuning_parm_value =
				(int32_t)pdev->low_power_auto_data.vhv_loop_bound;
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 800319a:	461a      	mov	r2, r3
		*ptuning_parm_value =
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	601a      	str	r2, [r3, #0]
	break;
 80031a0:	e014      	b.n	80031cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_mm_timeout_lpa_us;
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031a8:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	601a      	str	r2, [r3, #0]
	break;
 80031ae:	e00d      	b.n	80031cc <VL53L1_get_tuning_parm+0x438>
	case VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US:
		*ptuning_parm_value =
				(int32_t)pdev->tuning_parms.tp_range_timeout_lpa_us;
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80031b6:	461a      	mov	r2, r3
		*ptuning_parm_value =
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	601a      	str	r2, [r3, #0]
	break;
 80031bc:	e006      	b.n	80031cc <VL53L1_get_tuning_parm+0x438>


	default:
		*ptuning_parm_value = 0x7FFFFFFF;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80031c4:	601a      	str	r2, [r3, #0]
		status = VL53L1_ERROR_INVALID_PARAMS;
 80031c6:	23fc      	movs	r3, #252	; 0xfc
 80031c8:	75fb      	strb	r3, [r7, #23]
	break;
 80031ca:	bf00      	nop

	}

	LOG_FUNCTION_END(status);

	return status;
 80031cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	371c      	adds	r7, #28
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr

080031dc <VL53L1_init_refspadchar_config_struct>:


#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_refspadchar_config_struct(
	VL53L1_refspadchar_config_t   *pdata)
{
 80031dc:	b480      	push	{r7}
 80031de:	b085      	sub	sp, #20
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes Ref SPAD Char data structures preset mode
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80031e4:	2300      	movs	r3, #0
 80031e6:	73fb      	strb	r3, [r7, #15]
	 * target_count_rate_mcps    = 0x0A00 - 9.7 -> 20.0 Mcps
	 * min_count_rate_limit_mcps = 0x0500 - 9.7 -> 10.0 Mcps
	 * max_count_rate_limit_mcps = 0x1400 - 9.7 -> 40.0 Mcps
	 */

	pdata->device_test_mode =
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2208      	movs	r2, #8
 80031ec:	701a      	strb	r2, [r3, #0]
			VL53L1_TUNINGPARM_REFSPADCHAR_DEVICE_TEST_MODE_DEFAULT;
	pdata->vcsel_period              =
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	220b      	movs	r2, #11
 80031f2:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_REFSPADCHAR_VCSEL_PERIOD_DEFAULT;
	pdata->timeout_us                =
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80031fa:	605a      	str	r2, [r3, #4]
			VL53L1_TUNINGPARM_REFSPADCHAR_PHASECAL_TIMEOUT_US_DEFAULT;
	pdata->target_count_rate_mcps    =
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8003202:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_REFSPADCHAR_TARGET_COUNT_RATE_MCPS_DEFAULT;
	pdata->min_count_rate_limit_mcps =
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 800320a:	815a      	strh	r2, [r3, #10]
			VL53L1_TUNINGPARM_REFSPADCHAR_MIN_COUNTRATE_LIMIT_MCPS_DEFAULT;
	pdata->max_count_rate_limit_mcps =
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8003212:	819a      	strh	r2, [r3, #12]
			VL53L1_TUNINGPARM_REFSPADCHAR_MAX_COUNTRATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8003214:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003218:	4618      	mov	r0, r3
 800321a:	3714      	adds	r7, #20
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr

08003224 <VL53L1_init_ssc_config_struct>:


#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_ssc_config_struct(
	VL53L1_ssc_config_t   *pdata)
{
 8003224:	b480      	push	{r7}
 8003226:	b085      	sub	sp, #20
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes SPAD Self Check (SSC) data structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800322c:	2300      	movs	r3, #0
 800322e:	73fb      	strb	r3, [r7, #15]
	/* SPAD Select Check Configuration */

	/* 0 - store RTN count rates
	 * 1 - store REF count rates
	 */
	pdata->array_select = VL53L1_DEVICESSCARRAY_RTN;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	701a      	strb	r2, [r3, #0]

	/* VCSEL period register value  0x12 (18) -> 38 VCSEL clocks */
	pdata->vcsel_period =
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2212      	movs	r2, #18
 800323a:	705a      	strb	r2, [r3, #1]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_PERIOD_DEFAULT;

	/* VCSEL pulse start */
	pdata->vcsel_start  =
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	220f      	movs	r2, #15
 8003240:	709a      	strb	r2, [r3, #2]
			VL53L1_TUNINGPARM_SPADMAP_VCSEL_START_DEFAULT;

	/* VCSEL pulse width */
	pdata->vcsel_width  = 0x02;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2202      	movs	r2, #2
 8003246:	70da      	strb	r2, [r3, #3]

	/* SSC timeout [us] */
	pdata->timeout_us   = 36000;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 800324e:	605a      	str	r2, [r3, #4]

	/* SSC rate limit [Mcps]
	 * - 9.7 for VCSEL ON
	 * - 1.15 for VCSEL OFF
	 */
	pdata->rate_limit_mcps =
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	220c      	movs	r2, #12
 8003254:	811a      	strh	r2, [r3, #8]
			VL53L1_TUNINGPARM_SPADMAP_RATE_LIMIT_MCPS_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8003256:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800325a:	4618      	mov	r0, r3
 800325c:	3714      	adds	r7, #20
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr

08003266 <VL53L1_init_xtalk_config_struct>:


VL53L1_Error VL53L1_init_xtalk_config_struct(
	VL53L1_customer_nvm_managed_t *pnvm,
	VL53L1_xtalk_config_t   *pdata)
{
 8003266:	b580      	push	{r7, lr}
 8003268:	b084      	sub	sp, #16
 800326a:	af00      	add	r7, sp, #0
 800326c:	6078      	str	r0, [r7, #4]
 800326e:	6039      	str	r1, [r7, #0]
	/*
	 * Initializes Xtalk Config structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003270:	2300      	movs	r3, #0
 8003272:	73fb      	strb	r3, [r7, #15]
	 */

	/* Store xtalk data into golden copy */

	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
		pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	895b      	ldrh	r3, [r3, #10]
 8003278:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps      =
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	601a      	str	r2, [r3, #0]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps  =
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	809a      	strh	r2, [r3, #4]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps  =
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	80da      	strh	r2, [r3, #6]

	/* Store NVM defaults for later use */

	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
		(uint32_t)pnvm->algo__crosstalk_compensation_plane_offset_kcps;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	895b      	ldrh	r3, [r3, #10]
 8003296:	461a      	mov	r2, r3
	pdata->nvm_default__crosstalk_compensation_plane_offset_kcps      =
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	609a      	str	r2, [r3, #8]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_x_plane_gradient_kcps;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_x_plane_gradient_kcps  =
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	819a      	strh	r2, [r3, #12]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
		pnvm->algo__crosstalk_compensation_y_plane_gradient_kcps;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
	pdata->nvm_default__crosstalk_compensation_y_plane_gradient_kcps  =
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	81da      	strh	r2, [r3, #14]

	pdata->lite_mode_crosstalk_margin_kcps                     =
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	2200      	movs	r2, #0
 80032b4:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_LITE_XTALK_MARGIN_KCPS_DEFAULT;

	/* Default for Range Ignore Threshold Mult = 2.0 */

	pdata->crosstalk_range_ignore_threshold_mult =
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	2240      	movs	r2, #64	; 0x40
 80032ba:	751a      	strb	r2, [r3, #20]
			VL53L1_TUNINGPARM_LITE_RIT_MULT_DEFAULT;

	if ((pdata->algo__crosstalk_compensation_plane_offset_kcps == 0x00)
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d10d      	bne.n	80032e0 <VL53L1_init_xtalk_config_struct+0x7a>
		&& (pdata->algo__crosstalk_compensation_x_plane_gradient_kcps == 0x00)
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d108      	bne.n	80032e0 <VL53L1_init_xtalk_config_struct+0x7a>
		&& (pdata->algo__crosstalk_compensation_y_plane_gradient_kcps == 0x00))
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d103      	bne.n	80032e0 <VL53L1_init_xtalk_config_struct+0x7a>
		pdata->global_crosstalk_compensation_enable = 0x00;
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	2200      	movs	r2, #0
 80032dc:	741a      	strb	r2, [r3, #16]
 80032de:	e002      	b.n	80032e6 <VL53L1_init_xtalk_config_struct+0x80>
	else
		pdata->global_crosstalk_compensation_enable = 0x01;
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	2201      	movs	r2, #1
 80032e4:	741a      	strb	r2, [r3, #16]


	if ((status == VL53L1_ERROR_NONE) &&
 80032e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d114      	bne.n	8003318 <VL53L1_init_xtalk_config_struct+0xb2>
		(pdata->global_crosstalk_compensation_enable == 0x01)) {
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	7c1b      	ldrb	r3, [r3, #16]
	if ((status == VL53L1_ERROR_NONE) &&
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d110      	bne.n	8003318 <VL53L1_init_xtalk_config_struct+0xb2>
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
			VL53L1_calc_range_ignore_threshold(
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	6818      	ldr	r0, [r3, #0]
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	7d1b      	ldrb	r3, [r3, #20]
 800330a:	f000 ff97 	bl	800423c <VL53L1_calc_range_ignore_threshold>
 800330e:	4603      	mov	r3, r0
 8003310:	461a      	mov	r2, r3
		pdata->crosstalk_range_ignore_threshold_rate_mcps =
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	82da      	strh	r2, [r3, #22]
 8003316:	e002      	b.n	800331e <VL53L1_init_xtalk_config_struct+0xb8>
				pdata->algo__crosstalk_compensation_plane_offset_kcps,
				pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
				pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
				pdata->crosstalk_range_ignore_threshold_mult);
	} else {
		pdata->crosstalk_range_ignore_threshold_rate_mcps = 0;
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	2200      	movs	r2, #0
 800331c:	82da      	strh	r2, [r3, #22]
	}

	LOG_FUNCTION_END(status);

	return status;
 800331e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003322:	4618      	mov	r0, r3
 8003324:	3710      	adds	r7, #16
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}

0800332a <VL53L1_init_offset_cal_config_struct>:

#ifndef VL53L1_NOCALIB
VL53L1_Error VL53L1_init_offset_cal_config_struct(
	VL53L1_offsetcal_config_t   *pdata)
{
 800332a:	b480      	push	{r7}
 800332c:	b085      	sub	sp, #20
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes Offset Calibration Config structure
	 * - for use with VL53L1_run_offset_calibration()
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003332:	2300      	movs	r3, #0
 8003334:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* Preset Timeout and DSS defaults */

	pdata->dss_config__target_total_rate_mcps          =
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800333c:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_OFFSET_CAL_DSS_RATE_MCPS_DEFAULT;
	/* 20.0 Mcps */
	pdata->phasecal_config_timeout_us                  =
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003344:	605a      	str	r2, [r3, #4]
			VL53L1_TUNINGPARM_OFFSET_CAL_PHASECAL_TIMEOUT_US_DEFAULT;
	/* 1000 us */
	pdata->range_config_timeout_us                     =
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f243 22c8 	movw	r2, #13000	; 0x32c8
 800334c:	609a      	str	r2, [r3, #8]
			VL53L1_TUNINGPARM_OFFSET_CAL_RANGE_TIMEOUT_US_DEFAULT;
	/* 13000 us */
	pdata->mm_config_timeout_us                        =
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f243 22c8 	movw	r2, #13000	; 0x32c8
 8003354:	60da      	str	r2, [r3, #12]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM_TIMEOUT_US_DEFAULT;
	/* 13000 us - Added as part of Patch_AddedOffsetCalMMTuningParm_11791 */

	/* Init number of averaged samples */

	pdata->pre_num_of_samples                          =
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2208      	movs	r2, #8
 800335a:	741a      	strb	r2, [r3, #16]
			VL53L1_TUNINGPARM_OFFSET_CAL_PRE_SAMPLES_DEFAULT;
	pdata->mm1_num_of_samples                          =
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2228      	movs	r2, #40	; 0x28
 8003360:	745a      	strb	r2, [r3, #17]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM1_SAMPLES_DEFAULT;
	pdata->mm2_num_of_samples                          =
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2209      	movs	r2, #9
 8003366:	749a      	strb	r2, [r3, #18]
			VL53L1_TUNINGPARM_OFFSET_CAL_MM2_SAMPLES_DEFAULT;

	LOG_FUNCTION_END(status);

	return status;
 8003368:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800336c:	4618      	mov	r0, r3
 800336e:	3714      	adds	r7, #20
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr

08003378 <VL53L1_init_tuning_parm_storage_struct>:
#endif

VL53L1_Error VL53L1_init_tuning_parm_storage_struct(
	VL53L1_tuning_parm_storage_t   *pdata)
{
 8003378:	b480      	push	{r7}
 800337a:	b085      	sub	sp, #20
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes  Tuning Param storage structure
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003380:	2300      	movs	r3, #0
 8003382:	73fb      	strb	r3, [r7, #15]
	 *
	 * - Custom overwrite possible from vl53l1_set_tuning_parms()
	 * - via tuning file input
	 */

	pdata->tp_tuning_parm_version              =
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f248 0203 	movw	r2, #32771	; 0x8003
 800338a:	801a      	strh	r2, [r3, #0]
			VL53L1_TUNINGPARM_VERSION_DEFAULT;
	pdata->tp_tuning_parm_key_table_version    =
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f248 0201 	movw	r2, #32769	; 0x8001
 8003392:	805a      	strh	r2, [r3, #2]
			VL53L1_TUNINGPARM_KEY_TABLE_VERSION_DEFAULT;
	pdata->tp_tuning_parm_lld_version          =
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	f248 0241 	movw	r2, #32833	; 0x8041
 800339a:	809a      	strh	r2, [r3, #4]
			VL53L1_TUNINGPARM_LLD_VERSION_DEFAULT;
	pdata->tp_init_phase_rtn_lite_long         =
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	220e      	movs	r2, #14
 80033a0:	719a      	strb	r2, [r3, #6]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_med          =
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	220a      	movs	r2, #10
 80033a6:	71da      	strb	r2, [r3, #7]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_rtn_lite_short        =
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2206      	movs	r2, #6
 80033ac:	721a      	strb	r2, [r3, #8]
			VL53L1_TUNINGPARM_INITIAL_PHASE_RTN_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_long         =
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	220e      	movs	r2, #14
 80033b2:	725a      	strb	r2, [r3, #9]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_LONG_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_med          =
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	220a      	movs	r2, #10
 80033b8:	729a      	strb	r2, [r3, #10]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_MED_RANGE_DEFAULT;
	pdata->tp_init_phase_ref_lite_short        =
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2206      	movs	r2, #6
 80033be:	72da      	strb	r2, [r3, #11]
			VL53L1_TUNINGPARM_INITIAL_PHASE_REF_LITE_SHORT_RANGE_DEFAULT;
	pdata->tp_consistency_lite_phase_tolerance =
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2202      	movs	r2, #2
 80033c4:	731a      	strb	r2, [r3, #12]
			VL53L1_TUNINGPARM_CONSISTENCY_LITE_PHASE_TOLERANCE_DEFAULT;
	pdata->tp_phasecal_target                  =
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2221      	movs	r2, #33	; 0x21
 80033ca:	735a      	strb	r2, [r3, #13]
			VL53L1_TUNINGPARM_PHASECAL_TARGET_DEFAULT;
	pdata->tp_cal_repeat_rate                  =
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	81da      	strh	r2, [r3, #14]
			VL53L1_TUNINGPARM_LITE_CAL_REPEAT_RATE_DEFAULT;
	pdata->tp_lite_min_clip                    =
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	741a      	strb	r2, [r3, #16]
			VL53L1_TUNINGPARM_LITE_MIN_CLIP_MM_DEFAULT;
	pdata->tp_lite_long_sigma_thresh_mm        =
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80033de:	825a      	strh	r2, [r3, #18]
			VL53L1_TUNINGPARM_LITE_LONG_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_med_sigma_thresh_mm         =
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80033e6:	829a      	strh	r2, [r3, #20]
			VL53L1_TUNINGPARM_LITE_MED_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_short_sigma_thresh_mm       =
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80033ee:	82da      	strh	r2, [r3, #22]
			VL53L1_TUNINGPARM_LITE_SHORT_SIGMA_THRESH_MM_DEFAULT;
	pdata->tp_lite_long_min_count_rate_rtn_mcps  =
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	22c0      	movs	r2, #192	; 0xc0
 80033f4:	831a      	strh	r2, [r3, #24]
			VL53L1_TUNINGPARM_LITE_LONG_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_med_min_count_rate_rtn_mcps   =
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	22c0      	movs	r2, #192	; 0xc0
 80033fa:	835a      	strh	r2, [r3, #26]
			VL53L1_TUNINGPARM_LITE_MED_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_short_min_count_rate_rtn_mcps =
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	22c0      	movs	r2, #192	; 0xc0
 8003400:	839a      	strh	r2, [r3, #28]
			VL53L1_TUNINGPARM_LITE_SHORT_MIN_COUNT_RATE_RTN_MCPS_DEFAULT;
	pdata->tp_lite_sigma_est_pulse_width_ns      =
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2208      	movs	r2, #8
 8003406:	779a      	strb	r2, [r3, #30]
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_PULSE_WIDTH_DEFAULT;
	pdata->tp_lite_sigma_est_amb_width_ns        =
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2210      	movs	r2, #16
 800340c:	77da      	strb	r2, [r3, #31]
			VL53L1_TUNINGPARM_LITE_SIGMA_EST_AMB_WIDTH_NS_DEFAULT;
	pdata->tp_lite_sigma_ref_mm                  =
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2201      	movs	r2, #1
 8003412:	f883 2020 	strb.w	r2, [r3, #32]
			VL53L1_TUNINGPARM_LITE_SIGMA_REF_MM_DEFAULT;
	pdata->tp_lite_seed_cfg                      =
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2202      	movs	r2, #2
 800341a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			VL53L1_TUNINGPARM_LITE_SEED_CONFIG_DEFAULT;
	pdata->tp_timed_seed_cfg                     =
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2201      	movs	r2, #1
 8003422:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			VL53L1_TUNINGPARM_TIMED_SEED_CONFIG_DEFAULT;
	pdata->tp_lite_quantifier                    =
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2202      	movs	r2, #2
 800342a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
			VL53L1_TUNINGPARM_LITE_QUANTIFIER_DEFAULT;
	pdata->tp_lite_first_order_select            =
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			VL53L1_TUNINGPARM_LITE_FIRST_ORDER_SELECT_DEFAULT;

	/* Preset Mode Configurations */
	/* - New parms added as part of Patch_TuningParmPresetModeAddition_11839 */

	pdata->tp_dss_target_lite_mcps               =
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800343c:	84da      	strh	r2, [r3, #38]	; 0x26
			VL53L1_TUNINGPARM_LITE_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_dss_target_timed_mcps              =
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8003444:	851a      	strh	r2, [r3, #40]	; 0x28
			VL53L1_TUNINGPARM_TIMED_DSS_CONFIG_TARGET_TOTAL_RATE_MCPS_DEFAULT;
	pdata->tp_phasecal_timeout_lite_us           =
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	f248 0230 	movw	r2, #32816	; 0x8030
 800344c:	62da      	str	r2, [r3, #44]	; 0x2c
			VL53L1_TUNINGPARM_LITE_PHASECAL_CONFIG_TIMEOUT_US;
	pdata->tp_phasecal_timeout_timed_us          =
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003454:	631a      	str	r2, [r3, #48]	; 0x30
			VL53L1_TUNINGPARM_TIMED_PHASECAL_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_lite_us                 =
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800345c:	635a      	str	r2, [r3, #52]	; 0x34
			VL53L1_TUNINGPARM_LITE_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_mm_timeout_timed_us                =
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003464:	639a      	str	r2, [r3, #56]	; 0x38
			VL53L1_TUNINGPARM_TIMED_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lite_us              =
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f24f 6218 	movw	r2, #63000	; 0xf618
 800346c:	641a      	str	r2, [r3, #64]	; 0x40
			VL53L1_TUNINGPARM_LITE_RANGE_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_timed_us             =
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f243 22c8 	movw	r2, #13000	; 0x32c8
 8003474:	645a      	str	r2, [r3, #68]	; 0x44
			VL53L1_TUNINGPARM_TIMED_RANGE_CONFIG_TIMEOUT_US_DEFAULT;

	/* Added for Patch_LowPowerAutoMode */

	pdata->tp_mm_timeout_lpa_us =
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2201      	movs	r2, #1
 800347a:	63da      	str	r2, [r3, #60]	; 0x3c
			VL53L1_TUNINGPARM_LOWPOWERAUTO_MM_CONFIG_TIMEOUT_US_DEFAULT;
	pdata->tp_range_timeout_lpa_us =
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8003482:	649a      	str	r2, [r3, #72]	; 0x48
			VL53L1_TUNINGPARM_LOWPOWERAUTO_RANGE_CONFIG_TIMEOUT_US_DEFAULT;


	LOG_FUNCTION_END(status);

	return status;
 8003484:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003488:	4618      	mov	r0, r3
 800348a:	3714      	adds	r7, #20
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr

08003494 <VL53L1_preset_mode_standard_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8003494:	b480      	push	{r7}
 8003496:	b087      	sub	sp, #28
 8003498:	af00      	add	r7, sp, #0
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	60b9      	str	r1, [r7, #8]
 800349e:	607a      	str	r2, [r7, #4]
 80034a0:	603b      	str	r3, [r7, #0]
	 *  - back to back
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80034a2:	2300      	movs	r3, #0
 80034a4:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	/* Static Configuration */

	/* dss_config__target_total_rate_mcps = 20.0 Mcps 9.7 fp */
	pstatic->dss_config__target_total_rate_mcps               = 0x0A00;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 80034ac:	801a      	strh	r2, [r3, #0]
	pstatic->debug__ctrl                                      = 0x00;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2200      	movs	r2, #0
 80034b2:	709a      	strb	r2, [r3, #2]
	pstatic->test_mode__ctrl                                  = 0x00;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2200      	movs	r2, #0
 80034b8:	70da      	strb	r2, [r3, #3]
	pstatic->clk_gating__ctrl                                 = 0x00;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2200      	movs	r2, #0
 80034be:	711a      	strb	r2, [r3, #4]
	pstatic->nvm_bist__ctrl                                   = 0x00;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2200      	movs	r2, #0
 80034c4:	715a      	strb	r2, [r3, #5]
	pstatic->nvm_bist__num_nvm_words                          = 0x00;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2200      	movs	r2, #0
 80034ca:	719a      	strb	r2, [r3, #6]
	pstatic->nvm_bist__start_address                          = 0x00;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2200      	movs	r2, #0
 80034d0:	71da      	strb	r2, [r3, #7]
	pstatic->host_if__status                                  = 0x00;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2200      	movs	r2, #0
 80034d6:	721a      	strb	r2, [r3, #8]
	pstatic->pad_i2c_hv__config                               = 0x00;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2200      	movs	r2, #0
 80034dc:	725a      	strb	r2, [r3, #9]
	pstatic->pad_i2c_hv__extsup_config                        = 0x00;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2200      	movs	r2, #0
 80034e2:	729a      	strb	r2, [r3, #10]

	/*
	 *  0 - gpio__extsup_hv
	 *  1 - gpio__vmodeint_hv
	 */
	pstatic->gpio_hv_pad__ctrl                                = 0x00;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2200      	movs	r2, #0
 80034e8:	72da      	strb	r2, [r3, #11]
	 * Set interrupt active low
	 *
	 *  3:0 - gpio__mux_select_hv
	 *    4 - gpio__mux_active_high_hv
	 */
	pstatic->gpio_hv_mux__ctrl  = \
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2211      	movs	r2, #17
 80034ee:	731a      	strb	r2, [r3, #12]
			VL53L1_DEVICEINTERRUPTPOLARITY_ACTIVE_LOW | \
			VL53L1_DEVICEGPIOMODE_OUTPUT_RANGE_AND_ERROR_INTERRUPTS;

	pstatic->gpio__tio_hv_status                              = 0x02;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2202      	movs	r2, #2
 80034f4:	735a      	strb	r2, [r3, #13]
	pstatic->gpio__fio_hv_status                              = 0x00;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2200      	movs	r2, #0
 80034fa:	739a      	strb	r2, [r3, #14]
	pstatic->ana_config__spad_sel_pswidth                     = 0x02;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2202      	movs	r2, #2
 8003500:	73da      	strb	r2, [r3, #15]
	pstatic->ana_config__vcsel_pulse_width_offset             = 0x08;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2208      	movs	r2, #8
 8003506:	741a      	strb	r2, [r3, #16]
	pstatic->ana_config__fast_osc__config_ctrl                = 0x00;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2200      	movs	r2, #0
 800350c:	745a      	strb	r2, [r3, #17]

	pstatic->sigma_estimator__effective_pulse_width_ns        =
			ptuning_parms->tp_lite_sigma_est_pulse_width_ns;
 800350e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003510:	7f9a      	ldrb	r2, [r3, #30]
	pstatic->sigma_estimator__effective_pulse_width_ns        =
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	749a      	strb	r2, [r3, #18]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
			ptuning_parms->tp_lite_sigma_est_amb_width_ns;
 8003516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003518:	7fda      	ldrb	r2, [r3, #31]
	pstatic->sigma_estimator__effective_ambient_width_ns      =
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	74da      	strb	r2, [r3, #19]
	pstatic->sigma_estimator__sigma_ref_mm                    =
			ptuning_parms->tp_lite_sigma_ref_mm;
 800351e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003520:	f893 2020 	ldrb.w	r2, [r3, #32]
	pstatic->sigma_estimator__sigma_ref_mm                    =
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	751a      	strb	r2, [r3, #20]
	/* Minimum allowable value of 1 - 0 disables the feature */
	pstatic->algo__crosstalk_compensation_valid_height_mm     = 0x01;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2201      	movs	r2, #1
 800352c:	755a      	strb	r2, [r3, #21]
	pstatic->spare_host_config__static_config_spare_0         = 0x00;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2200      	movs	r2, #0
 8003532:	759a      	strb	r2, [r3, #22]
	pstatic->spare_host_config__static_config_spare_1         = 0x00;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2200      	movs	r2, #0
 8003538:	75da      	strb	r2, [r3, #23]

	pstatic->algo__range_ignore_threshold_mcps                = 0x0000;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2200      	movs	r2, #0
 800353e:	831a      	strh	r2, [r3, #24]

	/* set RIT distance to 20 mm */
	pstatic->algo__range_ignore_valid_height_mm               = 0xff;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	22ff      	movs	r2, #255	; 0xff
 8003544:	769a      	strb	r2, [r3, #26]
	pstatic->algo__range_min_clip                             =
			ptuning_parms->tp_lite_min_clip;
 8003546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003548:	7c1a      	ldrb	r2, [r3, #16]
	pstatic->algo__range_min_clip                             =
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	76da      	strb	r2, [r3, #27]
	 * Phase consistency check limit - format 1.3 fp
	 * 0x02 -> 0.25
	 * 0x08 -> 1.00
	 */
	pstatic->algo__consistency_check__tolerance               =
			ptuning_parms->tp_consistency_lite_phase_tolerance;
 800354e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003550:	7b1a      	ldrb	r2, [r3, #12]
	pstatic->algo__consistency_check__tolerance               =
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	771a      	strb	r2, [r3, #28]
	pstatic->spare_host_config__static_config_spare_2         = 0x00;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2200      	movs	r2, #0
 800355a:	775a      	strb	r2, [r3, #29]
	pstatic->sd_config__reset_stages_msb                      = 0x00;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2200      	movs	r2, #0
 8003560:	779a      	strb	r2, [r3, #30]
	pstatic->sd_config__reset_stages_lsb                      = 0x00;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2200      	movs	r2, #0
 8003566:	77da      	strb	r2, [r3, #31]

	pgeneral->gph_config__stream_count_update_value           = 0x00;
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	2200      	movs	r2, #0
 800356c:	701a      	strb	r2, [r3, #0]
	pgeneral->global_config__stream_divider                   = 0x00;
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	2200      	movs	r2, #0
 8003572:	705a      	strb	r2, [r3, #1]
	pgeneral->system__interrupt_config_gpio =
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	2220      	movs	r2, #32
 8003578:	709a      	strb	r2, [r3, #2]
			VL53L1_INTERRUPT_CONFIG_NEW_SAMPLE_READY;
	pgeneral->cal_config__vcsel_start                         = 0x0B;
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	220b      	movs	r2, #11
 800357e:	70da      	strb	r2, [r3, #3]
	 * 60 * 60 ranges (once every minute @ 60Hz)
	 * 0 - disables
	 * 12-bit value -> 4095 max
	 */
	pgeneral->cal_config__repeat_rate                         =
			ptuning_parms->tp_cal_repeat_rate;
 8003580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003582:	89da      	ldrh	r2, [r3, #14]
	pgeneral->cal_config__repeat_rate                         =
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	809a      	strh	r2, [r3, #4]
	pgeneral->global_config__vcsel_width                      = 0x02;
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	2202      	movs	r2, #2
 800358c:	719a      	strb	r2, [r3, #6]
	/* 13 macro periods gives a timeout of 1ms */
	pgeneral->phasecal_config__timeout_macrop                 = 0x0D;
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	220d      	movs	r2, #13
 8003592:	71da      	strb	r2, [r3, #7]
	/* Phase cal target phase 2.0625 - 4.4 fp -> 0x21*/
	pgeneral->phasecal_config__target                         =
			ptuning_parms->tp_phasecal_target;
 8003594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003596:	7b5a      	ldrb	r2, [r3, #13]
	pgeneral->phasecal_config__target                         =
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	721a      	strb	r2, [r3, #8]
	pgeneral->phasecal_config__override                       = 0x00;
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	2200      	movs	r2, #0
 80035a0:	725a      	strb	r2, [r3, #9]
	pgeneral->dss_config__roi_mode_control =
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	2201      	movs	r2, #1
 80035a6:	729a      	strb	r2, [r3, #10]
			VL53L1_DEVICEDSSMODE__TARGET_RATE;
	/* format for threshold high and low is 9.7 fp */
	pgeneral->system__thresh_rate_high                        = 0x0000;
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	2200      	movs	r2, #0
 80035ac:	819a      	strh	r2, [r3, #12]
	pgeneral->system__thresh_rate_low                         = 0x0000;
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	2200      	movs	r2, #0
 80035b2:	81da      	strh	r2, [r3, #14]
	/* The format for manual effective spads is 8.8 -> 0x8C00 = 140.00 */
	pgeneral->dss_config__manual_effective_spads_select       = 0x8C00;
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	f44f 420c 	mov.w	r2, #35840	; 0x8c00
 80035ba:	821a      	strh	r2, [r3, #16]
	pgeneral->dss_config__manual_block_select                 = 0x00;
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	2200      	movs	r2, #0
 80035c0:	749a      	strb	r2, [r3, #18]
	 * Aperture attenuation value - format 0.8
	 *
	 * Nominal:  5x   -> 0.200000 * 256 = 51 = 0x33
	 * Measured: 4.6x -> 0.217391 * 256 = 56 = 0x38
	 */
	pgeneral->dss_config__aperture_attenuation                = 0x38;
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	2238      	movs	r2, #56	; 0x38
 80035c6:	74da      	strb	r2, [r3, #19]
	pgeneral->dss_config__max_spads_limit                     = 0xFF;
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	22ff      	movs	r2, #255	; 0xff
 80035cc:	751a      	strb	r2, [r3, #20]
	pgeneral->dss_config__min_spads_limit                     = 0x01;
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	2201      	movs	r2, #1
 80035d2:	755a      	strb	r2, [r3, #21]

	/* Timing Configuration */

	/* Default timing of 2ms */
	ptiming->mm_config__timeout_macrop_a_hi                   = 0x00;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2200      	movs	r2, #0
 80035d8:	701a      	strb	r2, [r3, #0]
	ptiming->mm_config__timeout_macrop_a_lo                   = 0x1a;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	221a      	movs	r2, #26
 80035de:	705a      	strb	r2, [r3, #1]
	ptiming->mm_config__timeout_macrop_b_hi                   = 0x00;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	709a      	strb	r2, [r3, #2]
	ptiming->mm_config__timeout_macrop_b_lo                   = 0x20;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2220      	movs	r2, #32
 80035ea:	70da      	strb	r2, [r3, #3]
	/* Setup for 30ms default */
	ptiming->range_config__timeout_macrop_a_hi                = 0x01;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2201      	movs	r2, #1
 80035f0:	711a      	strb	r2, [r3, #4]
	ptiming->range_config__timeout_macrop_a_lo                = 0xCC;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	22cc      	movs	r2, #204	; 0xcc
 80035f6:	715a      	strb	r2, [r3, #5]
	/* register value 11 gives a 24 VCSEL period */
	ptiming->range_config__vcsel_period_a                     = 0x0B;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	220b      	movs	r2, #11
 80035fc:	719a      	strb	r2, [r3, #6]
	/* Setup for 30ms default */
	ptiming->range_config__timeout_macrop_b_hi                = 0x01;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2201      	movs	r2, #1
 8003602:	71da      	strb	r2, [r3, #7]
	ptiming->range_config__timeout_macrop_b_lo                = 0xF5;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	22f5      	movs	r2, #245	; 0xf5
 8003608:	721a      	strb	r2, [r3, #8]
	/* register value  09 gives a 20 VCSEL period */
	ptiming->range_config__vcsel_period_b                     = 0x09;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2209      	movs	r2, #9
 800360e:	725a      	strb	r2, [r3, #9]
	 *
	 * 0x003C -> 15.0 mm
	 * 0x0050 -> 20.0 mm
	 */
	ptiming->range_config__sigma_thresh                       =
			ptuning_parms->tp_lite_med_sigma_thresh_mm;
 8003610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003612:	8a9a      	ldrh	r2, [r3, #20]
	ptiming->range_config__sigma_thresh                       =
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	815a      	strh	r2, [r3, #10]
	 *  Rate Limit - format 9.7fp
	 *  0x0020 -> 0.250 Mcps
	 *  0x0080 -> 1.000 Mcps
	 */
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
			ptuning_parms->tp_lite_med_min_count_rate_rtn_mcps;
 8003618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361a:	8b5a      	ldrh	r2, [r3, #26]
	ptiming->range_config__min_count_rate_rtn_limit_mcps      =
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	819a      	strh	r2, [r3, #12]

	/* Phase limit register formats = 5.3
	 * low   = 0x08 ->  1.0
	 * high  = 0x78 -> 15.0 -> 3.0m
	 */
	ptiming->range_config__valid_phase_low                    = 0x08;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2208      	movs	r2, #8
 8003624:	739a      	strb	r2, [r3, #14]
	ptiming->range_config__valid_phase_high                   = 0x78;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2278      	movs	r2, #120	; 0x78
 800362a:	73da      	strb	r2, [r3, #15]
	ptiming->system__intermeasurement_period                  = 0x00000000;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	611a      	str	r2, [r3, #16]
	ptiming->system__fractional_enable                        = 0x00;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	751a      	strb	r2, [r3, #20]

	/* Dynamic Configuration */

	pdynamic->system__grouped_parameter_hold_0                 = 0x01;
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	2201      	movs	r2, #1
 800363c:	701a      	strb	r2, [r3, #0]

	pdynamic->system__thresh_high                              = 0x0000;
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	2200      	movs	r2, #0
 8003642:	805a      	strh	r2, [r3, #2]
	pdynamic->system__thresh_low                               = 0x0000;
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	2200      	movs	r2, #0
 8003648:	809a      	strh	r2, [r3, #4]
	pdynamic->system__enable_xtalk_per_quadrant                = 0x00;
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	2200      	movs	r2, #0
 800364e:	719a      	strb	r2, [r3, #6]
	pdynamic->system__seed_config =
			ptuning_parms->tp_lite_seed_cfg;
 8003650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003652:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
	pdynamic->system__seed_config =
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	71da      	strb	r2, [r3, #7]

	/* Timing A */
	pdynamic->sd_config__woi_sd0                               = 0x0B;
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	220b      	movs	r2, #11
 800365e:	721a      	strb	r2, [r3, #8]
	/* Timing B */
	pdynamic->sd_config__woi_sd1                               = 0x09;
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	2209      	movs	r2, #9
 8003664:	725a      	strb	r2, [r3, #9]

	pdynamic->sd_config__initial_phase_sd0                     =
			ptuning_parms->tp_init_phase_rtn_lite_med;
 8003666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003668:	79da      	ldrb	r2, [r3, #7]
	pdynamic->sd_config__initial_phase_sd0                     =
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	729a      	strb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
			ptuning_parms->tp_init_phase_ref_lite_med;;
 800366e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003670:	7a9a      	ldrb	r2, [r3, #10]
	pdynamic->sd_config__initial_phase_sd1                     =
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	72da      	strb	r2, [r3, #11]

	pdynamic->system__grouped_parameter_hold_1                 = 0x01;
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	2201      	movs	r2, #1
 800367a:	731a      	strb	r2, [r3, #12]
	 *
	 *  Setting below 2nd order, Quantifier = 1024
	 */

	pdynamic->sd_config__first_order_select =
			ptuning_parms->tp_lite_first_order_select;
 800367c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367e:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
	pdynamic->sd_config__first_order_select =
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	735a      	strb	r2, [r3, #13]
	pdynamic->sd_config__quantifier         =
			ptuning_parms->tp_lite_quantifier;
 8003686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003688:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
	pdynamic->sd_config__quantifier         =
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	739a      	strb	r2, [r3, #14]

	/* Below defaults will be overwritten by zone_cfg
	 * Spad no = 199 (0xC7)
	 * Spad no =  63 (0x3F)
	 */
	pdynamic->roi_config__user_roi_centre_spad              = 0xC7;
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	22c7      	movs	r2, #199	; 0xc7
 8003694:	73da      	strb	r2, [r3, #15]
	/* 16x16 ROI */
	pdynamic->roi_config__user_roi_requested_global_xy_size = 0xFF;
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	22ff      	movs	r2, #255	; 0xff
 800369a:	741a      	strb	r2, [r3, #16]


	pdynamic->system__sequence_config                          = \
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	22db      	movs	r2, #219	; 0xdb
 80036a0:	745a      	strb	r2, [r3, #17]
			VL53L1_SEQUENCE_DSS1_EN | \
			VL53L1_SEQUENCE_DSS2_EN | \
			VL53L1_SEQUENCE_MM2_EN | \
			VL53L1_SEQUENCE_RANGE_EN;

	pdynamic->system__grouped_parameter_hold                   = 0x02;
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	2202      	movs	r2, #2
 80036a6:	749a      	strb	r2, [r3, #18]

	/* System control */


	psystem->system__stream_count_ctrl                         = 0x00;
 80036a8:	6a3b      	ldr	r3, [r7, #32]
 80036aa:	2200      	movs	r2, #0
 80036ac:	705a      	strb	r2, [r3, #1]
	psystem->firmware__enable                                  = 0x01;
 80036ae:	6a3b      	ldr	r3, [r7, #32]
 80036b0:	2201      	movs	r2, #1
 80036b2:	709a      	strb	r2, [r3, #2]
	psystem->system__interrupt_clear                           = \
 80036b4:	6a3b      	ldr	r3, [r7, #32]
 80036b6:	2201      	movs	r2, #1
 80036b8:	70da      	strb	r2, [r3, #3]
			VL53L1_CLEAR_RANGE_INT;

	psystem->system__mode_start                                = \
 80036ba:	6a3b      	ldr	r3, [r7, #32]
 80036bc:	2221      	movs	r2, #33	; 0x21
 80036be:	711a      	strb	r2, [r3, #4]
			VL53L1_DEVICEREADOUTMODE_SINGLE_SD | \
			VL53L1_DEVICEMEASUREMENTMODE_BACKTOBACK;

	LOG_FUNCTION_END(status);

	return status;
 80036c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	371c      	adds	r7, #28
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr

080036d0 <VL53L1_preset_mode_standard_ranging_short_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b088      	sub	sp, #32
 80036d4:	af02      	add	r7, sp, #8
 80036d6:	60f8      	str	r0, [r7, #12]
 80036d8:	60b9      	str	r1, [r7, #8]
 80036da:	607a      	str	r2, [r7, #4]
 80036dc:	603b      	str	r3, [r7, #0]
	 * (up to 1.4 metres)
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80036de:	2300      	movs	r3, #0
 80036e0:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration followed by
	 * overrides for the  short range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 80036e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e4:	9301      	str	r3, [sp, #4]
 80036e6:	6a3b      	ldr	r3, [r7, #32]
 80036e8:	9300      	str	r3, [sp, #0]
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	68b9      	ldr	r1, [r7, #8]
 80036f0:	68f8      	ldr	r0, [r7, #12]
 80036f2:	f7ff fecf 	bl	8003494 <VL53L1_preset_mode_standard_ranging>
 80036f6:	4603      	mov	r3, r0
 80036f8:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 80036fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d121      	bne.n	8003746 <VL53L1_preset_mode_standard_ranging_short_range+0x76>
		 * min_count_rate_rtn_limit_mcps = 0x0080 ->  9.7fp ->  1.0 Mcps
		 * valid_phase_low               = 0x08 -> 5.3fp -> 1.0
		 * valid_phase_high              = 0x38 -> 5.3fp -> 7.0 -> 1.4m
		 */

		ptiming->range_config__vcsel_period_a                = 0x07;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2207      	movs	r2, #7
 8003706:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b                = 0x05;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2205      	movs	r2, #5
 800370c:	725a      	strb	r2, [r3, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_short_sigma_thresh_mm;
 800370e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003710:	8ada      	ldrh	r2, [r3, #22]
		ptiming->range_config__sigma_thresh                  =
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	815a      	strh	r2, [r3, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
				ptuning_parms->tp_lite_short_min_count_rate_rtn_mcps;
 8003716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003718:	8b9a      	ldrh	r2, [r3, #28]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	819a      	strh	r2, [r3, #12]
		ptiming->range_config__valid_phase_low               = 0x08;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2208      	movs	r2, #8
 8003722:	739a      	strb	r2, [r3, #14]
		ptiming->range_config__valid_phase_high              = 0x38;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2238      	movs	r2, #56	; 0x38
 8003728:	73da      	strb	r2, [r3, #15]
		/* Dynamic Configuration
		 * SD0 -> Timing A
		 * SD1 -> Timing B
		 */

		pdynamic->sd_config__woi_sd0                         = 0x07;
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	2207      	movs	r2, #7
 800372e:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1                         = 0x05;
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	2205      	movs	r2, #5
 8003734:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_short;
 8003736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003738:	7a1a      	ldrb	r2, [r3, #8]
		pdynamic->sd_config__initial_phase_sd0               =
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_short;
 800373e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003740:	7ada      	ldrb	r2, [r3, #11]
		pdynamic->sd_config__initial_phase_sd1               =
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
 8003746:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800374a:	4618      	mov	r0, r3
 800374c:	3718      	adds	r7, #24
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}

08003752 <VL53L1_preset_mode_standard_ranging_long_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8003752:	b580      	push	{r7, lr}
 8003754:	b088      	sub	sp, #32
 8003756:	af02      	add	r7, sp, #8
 8003758:	60f8      	str	r0, [r7, #12]
 800375a:	60b9      	str	r1, [r7, #8]
 800375c:	607a      	str	r2, [r7, #4]
 800375e:	603b      	str	r3, [r7, #0]
	 * (up to 4.8 metres)
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003760:	2300      	movs	r3, #0
 8003762:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 8003764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003766:	9301      	str	r3, [sp, #4]
 8003768:	6a3b      	ldr	r3, [r7, #32]
 800376a:	9300      	str	r3, [sp, #0]
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	68b9      	ldr	r1, [r7, #8]
 8003772:	68f8      	ldr	r0, [r7, #12]
 8003774:	f7ff fe8e 	bl	8003494 <VL53L1_preset_mode_standard_ranging>
 8003778:	4603      	mov	r3, r0
 800377a:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800377c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d121      	bne.n	80037c8 <VL53L1_preset_mode_standard_ranging_long_range+0x76>
		 * min_count_rate_rtn_limit_mcps = 0x0080 ->  9.7fp ->  1.0 Mcps
		 * valid_phase_low               = 0x08 -> 5.3fp ->  1.0
		 * valid_phase_high              = 0xB8 -> 5.3fp -> 23.0 -> 4.6m
		 */

		ptiming->range_config__vcsel_period_a                = 0x0F;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	220f      	movs	r2, #15
 8003788:	719a      	strb	r2, [r3, #6]
		ptiming->range_config__vcsel_period_b                = 0x0D;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	220d      	movs	r2, #13
 800378e:	725a      	strb	r2, [r3, #9]
		ptiming->range_config__sigma_thresh                  =
				ptuning_parms->tp_lite_long_sigma_thresh_mm;
 8003790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003792:	8a5a      	ldrh	r2, [r3, #18]
		ptiming->range_config__sigma_thresh                  =
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	815a      	strh	r2, [r3, #10]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
				ptuning_parms->tp_lite_long_min_count_rate_rtn_mcps;
 8003798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379a:	8b1a      	ldrh	r2, [r3, #24]
		ptiming->range_config__min_count_rate_rtn_limit_mcps =
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	819a      	strh	r2, [r3, #12]
		ptiming->range_config__valid_phase_low               = 0x08;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2208      	movs	r2, #8
 80037a4:	739a      	strb	r2, [r3, #14]
		ptiming->range_config__valid_phase_high              = 0xB8;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	22b8      	movs	r2, #184	; 0xb8
 80037aa:	73da      	strb	r2, [r3, #15]
		/* Dynamic Configuration
		 * SD0 -> Timing A
		 * SD1 -> Timing B
		 */

		pdynamic->sd_config__woi_sd0                         = 0x0F;
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	220f      	movs	r2, #15
 80037b0:	721a      	strb	r2, [r3, #8]
		pdynamic->sd_config__woi_sd1                         = 0x0D;
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	220d      	movs	r2, #13
 80037b6:	725a      	strb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd0               =
				ptuning_parms->tp_init_phase_rtn_lite_long;
 80037b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ba:	799a      	ldrb	r2, [r3, #6]
		pdynamic->sd_config__initial_phase_sd0               =
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	729a      	strb	r2, [r3, #10]
		pdynamic->sd_config__initial_phase_sd1               =
				ptuning_parms->tp_init_phase_ref_lite_long;
 80037c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c2:	7a5a      	ldrb	r2, [r3, #9]
		pdynamic->sd_config__initial_phase_sd1               =
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	72da      	strb	r2, [r3, #11]
	}

	LOG_FUNCTION_END(status);

	return status;
 80037c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3718      	adds	r7, #24
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}

080037d4 <VL53L1_preset_mode_standard_ranging_mm1_cal>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b088      	sub	sp, #32
 80037d8:	af02      	add	r7, sp, #8
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	60b9      	str	r1, [r7, #8]
 80037de:	607a      	str	r2, [r7, #4]
 80037e0:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM1_CAL
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80037e2:	2300      	movs	r3, #0
 80037e4:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 80037e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e8:	9301      	str	r3, [sp, #4]
 80037ea:	6a3b      	ldr	r3, [r7, #32]
 80037ec:	9300      	str	r3, [sp, #0]
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	68b9      	ldr	r1, [r7, #8]
 80037f4:	68f8      	ldr	r0, [r7, #12]
 80037f6:	f7ff fe4d 	bl	8003494 <VL53L1_preset_mode_standard_ranging>
 80037fa:	4603      	mov	r3, r0
 80037fc:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 80037fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d105      	bne.n	8003812 <VL53L1_preset_mode_standard_ranging_mm1_cal+0x3e>

		pgeneral->dss_config__roi_mode_control =
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	2202      	movs	r2, #2
 800380a:	729a      	strb	r2, [r3, #10]
				VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  = \
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	223b      	movs	r2, #59	; 0x3b
 8003810:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM1_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 8003812:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003816:	4618      	mov	r0, r3
 8003818:	3718      	adds	r7, #24
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}

0800381e <VL53L1_preset_mode_standard_ranging_mm2_cal>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 800381e:	b580      	push	{r7, lr}
 8003820:	b088      	sub	sp, #32
 8003822:	af02      	add	r7, sp, #8
 8003824:	60f8      	str	r0, [r7, #12]
 8003826:	60b9      	str	r1, [r7, #8]
 8003828:	607a      	str	r2, [r7, #4]
 800382a:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_STANDARD_RANGING_MM2_CAL
	 *
	 * PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800382c:	2300      	movs	r3, #0
 800382e:	75fb      	strb	r3, [r7, #23]

	/* Call standard ranging configuration with
	 * overrides for long range configuration
	 */

	status = VL53L1_preset_mode_standard_ranging(
 8003830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003832:	9301      	str	r3, [sp, #4]
 8003834:	6a3b      	ldr	r3, [r7, #32]
 8003836:	9300      	str	r3, [sp, #0]
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	68b9      	ldr	r1, [r7, #8]
 800383e:	68f8      	ldr	r0, [r7, #12]
 8003840:	f7ff fe28 	bl	8003494 <VL53L1_preset_mode_standard_ranging>
 8003844:	4603      	mov	r3, r0
 8003846:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8003848:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d105      	bne.n	800385c <VL53L1_preset_mode_standard_ranging_mm2_cal+0x3e>

		pgeneral->dss_config__roi_mode_control =
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	2202      	movs	r2, #2
 8003854:	729a      	strb	r2, [r3, #10]
				VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		pdynamic->system__sequence_config  = \
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	225b      	movs	r2, #91	; 0x5b
 800385a:	745a      	strb	r2, [r3, #17]
				VL53L1_SEQUENCE_MM2_EN;
	}

	LOG_FUNCTION_END(status);

	return status;
 800385c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003860:	4618      	mov	r0, r3
 8003862:	3718      	adds	r7, #24
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}

08003868 <VL53L1_preset_mode_timed_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b088      	sub	sp, #32
 800386c:	af02      	add	r7, sp, #8
 800386e:	60f8      	str	r0, [r7, #12]
 8003870:	60b9      	str	r1, [r7, #8]
 8003872:	607a      	str	r2, [r7, #4]
 8003874:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003876:	2300      	movs	r3, #0
 8003878:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 800387a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387c:	9301      	str	r3, [sp, #4]
 800387e:	6a3b      	ldr	r3, [r7, #32]
 8003880:	9300      	str	r3, [sp, #0]
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	68b9      	ldr	r1, [r7, #8]
 8003888:	68f8      	ldr	r0, [r7, #12]
 800388a:	f7ff fe03 	bl	8003494 <VL53L1_preset_mode_standard_ranging>
 800388e:	4603      	mov	r3, r0
 8003890:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8003892:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d11a      	bne.n	80038d0 <VL53L1_preset_mode_timed_ranging+0x68>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	2200      	movs	r2, #0
 800389e:	749a      	strb	r2, [r3, #18]

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2200      	movs	r2, #0
 80038a4:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0xB1;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	22b1      	movs	r2, #177	; 0xb1
 80038aa:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xD4;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	22d4      	movs	r2, #212	; 0xd4
 80038b6:	721a      	strb	r2, [r3, #8]

		/* Timing Configuration */

		ptiming->system__intermeasurement_period = 0x00000600;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80038be:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 80038c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c2:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
		pdynamic->system__seed_config =
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 80038ca:	6a3b      	ldr	r3, [r7, #32]
 80038cc:	2240      	movs	r2, #64	; 0x40
 80038ce:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 80038d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3718      	adds	r7, #24
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}

080038dc <VL53L1_preset_mode_timed_ranging_short_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b088      	sub	sp, #32
 80038e0:	af02      	add	r7, sp, #8
 80038e2:	60f8      	str	r0, [r7, #12]
 80038e4:	60b9      	str	r1, [r7, #8]
 80038e6:	607a      	str	r2, [r7, #4]
 80038e8:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80038ea:	2300      	movs	r3, #0
 80038ec:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging_short_range(
 80038ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f0:	9301      	str	r3, [sp, #4]
 80038f2:	6a3b      	ldr	r3, [r7, #32]
 80038f4:	9300      	str	r3, [sp, #0]
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	68b9      	ldr	r1, [r7, #8]
 80038fc:	68f8      	ldr	r0, [r7, #12]
 80038fe:	f7ff fee7 	bl	80036d0 <VL53L1_preset_mode_standard_ranging_short_range>
 8003902:	4603      	mov	r3, r0
 8003904:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8003906:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d11a      	bne.n	8003944 <VL53L1_preset_mode_timed_ranging_short_range+0x68>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	2200      	movs	r2, #0
 8003912:	749a      	strb	r2, [r3, #18]


		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x01;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2201      	movs	r2, #1
 8003918:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0x84;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2284      	movs	r2, #132	; 0x84
 800391e:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x01;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2201      	movs	r2, #1
 8003924:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xB1;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	22b1      	movs	r2, #177	; 0xb1
 800392a:	721a      	strb	r2, [r3, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8003932:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 8003934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003936:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
		pdynamic->system__seed_config =
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 800393e:	6a3b      	ldr	r3, [r7, #32]
 8003940:	2240      	movs	r2, #64	; 0x40
 8003942:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 8003944:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003948:	4618      	mov	r0, r3
 800394a:	3718      	adds	r7, #24
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}

08003950 <VL53L1_preset_mode_timed_ranging_long_range>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b088      	sub	sp, #32
 8003954:	af02      	add	r7, sp, #8
 8003956:	60f8      	str	r0, [r7, #12]
 8003958:	60b9      	str	r1, [r7, #8]
 800395a:	607a      	str	r2, [r7, #4]
 800395c:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800395e:	2300      	movs	r3, #0
 8003960:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging_long_range(
 8003962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003964:	9301      	str	r3, [sp, #4]
 8003966:	6a3b      	ldr	r3, [r7, #32]
 8003968:	9300      	str	r3, [sp, #0]
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	68b9      	ldr	r1, [r7, #8]
 8003970:	68f8      	ldr	r0, [r7, #12]
 8003972:	f7ff feee 	bl	8003752 <VL53L1_preset_mode_standard_ranging_long_range>
 8003976:	4603      	mov	r3, r0
 8003978:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 800397a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d11a      	bne.n	80039b8 <VL53L1_preset_mode_timed_ranging_long_range+0x68>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	2200      	movs	r2, #0
 8003986:	749a      	strb	r2, [r3, #18]


		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2200      	movs	r2, #0
 800398c:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0x97;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2297      	movs	r2, #151	; 0x97
 8003992:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2200      	movs	r2, #0
 8003998:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xB1;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	22b1      	movs	r2, #177	; 0xb1
 800399e:	721a      	strb	r2, [r3, #8]

		ptiming->system__intermeasurement_period = 0x00000600;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80039a6:	611a      	str	r2, [r3, #16]
		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 80039a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039aa:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
		pdynamic->system__seed_config =
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start =
 80039b2:	6a3b      	ldr	r3, [r7, #32]
 80039b4:	2240      	movs	r2, #64	; 0x40
 80039b6:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_TIMED;
	}

	LOG_FUNCTION_END(status);

	return status;
 80039b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3718      	adds	r7, #24
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}

080039c4 <VL53L1_preset_mode_low_power_auto_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b088      	sub	sp, #32
 80039c8:	af02      	add	r7, sp, #8
 80039ca:	60f8      	str	r0, [r7, #12]
 80039cc:	60b9      	str	r1, [r7, #8]
 80039ce:	607a      	str	r2, [r7, #4]
 80039d0:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80039d2:	2300      	movs	r3, #0
 80039d4:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging(
 80039d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d8:	9301      	str	r3, [sp, #4]
 80039da:	6a3b      	ldr	r3, [r7, #32]
 80039dc:	9300      	str	r3, [sp, #0]
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	68b9      	ldr	r1, [r7, #8]
 80039e4:	68f8      	ldr	r0, [r7, #12]
 80039e6:	f7ff ff3f 	bl	8003868 <VL53L1_preset_mode_timed_ranging>
 80039ea:	4603      	mov	r3, r0
 80039ec:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 80039ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d106      	bne.n	8003a04 <VL53L1_preset_mode_low_power_auto_ranging+0x40>
		status = VL53L1_config_low_power_auto_mode(
 80039f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039f8:	6839      	ldr	r1, [r7, #0]
 80039fa:	68b8      	ldr	r0, [r7, #8]
 80039fc:	f000 ff49 	bl	8004892 <VL53L1_config_low_power_auto_mode>
 8003a00:	4603      	mov	r3, r0
 8003a02:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 8003a04:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3718      	adds	r7, #24
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <VL53L1_preset_mode_low_power_auto_short_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b088      	sub	sp, #32
 8003a14:	af02      	add	r7, sp, #8
 8003a16:	60f8      	str	r0, [r7, #12]
 8003a18:	60b9      	str	r1, [r7, #8]
 8003a1a:	607a      	str	r2, [r7, #4]
 8003a1c:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging_short_range(
 8003a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a24:	9301      	str	r3, [sp, #4]
 8003a26:	6a3b      	ldr	r3, [r7, #32]
 8003a28:	9300      	str	r3, [sp, #0]
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	68b9      	ldr	r1, [r7, #8]
 8003a30:	68f8      	ldr	r0, [r7, #12]
 8003a32:	f7ff ff53 	bl	80038dc <VL53L1_preset_mode_timed_ranging_short_range>
 8003a36:	4603      	mov	r3, r0
 8003a38:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 8003a3a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d106      	bne.n	8003a50 <VL53L1_preset_mode_low_power_auto_short_ranging+0x40>
		status = VL53L1_config_low_power_auto_mode(
 8003a42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a44:	6839      	ldr	r1, [r7, #0]
 8003a46:	68b8      	ldr	r0, [r7, #8]
 8003a48:	f000 ff23 	bl	8004892 <VL53L1_config_low_power_auto_mode>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 8003a50:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3718      	adds	r7, #24
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}

08003a5c <VL53L1_preset_mode_low_power_auto_long_ranging>:
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms,
	VL53L1_low_power_auto_data_t *plpadata)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b088      	sub	sp, #32
 8003a60:	af02      	add	r7, sp, #8
 8003a62:	60f8      	str	r0, [r7, #12]
 8003a64:	60b9      	str	r1, [r7, #8]
 8003a66:	607a      	str	r2, [r7, #4]
 8003a68:	603b      	str	r3, [r7, #0]
	*  - special low power auto mode for Presence application
	*
	*  PLEASE NOTE THE SETTINGS BELOW ARE PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_timed_ranging_long_range(
 8003a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a70:	9301      	str	r3, [sp, #4]
 8003a72:	6a3b      	ldr	r3, [r7, #32]
 8003a74:	9300      	str	r3, [sp, #0]
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	687a      	ldr	r2, [r7, #4]
 8003a7a:	68b9      	ldr	r1, [r7, #8]
 8003a7c:	68f8      	ldr	r0, [r7, #12]
 8003a7e:	f7ff ff67 	bl	8003950 <VL53L1_preset_mode_timed_ranging_long_range>
 8003a82:	4603      	mov	r3, r0
 8003a84:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now setup the low power auto mode */

	if (status == VL53L1_ERROR_NONE) {
 8003a86:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d106      	bne.n	8003a9c <VL53L1_preset_mode_low_power_auto_long_ranging+0x40>
		status = VL53L1_config_low_power_auto_mode(
 8003a8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a90:	6839      	ldr	r1, [r7, #0]
 8003a92:	68b8      	ldr	r0, [r7, #8]
 8003a94:	f000 fefd 	bl	8004892 <VL53L1_config_low_power_auto_mode>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	75fb      	strb	r3, [r7, #23]
				);
	}

	LOG_FUNCTION_END(status);

	return status;
 8003a9c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3718      	adds	r7, #24
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}

08003aa8 <VL53L1_preset_mode_singleshot_ranging>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b088      	sub	sp, #32
 8003aac:	af02      	add	r7, sp, #8
 8003aae:	60f8      	str	r0, [r7, #12]
 8003ab0:	60b9      	str	r1, [r7, #8]
 8003ab2:	607a      	str	r2, [r7, #4]
 8003ab4:	603b      	str	r3, [r7, #0]
	*  - timed
	*
	*  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	*/

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 8003aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003abc:	9301      	str	r3, [sp, #4]
 8003abe:	6a3b      	ldr	r3, [r7, #32]
 8003ac0:	9300      	str	r3, [sp, #0]
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	68b9      	ldr	r1, [r7, #8]
 8003ac8:	68f8      	ldr	r0, [r7, #12]
 8003aca:	f7ff fce3 	bl	8003494 <VL53L1_preset_mode_standard_ranging>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	75fb      	strb	r3, [r7, #23]
		psystem,
		ptuning_parms);

	/* now override standard ranging specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8003ad2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d116      	bne.n	8003b08 <VL53L1_preset_mode_singleshot_ranging+0x60>

		/* Dynamic Configuration */

		/* Disable GPH  */
		pdynamic->system__grouped_parameter_hold = 0x00;
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	2200      	movs	r2, #0
 8003ade:	749a      	strb	r2, [r3, #18]

		/* Timing Configuration */

		/* Re-Configure timing budget default for 13ms */
		ptiming->range_config__timeout_macrop_a_hi                = 0x00;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo                = 0xB1;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	22b1      	movs	r2, #177	; 0xb1
 8003aea:	715a      	strb	r2, [r3, #5]
		/* Setup for 13ms default */
		ptiming->range_config__timeout_macrop_b_hi                = 0x00;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2200      	movs	r2, #0
 8003af0:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo                = 0xD4;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	22d4      	movs	r2, #212	; 0xd4
 8003af6:	721a      	strb	r2, [r3, #8]

		pdynamic->system__seed_config =
				ptuning_parms->tp_timed_seed_cfg;
 8003af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afa:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
		pdynamic->system__seed_config =
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	71da      	strb	r2, [r3, #7]

		/* System control */

		/* Configure Timed/Psuedo-solo mode */
		psystem->system__mode_start = \
 8003b02:	6a3b      	ldr	r3, [r7, #32]
 8003b04:	2210      	movs	r2, #16
 8003b06:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICEMEASUREMENTMODE_SINGLESHOT;
	}

	LOG_FUNCTION_END(status);

	return status;
 8003b08:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3718      	adds	r7, #24
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}

08003b14 <VL53L1_preset_mode_olt>:
	VL53L1_general_config_t   *pgeneral,
	VL53L1_timing_config_t    *ptiming,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_system_control_t   *psystem,
	VL53L1_tuning_parm_storage_t *ptuning_parms)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b088      	sub	sp, #32
 8003b18:	af02      	add	r7, sp, #8
 8003b1a:	60f8      	str	r0, [r7, #12]
 8003b1c:	60b9      	str	r1, [r7, #8]
 8003b1e:	607a      	str	r2, [r7, #4]
 8003b20:	603b      	str	r3, [r7, #0]
	 * VL53L1_DEVICEPRESETMODE_OLT
	 *
	 *  PLEASE NOTE THE SETTINGS BELOW AT PROVISIONAL AND WILL CHANGE!
	 */

	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8003b22:	2300      	movs	r3, #0
 8003b24:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* Call standard ranging configuration */

	status = VL53L1_preset_mode_standard_ranging(
 8003b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b28:	9301      	str	r3, [sp, #4]
 8003b2a:	6a3b      	ldr	r3, [r7, #32]
 8003b2c:	9300      	str	r3, [sp, #0]
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	687a      	ldr	r2, [r7, #4]
 8003b32:	68b9      	ldr	r1, [r7, #8]
 8003b34:	68f8      	ldr	r0, [r7, #12]
 8003b36:	f7ff fcad 	bl	8003494 <VL53L1_preset_mode_standard_ranging>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	75fb      	strb	r3, [r7, #23]
					psystem,
					ptuning_parms);

	/* now override OLT specific registers */

	if (status == VL53L1_ERROR_NONE) {
 8003b3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d102      	bne.n	8003b4c <VL53L1_preset_mode_olt+0x38>

		/* Disables requirement for host handshake */
		psystem->system__stream_count_ctrl  = 0x01;
 8003b46:	6a3b      	ldr	r3, [r7, #32]
 8003b48:	2201      	movs	r2, #1
 8003b4a:	705a      	strb	r2, [r3, #1]
	}

	LOG_FUNCTION_END(status);

	return status;
 8003b4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3718      	adds	r7, #24
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}

08003b58 <VL53L1_init_version>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


void  VL53L1_init_version(
	VL53L1_DEV        Dev)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b085      	sub	sp, #20
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
	/**
	 * Initialise version structure
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	60fb      	str	r3, [r7, #12]

	pdev->version.ll_major    = VL53L1_LL_API_IMPLEMENTATION_VER_MAJOR;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2201      	movs	r2, #1
 8003b68:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pdev->version.ll_minor    = VL53L1_LL_API_IMPLEMENTATION_VER_MINOR;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2202      	movs	r2, #2
 8003b70:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	pdev->version.ll_build    = VL53L1_LL_API_IMPLEMENTATION_VER_SUB;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	220a      	movs	r2, #10
 8003b78:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pdev->version.ll_revision = VL53L1_LL_API_IMPLEMENTATION_VER_REVISION;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f44f 62e6 	mov.w	r2, #1840	; 0x730
 8003b82:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003b84:	bf00      	nop
 8003b86:	3714      	adds	r7, #20
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr

08003b90 <VL53L1_init_ll_driver_state>:


void  VL53L1_init_ll_driver_state(
	VL53L1_DEV         Dev,
	VL53L1_DeviceState device_state)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b085      	sub	sp, #20
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	460b      	mov	r3, r1
 8003b9a:	70fb      	strb	r3, [r7, #3]
	/**
	 * Initialise LL Driver state variables
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	60fb      	str	r3, [r7, #12]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	332c      	adds	r3, #44	; 0x2c
 8003ba4:	60bb      	str	r3, [r7, #8]

	pstate->cfg_device_state  = device_state;
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	78fa      	ldrb	r2, [r7, #3]
 8003baa:	701a      	strb	r2, [r3, #0]
	pstate->cfg_stream_count  = 0;
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	705a      	strb	r2, [r3, #1]
	pstate->cfg_gph_id        = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	2202      	movs	r2, #2
 8003bb6:	709a      	strb	r2, [r3, #2]
	pstate->cfg_timing_status = 0;
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	70da      	strb	r2, [r3, #3]

	pstate->rd_device_state   = device_state;
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	78fa      	ldrb	r2, [r7, #3]
 8003bc2:	711a      	strb	r2, [r3, #4]
	pstate->rd_stream_count   = 0;
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	715a      	strb	r2, [r3, #5]
	pstate->rd_gph_id         = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	2202      	movs	r2, #2
 8003bce:	719a      	strb	r2, [r3, #6]
	pstate->rd_timing_status  = 0;
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	71da      	strb	r2, [r3, #7]

}
 8003bd6:	bf00      	nop
 8003bd8:	3714      	adds	r7, #20
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr
	...

08003be4 <VL53L1_update_ll_driver_rd_state>:


VL53L1_Error  VL53L1_update_ll_driver_rd_state(
	VL53L1_DEV         Dev)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b087      	sub	sp, #28
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
	 * VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC
	 * VL53L1_DEVICESTATE_RANGING_GATHER_DATA
	 * VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA
	 */

	VL53L1_Error        status  = VL53L1_ERROR_NONE;
 8003bec:	2300      	movs	r3, #0
 8003bee:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	613b      	str	r3, [r7, #16]
	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	332c      	adds	r3, #44	; 0x2c
 8003bf8:	60fb      	str	r3, [r7, #12]

#ifdef VL53L1_LOGGING
	VL53L1_print_ll_driver_state(pstate);
#endif

	if ((pdev->sys_ctrl.system__mode_start &
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 8003c00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d10c      	bne.n	8003c22 <VL53L1_update_ll_driver_rd_state+0x3e>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->rd_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2203      	movs	r2, #3
 8003c0c:	711a      	strb	r2, [r3, #4]
		pstate->rd_stream_count  = 0;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2200      	movs	r2, #0
 8003c12:	715a      	strb	r2, [r3, #5]
		pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2202      	movs	r2, #2
 8003c18:	719a      	strb	r2, [r3, #6]
		pstate->rd_timing_status = 0;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	71da      	strb	r2, [r3, #7]
 8003c20:	e060      	b.n	8003ce4 <VL53L1_update_ll_driver_rd_state+0x100>

		/*
		 * implement read stream count
		 */

		if (pstate->rd_stream_count == 0xFF) {
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	795b      	ldrb	r3, [r3, #5]
 8003c26:	2bff      	cmp	r3, #255	; 0xff
 8003c28:	d103      	bne.n	8003c32 <VL53L1_update_ll_driver_rd_state+0x4e>
			pstate->rd_stream_count = 0x80;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2280      	movs	r2, #128	; 0x80
 8003c2e:	715a      	strb	r2, [r3, #5]
 8003c30:	e005      	b.n	8003c3e <VL53L1_update_ll_driver_rd_state+0x5a>
		} else {
			pstate->rd_stream_count++;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	795b      	ldrb	r3, [r3, #5]
 8003c36:	3301      	adds	r3, #1
 8003c38:	b2da      	uxtb	r2, r3
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	715a      	strb	r2, [r3, #5]

		/*
		 * Toggle grouped parameter hold ID
		 */

		pstate->rd_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	799b      	ldrb	r3, [r3, #6]
 8003c42:	f083 0302 	eor.w	r3, r3, #2
 8003c46:	b2da      	uxtb	r2, r3
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	719a      	strb	r2, [r3, #6]

		/* Ok now ranging  */

		switch (pstate->rd_device_state) {
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	791b      	ldrb	r3, [r3, #4]
 8003c50:	3b03      	subs	r3, #3
 8003c52:	2b05      	cmp	r3, #5
 8003c54:	d839      	bhi.n	8003cca <VL53L1_update_ll_driver_rd_state+0xe6>
 8003c56:	a201      	add	r2, pc, #4	; (adr r2, 8003c5c <VL53L1_update_ll_driver_rd_state+0x78>)
 8003c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c5c:	08003c75 	.word	0x08003c75
 8003c60:	08003ccb 	.word	0x08003ccb
 8003c64:	08003ccb 	.word	0x08003ccb
 8003c68:	08003c9f 	.word	0x08003c9f
 8003c6c:	08003cad 	.word	0x08003cad
 8003c70:	08003cb5 	.word	0x08003cb5

		case VL53L1_DEVICESTATE_SW_STANDBY:

			if ((pdev->dyn_cfg.system__grouped_parameter_hold &
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	f893 31c6 	ldrb.w	r3, [r3, #454]	; 0x1c6
 8003c7a:	f003 0302 	and.w	r3, r3, #2
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	dd03      	ble.n	8003c8a <VL53L1_update_ll_driver_rd_state+0xa6>
				VL53L1_GROUPEDPARAMETERHOLD_ID_MASK) > 0) {
				pstate->rd_device_state =
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2206      	movs	r2, #6
 8003c86:	711a      	strb	r2, [r3, #4]
 8003c88:	e002      	b.n	8003c90 <VL53L1_update_ll_driver_rd_state+0xac>
					VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC;
			} else {
				pstate->rd_device_state =
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2208      	movs	r2, #8
 8003c8e:	711a      	strb	r2, [r3, #4]
					VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;
			}

			pstate->rd_stream_count  = 0;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2200      	movs	r2, #0
 8003c94:	715a      	strb	r2, [r3, #5]
			pstate->rd_timing_status = 0;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	71da      	strb	r2, [r3, #7]

		break;
 8003c9c:	e022      	b.n	8003ce4 <VL53L1_update_ll_driver_rd_state+0x100>

		case VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC:

			pstate->rd_stream_count = 0;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	715a      	strb	r2, [r3, #5]
			pstate->rd_device_state =
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2208      	movs	r2, #8
 8003ca8:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 8003caa:	e01b      	b.n	8003ce4 <VL53L1_update_ll_driver_rd_state+0x100>

		case VL53L1_DEVICESTATE_RANGING_GATHER_DATA:

			pstate->rd_device_state =
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2208      	movs	r2, #8
 8003cb0:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 8003cb2:	e017      	b.n	8003ce4 <VL53L1_update_ll_driver_rd_state+0x100>

		case VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA:

			pstate->rd_timing_status ^= 0x01;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	79db      	ldrb	r3, [r3, #7]
 8003cb8:	f083 0301 	eor.w	r3, r3, #1
 8003cbc:	b2da      	uxtb	r2, r3
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	71da      	strb	r2, [r3, #7]

			pstate->rd_device_state =
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2208      	movs	r2, #8
 8003cc6:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_RANGING_OUTPUT_DATA;

		break;
 8003cc8:	e00c      	b.n	8003ce4 <VL53L1_update_ll_driver_rd_state+0x100>

		default:

			pstate->rd_device_state  =
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2203      	movs	r2, #3
 8003cce:	711a      	strb	r2, [r3, #4]
				VL53L1_DEVICESTATE_SW_STANDBY;
			pstate->rd_stream_count  = 0;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	715a      	strb	r2, [r3, #5]
			pstate->rd_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2202      	movs	r2, #2
 8003cda:	719a      	strb	r2, [r3, #6]
			pstate->rd_timing_status = 0;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	71da      	strb	r2, [r3, #7]

		break;
 8003ce2:	bf00      	nop
	VL53L1_print_ll_driver_state(pstate);
#endif

	LOG_FUNCTION_END(status);

	return status;
 8003ce4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	371c      	adds	r7, #28
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr

08003cf4 <VL53L1_check_ll_driver_rd_state>:


VL53L1_Error VL53L1_check_ll_driver_rd_state(
	VL53L1_DEV         Dev)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b089      	sub	sp, #36	; 0x24
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
	 * matches the state and stream count received from the device
	 *
	 * Check is only use in back to back mode
	 */

	VL53L1_Error         status = VL53L1_ERROR_NONE;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	77fb      	strb	r3, [r7, #31]
	VL53L1_LLDriverData_t  *pdev =
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	61bb      	str	r3, [r7, #24]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_ll_driver_state_t  *pstate       = &(pdev->ll_state);
 8003d04:	69bb      	ldr	r3, [r7, #24]
 8003d06:	332c      	adds	r3, #44	; 0x2c
 8003d08:	617b      	str	r3, [r7, #20]
	VL53L1_system_results_t   *psys_results = &(pdev->sys_results);
 8003d0a:	69bb      	ldr	r3, [r7, #24]
 8003d0c:	f503 73e7 	add.w	r3, r3, #462	; 0x1ce
 8003d10:	613b      	str	r3, [r7, #16]

	uint8_t   device_range_status   = 0;
 8003d12:	2300      	movs	r3, #0
 8003d14:	73fb      	strb	r3, [r7, #15]
	uint8_t   device_stream_count   = 0;
 8003d16:	2300      	movs	r3, #0
 8003d18:	73bb      	strb	r3, [r7, #14]
	uint8_t   device_gph_id         = 0;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	737b      	strb	r3, [r7, #13]
#ifdef VL53L1_LOGGING
	VL53L1_print_ll_driver_state(pstate);
#endif

	device_range_status =
			psys_results->result__range_status &
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	785b      	ldrb	r3, [r3, #1]
	device_range_status =
 8003d22:	f003 031f 	and.w	r3, r3, #31
 8003d26:	73fb      	strb	r3, [r7, #15]
			VL53L1_RANGE_STATUS__RANGE_STATUS_MASK;

	device_stream_count = psys_results->result__stream_count;
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	78db      	ldrb	r3, [r3, #3]
 8003d2c:	73bb      	strb	r3, [r7, #14]

	/* load the correct GPH ID */
	device_gph_id = (psys_results->result__interrupt_status &
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	781b      	ldrb	r3, [r3, #0]
		VL53L1_INTERRUPT_STATUS__GPH_ID_INT_STATUS_MASK) >> 4;
 8003d32:	111b      	asrs	r3, r3, #4
 8003d34:	b2db      	uxtb	r3, r3
	device_gph_id = (psys_results->result__interrupt_status &
 8003d36:	f003 0302 	and.w	r3, r3, #2
 8003d3a:	737b      	strb	r3, [r7, #13]

	/* only apply checks in back to back mode */

	if ((pdev->sys_ctrl.system__mode_start &
 8003d3c:	69bb      	ldr	r3, [r7, #24]
 8003d3e:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 8003d42:	f003 0320 	and.w	r3, r3, #32
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d017      	beq.n	8003d7a <VL53L1_check_ll_driver_rd_state+0x86>
		 *
		 * In theory the stream count should zero for the GPH interrupt
		 * but that is not the case after at abort ....
		 */

		if (pstate->rd_device_state ==
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	791b      	ldrb	r3, [r3, #4]
 8003d4e:	2b06      	cmp	r3, #6
 8003d50:	d105      	bne.n	8003d5e <VL53L1_check_ll_driver_rd_state+0x6a>
			VL53L1_DEVICESTATE_RANGING_WAIT_GPH_SYNC) {

			if (device_range_status !=
 8003d52:	7bfb      	ldrb	r3, [r7, #15]
 8003d54:	2b12      	cmp	r3, #18
 8003d56:	d010      	beq.n	8003d7a <VL53L1_check_ll_driver_rd_state+0x86>
				VL53L1_DEVICEERROR_GPHSTREAMCOUNT0READY) {
				status = VL53L1_ERROR_GPH_SYNC_CHECK_FAIL;
 8003d58:	23ef      	movs	r3, #239	; 0xef
 8003d5a:	77fb      	strb	r3, [r7, #31]
 8003d5c:	e00d      	b.n	8003d7a <VL53L1_check_ll_driver_rd_state+0x86>
			}
		} else {
			if (pstate->rd_stream_count != device_stream_count) {
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	795b      	ldrb	r3, [r3, #5]
 8003d62:	7bba      	ldrb	r2, [r7, #14]
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d001      	beq.n	8003d6c <VL53L1_check_ll_driver_rd_state+0x78>
				status = VL53L1_ERROR_STREAM_COUNT_CHECK_FAIL;
 8003d68:	23ee      	movs	r3, #238	; 0xee
 8003d6a:	77fb      	strb	r3, [r7, #31]

		/*
		 * Check Read state GPH ID
		 */

		if (pstate->rd_gph_id != device_gph_id) {
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	799b      	ldrb	r3, [r3, #6]
 8003d70:	7b7a      	ldrb	r2, [r7, #13]
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d001      	beq.n	8003d7a <VL53L1_check_ll_driver_rd_state+0x86>
			status = VL53L1_ERROR_GPH_ID_CHECK_FAIL;
 8003d76:	23ed      	movs	r3, #237	; 0xed
 8003d78:	77fb      	strb	r3, [r7, #31]

	} /* if back to back */

	LOG_FUNCTION_END(status);

	return status;
 8003d7a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3724      	adds	r7, #36	; 0x24
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr

08003d8a <VL53L1_update_ll_driver_cfg_state>:


VL53L1_Error  VL53L1_update_ll_driver_cfg_state(
	VL53L1_DEV         Dev)
{
 8003d8a:	b480      	push	{r7}
 8003d8c:	b087      	sub	sp, #28
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	6078      	str	r0, [r7, #4]
	/**
	 * State machine for configuration device state
	 */

	VL53L1_Error         status = VL53L1_ERROR_NONE;
 8003d92:	2300      	movs	r3, #0
 8003d94:	75fb      	strb	r3, [r7, #23]
	VL53L1_LLDriverData_t  *pdev =
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	613b      	str	r3, [r7, #16]
			VL53L1DevStructGetLLDriverHandle(Dev);

	VL53L1_ll_driver_state_t *pstate = &(pdev->ll_state);
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	332c      	adds	r3, #44	; 0x2c
 8003d9e:	60fb      	str	r3, [r7, #12]
	VL53L1_print_ll_driver_state(pstate);
#endif

	/* if top bits of mode start reset are zero then in standby state */

	if ((pdev->sys_ctrl.system__mode_start &
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	f893 31cc 	ldrb.w	r3, [r3, #460]	; 0x1cc
 8003da6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d10c      	bne.n	8003dc8 <VL53L1_update_ll_driver_cfg_state+0x3e>
		VL53L1_DEVICEMEASUREMENTMODE_MODE_MASK) == 0x00) {

		pstate->cfg_device_state  = VL53L1_DEVICESTATE_SW_STANDBY;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2203      	movs	r2, #3
 8003db2:	701a      	strb	r2, [r3, #0]
		pstate->cfg_stream_count  = 0;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2200      	movs	r2, #0
 8003db8:	705a      	strb	r2, [r3, #1]
		pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2202      	movs	r2, #2
 8003dbe:	709a      	strb	r2, [r3, #2]
		pstate->cfg_timing_status = 0;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	70da      	strb	r2, [r3, #3]
 8003dc6:	e03e      	b.n	8003e46 <VL53L1_update_ll_driver_cfg_state+0xbc>

		/*
		 * implement configuration stream count
		 */

		if (pstate->cfg_stream_count == 0xFF) {
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	785b      	ldrb	r3, [r3, #1]
 8003dcc:	2bff      	cmp	r3, #255	; 0xff
 8003dce:	d103      	bne.n	8003dd8 <VL53L1_update_ll_driver_cfg_state+0x4e>
			pstate->cfg_stream_count = 0x80;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2280      	movs	r2, #128	; 0x80
 8003dd4:	705a      	strb	r2, [r3, #1]
 8003dd6:	e005      	b.n	8003de4 <VL53L1_update_ll_driver_cfg_state+0x5a>
		} else {
			pstate->cfg_stream_count++;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	785b      	ldrb	r3, [r3, #1]
 8003ddc:	3301      	adds	r3, #1
 8003dde:	b2da      	uxtb	r2, r3
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	705a      	strb	r2, [r3, #1]

		/*
		 * Toggle grouped parameter hold ID
		 */

		pstate->cfg_gph_id ^= VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	789b      	ldrb	r3, [r3, #2]
 8003de8:	f083 0302 	eor.w	r3, r3, #2
 8003dec:	b2da      	uxtb	r2, r3
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	709a      	strb	r2, [r3, #2]

		/*
		 * Implement configuration state machine
		 */

		switch (pstate->cfg_device_state) {
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	781b      	ldrb	r3, [r3, #0]
 8003df6:	2b03      	cmp	r3, #3
 8003df8:	d002      	beq.n	8003e00 <VL53L1_update_ll_driver_cfg_state+0x76>
 8003dfa:	2b04      	cmp	r3, #4
 8003dfc:	d00e      	beq.n	8003e1c <VL53L1_update_ll_driver_cfg_state+0x92>
 8003dfe:	e015      	b.n	8003e2c <VL53L1_update_ll_driver_cfg_state+0xa2>

		case VL53L1_DEVICESTATE_SW_STANDBY:

			pstate->cfg_timing_status ^= 0x01;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	78db      	ldrb	r3, [r3, #3]
 8003e04:	f083 0301 	eor.w	r3, r3, #1
 8003e08:	b2da      	uxtb	r2, r3
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	70da      	strb	r2, [r3, #3]
			pstate->cfg_stream_count = 1;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2201      	movs	r2, #1
 8003e12:	705a      	strb	r2, [r3, #1]

			pstate->cfg_device_state = VL53L1_DEVICESTATE_RANGING_DSS_AUTO;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2204      	movs	r2, #4
 8003e18:	701a      	strb	r2, [r3, #0]
		break;
 8003e1a:	e014      	b.n	8003e46 <VL53L1_update_ll_driver_cfg_state+0xbc>

		case VL53L1_DEVICESTATE_RANGING_DSS_AUTO:

			pstate->cfg_timing_status ^= 0x01;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	78db      	ldrb	r3, [r3, #3]
 8003e20:	f083 0301 	eor.w	r3, r3, #1
 8003e24:	b2da      	uxtb	r2, r3
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	70da      	strb	r2, [r3, #3]

		break;
 8003e2a:	e00c      	b.n	8003e46 <VL53L1_update_ll_driver_cfg_state+0xbc>

		default:

			pstate->cfg_device_state = VL53L1_DEVICESTATE_SW_STANDBY;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2203      	movs	r2, #3
 8003e30:	701a      	strb	r2, [r3, #0]
			pstate->cfg_stream_count = 0;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2200      	movs	r2, #0
 8003e36:	705a      	strb	r2, [r3, #1]
			pstate->cfg_gph_id = VL53L1_GROUPEDPARAMETERHOLD_ID_MASK;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2202      	movs	r2, #2
 8003e3c:	709a      	strb	r2, [r3, #2]
			pstate->cfg_timing_status = 0;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2200      	movs	r2, #0
 8003e42:	70da      	strb	r2, [r3, #3]

		break;
 8003e44:	bf00      	nop
	VL53L1_print_ll_driver_state(pstate);
#endif

	LOG_FUNCTION_END(status);

	return status;
 8003e46:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	371c      	adds	r7, #28
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr

08003e56 <VL53L1_copy_rtn_good_spads_to_buffer>:


void VL53L1_copy_rtn_good_spads_to_buffer(
	VL53L1_nvm_copy_data_t  *pdata,
	uint8_t                 *pbuffer)
{
 8003e56:	b480      	push	{r7}
 8003e58:	b083      	sub	sp, #12
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	6078      	str	r0, [r7, #4]
 8003e5e:	6039      	str	r1, [r7, #0]
	/*
	 * Convenience function to copy return SPAD enables to buffer
	 */

	*(pbuffer +  0) = pdata->global_config__spad_enables_rtn_0;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	7c1a      	ldrb	r2, [r3, #16]
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  1) = pdata->global_config__spad_enables_rtn_1;
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	3301      	adds	r3, #1
 8003e6c:	687a      	ldr	r2, [r7, #4]
 8003e6e:	7c52      	ldrb	r2, [r2, #17]
 8003e70:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  2) = pdata->global_config__spad_enables_rtn_2;
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	3302      	adds	r3, #2
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	7c92      	ldrb	r2, [r2, #18]
 8003e7a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  3) = pdata->global_config__spad_enables_rtn_3;
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	3303      	adds	r3, #3
 8003e80:	687a      	ldr	r2, [r7, #4]
 8003e82:	7cd2      	ldrb	r2, [r2, #19]
 8003e84:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  4) = pdata->global_config__spad_enables_rtn_4;
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	3304      	adds	r3, #4
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	7d12      	ldrb	r2, [r2, #20]
 8003e8e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  5) = pdata->global_config__spad_enables_rtn_5;
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	3305      	adds	r3, #5
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	7d52      	ldrb	r2, [r2, #21]
 8003e98:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  6) = pdata->global_config__spad_enables_rtn_6;
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	3306      	adds	r3, #6
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	7d92      	ldrb	r2, [r2, #22]
 8003ea2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  7) = pdata->global_config__spad_enables_rtn_7;
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	3307      	adds	r3, #7
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	7dd2      	ldrb	r2, [r2, #23]
 8003eac:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  8) = pdata->global_config__spad_enables_rtn_8;
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	3308      	adds	r3, #8
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	7e12      	ldrb	r2, [r2, #24]
 8003eb6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  9) = pdata->global_config__spad_enables_rtn_9;
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	3309      	adds	r3, #9
 8003ebc:	687a      	ldr	r2, [r7, #4]
 8003ebe:	7e52      	ldrb	r2, [r2, #25]
 8003ec0:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 10) = pdata->global_config__spad_enables_rtn_10;
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	330a      	adds	r3, #10
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	7e92      	ldrb	r2, [r2, #26]
 8003eca:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 11) = pdata->global_config__spad_enables_rtn_11;
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	330b      	adds	r3, #11
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	7ed2      	ldrb	r2, [r2, #27]
 8003ed4:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 12) = pdata->global_config__spad_enables_rtn_12;
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	330c      	adds	r3, #12
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	7f12      	ldrb	r2, [r2, #28]
 8003ede:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 13) = pdata->global_config__spad_enables_rtn_13;
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	330d      	adds	r3, #13
 8003ee4:	687a      	ldr	r2, [r7, #4]
 8003ee6:	7f52      	ldrb	r2, [r2, #29]
 8003ee8:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 14) = pdata->global_config__spad_enables_rtn_14;
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	330e      	adds	r3, #14
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	7f92      	ldrb	r2, [r2, #30]
 8003ef2:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 15) = pdata->global_config__spad_enables_rtn_15;
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	330f      	adds	r3, #15
 8003ef8:	687a      	ldr	r2, [r7, #4]
 8003efa:	7fd2      	ldrb	r2, [r2, #31]
 8003efc:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 16) = pdata->global_config__spad_enables_rtn_16;
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	3310      	adds	r3, #16
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003f08:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 17) = pdata->global_config__spad_enables_rtn_17;
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	3311      	adds	r3, #17
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8003f14:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 18) = pdata->global_config__spad_enables_rtn_18;
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	3312      	adds	r3, #18
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	f892 2022 	ldrb.w	r2, [r2, #34]	; 0x22
 8003f20:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 19) = pdata->global_config__spad_enables_rtn_19;
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	3313      	adds	r3, #19
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	f892 2023 	ldrb.w	r2, [r2, #35]	; 0x23
 8003f2c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 20) = pdata->global_config__spad_enables_rtn_20;
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	3314      	adds	r3, #20
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8003f38:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 21) = pdata->global_config__spad_enables_rtn_21;
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	3315      	adds	r3, #21
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8003f44:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 22) = pdata->global_config__spad_enables_rtn_22;
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	3316      	adds	r3, #22
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
 8003f50:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 23) = pdata->global_config__spad_enables_rtn_23;
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	3317      	adds	r3, #23
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 8003f5c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 24) = pdata->global_config__spad_enables_rtn_24;
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	3318      	adds	r3, #24
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 8003f68:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 25) = pdata->global_config__spad_enables_rtn_25;
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	3319      	adds	r3, #25
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	f892 2029 	ldrb.w	r2, [r2, #41]	; 0x29
 8003f74:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 26) = pdata->global_config__spad_enables_rtn_26;
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	331a      	adds	r3, #26
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	f892 202a 	ldrb.w	r2, [r2, #42]	; 0x2a
 8003f80:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 27) = pdata->global_config__spad_enables_rtn_27;
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	331b      	adds	r3, #27
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	f892 202b 	ldrb.w	r2, [r2, #43]	; 0x2b
 8003f8c:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 28) = pdata->global_config__spad_enables_rtn_28;
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	331c      	adds	r3, #28
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8003f98:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 29) = pdata->global_config__spad_enables_rtn_29;
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	331d      	adds	r3, #29
 8003f9e:	687a      	ldr	r2, [r7, #4]
 8003fa0:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8003fa4:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 30) = pdata->global_config__spad_enables_rtn_30;
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	331e      	adds	r3, #30
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 8003fb0:	701a      	strb	r2, [r3, #0]
	*(pbuffer + 31) = pdata->global_config__spad_enables_rtn_31;
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	331f      	adds	r3, #31
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	f892 202f 	ldrb.w	r2, [r2, #47]	; 0x2f
 8003fbc:	701a      	strb	r2, [r3, #0]
}
 8003fbe:	bf00      	nop
 8003fc0:	370c      	adds	r7, #12
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr

08003fca <VL53L1_i2c_encode_uint16_t>:

void VL53L1_i2c_encode_uint16_t(
	uint16_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8003fca:	b480      	push	{r7}
 8003fcc:	b085      	sub	sp, #20
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	603a      	str	r2, [r7, #0]
 8003fd4:	80fb      	strh	r3, [r7, #6]
 8003fd6:	460b      	mov	r3, r1
 8003fd8:	80bb      	strh	r3, [r7, #4]
	/*
	 * Encodes a uint16_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	81fb      	strh	r3, [r7, #14]
	uint16_t   data = 0;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	81bb      	strh	r3, [r7, #12]

	data =  ip_value;
 8003fe2:	88fb      	ldrh	r3, [r7, #6]
 8003fe4:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count ; i++) {
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	81fb      	strh	r3, [r7, #14]
 8003fea:	e00e      	b.n	800400a <VL53L1_i2c_encode_uint16_t+0x40>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 8003fec:	88ba      	ldrh	r2, [r7, #4]
 8003fee:	89fb      	ldrh	r3, [r7, #14]
 8003ff0:	1ad3      	subs	r3, r2, r3
 8003ff2:	3b01      	subs	r3, #1
 8003ff4:	683a      	ldr	r2, [r7, #0]
 8003ff6:	4413      	add	r3, r2
 8003ff8:	89ba      	ldrh	r2, [r7, #12]
 8003ffa:	b2d2      	uxtb	r2, r2
 8003ffc:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 8003ffe:	89bb      	ldrh	r3, [r7, #12]
 8004000:	0a1b      	lsrs	r3, r3, #8
 8004002:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count ; i++) {
 8004004:	89fb      	ldrh	r3, [r7, #14]
 8004006:	3301      	adds	r3, #1
 8004008:	81fb      	strh	r3, [r7, #14]
 800400a:	89fa      	ldrh	r2, [r7, #14]
 800400c:	88bb      	ldrh	r3, [r7, #4]
 800400e:	429a      	cmp	r2, r3
 8004010:	d3ec      	bcc.n	8003fec <VL53L1_i2c_encode_uint16_t+0x22>
	}
}
 8004012:	bf00      	nop
 8004014:	3714      	adds	r7, #20
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr

0800401e <VL53L1_i2c_decode_uint16_t>:

uint16_t VL53L1_i2c_decode_uint16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800401e:	b480      	push	{r7}
 8004020:	b085      	sub	sp, #20
 8004022:	af00      	add	r7, sp, #0
 8004024:	4603      	mov	r3, r0
 8004026:	6039      	str	r1, [r7, #0]
 8004028:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a uint16_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	uint16_t   value = 0x00;
 800402a:	2300      	movs	r3, #0
 800402c:	81fb      	strh	r3, [r7, #14]

	while (count-- > 0) {
 800402e:	e00a      	b.n	8004046 <VL53L1_i2c_decode_uint16_t+0x28>
		value = (value << 8) | (uint16_t)*pbuffer++;
 8004030:	89fb      	ldrh	r3, [r7, #14]
 8004032:	021b      	lsls	r3, r3, #8
 8004034:	b21a      	sxth	r2, r3
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	1c59      	adds	r1, r3, #1
 800403a:	6039      	str	r1, [r7, #0]
 800403c:	781b      	ldrb	r3, [r3, #0]
 800403e:	b21b      	sxth	r3, r3
 8004040:	4313      	orrs	r3, r2
 8004042:	b21b      	sxth	r3, r3
 8004044:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0) {
 8004046:	88fb      	ldrh	r3, [r7, #6]
 8004048:	1e5a      	subs	r2, r3, #1
 800404a:	80fa      	strh	r2, [r7, #6]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d1ef      	bne.n	8004030 <VL53L1_i2c_decode_uint16_t+0x12>
	}

	return value;
 8004050:	89fb      	ldrh	r3, [r7, #14]
}
 8004052:	4618      	mov	r0, r3
 8004054:	3714      	adds	r7, #20
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr

0800405e <VL53L1_i2c_encode_int16_t>:

void VL53L1_i2c_encode_int16_t(
	int16_t     ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 800405e:	b480      	push	{r7}
 8004060:	b085      	sub	sp, #20
 8004062:	af00      	add	r7, sp, #0
 8004064:	4603      	mov	r3, r0
 8004066:	603a      	str	r2, [r7, #0]
 8004068:	80fb      	strh	r3, [r7, #6]
 800406a:	460b      	mov	r3, r1
 800406c:	80bb      	strh	r3, [r7, #4]
	/*
	 * Encodes a int16_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 800406e:	2300      	movs	r3, #0
 8004070:	81fb      	strh	r3, [r7, #14]
	int16_t    data = 0;
 8004072:	2300      	movs	r3, #0
 8004074:	81bb      	strh	r3, [r7, #12]

	data =  ip_value;
 8004076:	88fb      	ldrh	r3, [r7, #6]
 8004078:	81bb      	strh	r3, [r7, #12]

	for (i = 0; i < count ; i++) {
 800407a:	2300      	movs	r3, #0
 800407c:	81fb      	strh	r3, [r7, #14]
 800407e:	e00f      	b.n	80040a0 <VL53L1_i2c_encode_int16_t+0x42>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 8004080:	88ba      	ldrh	r2, [r7, #4]
 8004082:	89fb      	ldrh	r3, [r7, #14]
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	3b01      	subs	r3, #1
 8004088:	683a      	ldr	r2, [r7, #0]
 800408a:	4413      	add	r3, r2
 800408c:	89ba      	ldrh	r2, [r7, #12]
 800408e:	b2d2      	uxtb	r2, r2
 8004090:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 8004092:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004096:	121b      	asrs	r3, r3, #8
 8004098:	81bb      	strh	r3, [r7, #12]
	for (i = 0; i < count ; i++) {
 800409a:	89fb      	ldrh	r3, [r7, #14]
 800409c:	3301      	adds	r3, #1
 800409e:	81fb      	strh	r3, [r7, #14]
 80040a0:	89fa      	ldrh	r2, [r7, #14]
 80040a2:	88bb      	ldrh	r3, [r7, #4]
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d3eb      	bcc.n	8004080 <VL53L1_i2c_encode_int16_t+0x22>
	}
}
 80040a8:	bf00      	nop
 80040aa:	3714      	adds	r7, #20
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr

080040b4 <VL53L1_i2c_decode_int16_t>:

int16_t VL53L1_i2c_decode_int16_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b085      	sub	sp, #20
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	4603      	mov	r3, r0
 80040bc:	6039      	str	r1, [r7, #0]
 80040be:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a int16_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	int16_t    value = 0x00;
 80040c0:	2300      	movs	r3, #0
 80040c2:	81fb      	strh	r3, [r7, #14]

	/* implement sign extension */
	if (*pbuffer >= 0x80) {
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	781b      	ldrb	r3, [r3, #0]
 80040c8:	b25b      	sxtb	r3, r3
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	da0e      	bge.n	80040ec <VL53L1_i2c_decode_int16_t+0x38>
		value = 0xFFFF;
 80040ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80040d2:	81fb      	strh	r3, [r7, #14]
	}

	while (count-- > 0) {
 80040d4:	e00a      	b.n	80040ec <VL53L1_i2c_decode_int16_t+0x38>
		value = (value << 8) | (int16_t)*pbuffer++;
 80040d6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80040da:	021b      	lsls	r3, r3, #8
 80040dc:	b21a      	sxth	r2, r3
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	1c59      	adds	r1, r3, #1
 80040e2:	6039      	str	r1, [r7, #0]
 80040e4:	781b      	ldrb	r3, [r3, #0]
 80040e6:	b21b      	sxth	r3, r3
 80040e8:	4313      	orrs	r3, r2
 80040ea:	81fb      	strh	r3, [r7, #14]
	while (count-- > 0) {
 80040ec:	88fb      	ldrh	r3, [r7, #6]
 80040ee:	1e5a      	subs	r2, r3, #1
 80040f0:	80fa      	strh	r2, [r7, #6]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d1ef      	bne.n	80040d6 <VL53L1_i2c_decode_int16_t+0x22>
	}

	return value;
 80040f6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3714      	adds	r7, #20
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr

08004106 <VL53L1_i2c_encode_uint32_t>:

void VL53L1_i2c_encode_uint32_t(
	uint32_t    ip_value,
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8004106:	b480      	push	{r7}
 8004108:	b087      	sub	sp, #28
 800410a:	af00      	add	r7, sp, #0
 800410c:	60f8      	str	r0, [r7, #12]
 800410e:	460b      	mov	r3, r1
 8004110:	607a      	str	r2, [r7, #4]
 8004112:	817b      	strh	r3, [r7, #10]
	/*
	 * Encodes a uint32_t register value into an I2C write buffer
	 * MS byte first order (as per I2C register map.
	 */

	uint16_t   i    = 0;
 8004114:	2300      	movs	r3, #0
 8004116:	82fb      	strh	r3, [r7, #22]
	uint32_t   data = 0;
 8004118:	2300      	movs	r3, #0
 800411a:	613b      	str	r3, [r7, #16]

	data =  ip_value;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	613b      	str	r3, [r7, #16]

	for (i = 0; i < count ; i++) {
 8004120:	2300      	movs	r3, #0
 8004122:	82fb      	strh	r3, [r7, #22]
 8004124:	e00e      	b.n	8004144 <VL53L1_i2c_encode_uint32_t+0x3e>
		pbuffer[count-i-1] = (uint8_t)(data & 0x00FF);
 8004126:	897a      	ldrh	r2, [r7, #10]
 8004128:	8afb      	ldrh	r3, [r7, #22]
 800412a:	1ad3      	subs	r3, r2, r3
 800412c:	3b01      	subs	r3, #1
 800412e:	687a      	ldr	r2, [r7, #4]
 8004130:	4413      	add	r3, r2
 8004132:	693a      	ldr	r2, [r7, #16]
 8004134:	b2d2      	uxtb	r2, r2
 8004136:	701a      	strb	r2, [r3, #0]
		data = data >> 8;
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	0a1b      	lsrs	r3, r3, #8
 800413c:	613b      	str	r3, [r7, #16]
	for (i = 0; i < count ; i++) {
 800413e:	8afb      	ldrh	r3, [r7, #22]
 8004140:	3301      	adds	r3, #1
 8004142:	82fb      	strh	r3, [r7, #22]
 8004144:	8afa      	ldrh	r2, [r7, #22]
 8004146:	897b      	ldrh	r3, [r7, #10]
 8004148:	429a      	cmp	r2, r3
 800414a:	d3ec      	bcc.n	8004126 <VL53L1_i2c_encode_uint32_t+0x20>
	}
}
 800414c:	bf00      	nop
 800414e:	371c      	adds	r7, #28
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr

08004158 <VL53L1_i2c_decode_uint32_t>:

uint32_t VL53L1_i2c_decode_uint32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8004158:	b480      	push	{r7}
 800415a:	b085      	sub	sp, #20
 800415c:	af00      	add	r7, sp, #0
 800415e:	4603      	mov	r3, r0
 8004160:	6039      	str	r1, [r7, #0]
 8004162:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a uint32_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	uint32_t   value = 0x00;
 8004164:	2300      	movs	r3, #0
 8004166:	60fb      	str	r3, [r7, #12]

	while (count-- > 0) {
 8004168:	e007      	b.n	800417a <VL53L1_i2c_decode_uint32_t+0x22>
		value = (value << 8) | (uint32_t)*pbuffer++;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	021a      	lsls	r2, r3, #8
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	1c59      	adds	r1, r3, #1
 8004172:	6039      	str	r1, [r7, #0]
 8004174:	781b      	ldrb	r3, [r3, #0]
 8004176:	4313      	orrs	r3, r2
 8004178:	60fb      	str	r3, [r7, #12]
	while (count-- > 0) {
 800417a:	88fb      	ldrh	r3, [r7, #6]
 800417c:	1e5a      	subs	r2, r3, #1
 800417e:	80fa      	strh	r2, [r7, #6]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d1f2      	bne.n	800416a <VL53L1_i2c_decode_uint32_t+0x12>
	}

	return value;
 8004184:	68fb      	ldr	r3, [r7, #12]
}
 8004186:	4618      	mov	r0, r3
 8004188:	3714      	adds	r7, #20
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr

08004192 <VL53L1_i2c_decode_int32_t>:
}

int32_t VL53L1_i2c_decode_int32_t(
	uint16_t    count,
	uint8_t    *pbuffer)
{
 8004192:	b480      	push	{r7}
 8004194:	b085      	sub	sp, #20
 8004196:	af00      	add	r7, sp, #0
 8004198:	4603      	mov	r3, r0
 800419a:	6039      	str	r1, [r7, #0]
 800419c:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decodes a int32_t from the input I2C read buffer
	 * (MS byte first order)
	 */

	int32_t    value = 0x00;
 800419e:	2300      	movs	r3, #0
 80041a0:	60fb      	str	r3, [r7, #12]

	/* implement sign extension */
	if (*pbuffer >= 0x80) {
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	b25b      	sxtb	r3, r3
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	da0b      	bge.n	80041c4 <VL53L1_i2c_decode_int32_t+0x32>
		value = 0xFFFFFFFF;
 80041ac:	f04f 33ff 	mov.w	r3, #4294967295
 80041b0:	60fb      	str	r3, [r7, #12]
	}

	while (count-- > 0) {
 80041b2:	e007      	b.n	80041c4 <VL53L1_i2c_decode_int32_t+0x32>
		value = (value << 8) | (int32_t)*pbuffer++;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	021a      	lsls	r2, r3, #8
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	1c59      	adds	r1, r3, #1
 80041bc:	6039      	str	r1, [r7, #0]
 80041be:	781b      	ldrb	r3, [r3, #0]
 80041c0:	4313      	orrs	r3, r2
 80041c2:	60fb      	str	r3, [r7, #12]
	while (count-- > 0) {
 80041c4:	88fb      	ldrh	r3, [r7, #6]
 80041c6:	1e5a      	subs	r2, r3, #1
 80041c8:	80fa      	strh	r2, [r7, #6]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d1f2      	bne.n	80041b4 <VL53L1_i2c_decode_int32_t+0x22>
	}

	return value;
 80041ce:	68fb      	ldr	r3, [r7, #12]
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	3714      	adds	r7, #20
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr

080041dc <VL53L1_calc_macro_period_us>:
#endif

uint32_t VL53L1_calc_macro_period_us(
	uint16_t  fast_osc_frequency,
	uint8_t   vcsel_period)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b086      	sub	sp, #24
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	4603      	mov	r3, r0
 80041e4:	460a      	mov	r2, r1
 80041e6:	80fb      	strh	r3, [r7, #6]
 80041e8:	4613      	mov	r3, r2
 80041ea:	717b      	strb	r3, [r7, #5]
	 *
	 * Macro period fixed point format = unsigned 12.12
	 * Maximum supported macro period  = 4095.9999 us
	 */

	uint32_t  pll_period_us        = 0;
 80041ec:	2300      	movs	r3, #0
 80041ee:	617b      	str	r3, [r7, #20]
	uint8_t   vcsel_period_pclks   = 0;
 80041f0:	2300      	movs	r3, #0
 80041f2:	74fb      	strb	r3, [r7, #19]
	uint32_t  macro_period_us      = 0;
 80041f4:	2300      	movs	r3, #0
 80041f6:	60fb      	str	r3, [r7, #12]

	/*  Calculate PLL period in [us] from the  fast_osc_frequency
	 *  Fast osc frequency fixed point format = unsigned 4.12
	 */

	pll_period_us = VL53L1_calc_pll_period_us(fast_osc_frequency);
 80041f8:	88fb      	ldrh	r3, [r7, #6]
 80041fa:	4618      	mov	r0, r3
 80041fc:	f000 fc25 	bl	8004a4a <VL53L1_calc_pll_period_us>
 8004200:	6178      	str	r0, [r7, #20]

	/*  VCSEL period
	 *  - the real VCSEL period in PLL clocks = 2*(VCSEL_PERIOD+1)
	 */

	vcsel_period_pclks = VL53L1_decode_vcsel_period(vcsel_period);
 8004202:	797b      	ldrb	r3, [r7, #5]
 8004204:	4618      	mov	r0, r3
 8004206:	f000 fc34 	bl	8004a72 <VL53L1_decode_vcsel_period>
 800420a:	4603      	mov	r3, r0
 800420c:	74fb      	strb	r3, [r7, #19]
	 *  Max bits (24 - 6) + 12 = 30-bits usage
	 *
	 *  Downshift by 6 before multiplying by the VCSEL Period
	 */

	macro_period_us =
 800420e:	697a      	ldr	r2, [r7, #20]
 8004210:	4613      	mov	r3, r2
 8004212:	00db      	lsls	r3, r3, #3
 8004214:	4413      	add	r3, r2
 8004216:	021b      	lsls	r3, r3, #8
 8004218:	60fb      	str	r3, [r7, #12]
			(uint32_t)VL53L1_MACRO_PERIOD_VCSEL_PERIODS *
			pll_period_us;
	macro_period_us = macro_period_us >> 6;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	099b      	lsrs	r3, r3, #6
 800421e:	60fb      	str	r3, [r7, #12]

	macro_period_us = macro_period_us * (uint32_t)vcsel_period_pclks;
 8004220:	7cfa      	ldrb	r2, [r7, #19]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	fb02 f303 	mul.w	r3, r2, r3
 8004228:	60fb      	str	r3, [r7, #12]
	macro_period_us = macro_period_us >> 6;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	099b      	lsrs	r3, r3, #6
 800422e:	60fb      	str	r3, [r7, #12]
			macro_period_us);
#endif

	LOG_FUNCTION_END(0);

	return macro_period_us;
 8004230:	68fb      	ldr	r3, [r7, #12]
}
 8004232:	4618      	mov	r0, r3
 8004234:	3718      	adds	r7, #24
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}
	...

0800423c <VL53L1_calc_range_ignore_threshold>:
uint16_t VL53L1_calc_range_ignore_threshold(
	uint32_t central_rate,
	int16_t  x_gradient,
	int16_t  y_gradient,
	uint8_t  rate_mult)
{
 800423c:	b480      	push	{r7}
 800423e:	b089      	sub	sp, #36	; 0x24
 8004240:	af00      	add	r7, sp, #0
 8004242:	60f8      	str	r0, [r7, #12]
 8004244:	4608      	mov	r0, r1
 8004246:	4611      	mov	r1, r2
 8004248:	461a      	mov	r2, r3
 800424a:	4603      	mov	r3, r0
 800424c:	817b      	strh	r3, [r7, #10]
 800424e:	460b      	mov	r3, r1
 8004250:	813b      	strh	r3, [r7, #8]
 8004252:	4613      	mov	r3, r2
 8004254:	71fb      	strb	r3, [r7, #7]
	 * Range ignore threshold rate is then multiplied by user input
	 * rate_mult (in 3.5 fractional format)
	 *
	 */

	int32_t    range_ignore_thresh_int  = 0;
 8004256:	2300      	movs	r3, #0
 8004258:	617b      	str	r3, [r7, #20]
	uint16_t   range_ignore_thresh_kcps = 0;
 800425a:	2300      	movs	r3, #0
 800425c:	83fb      	strh	r3, [r7, #30]
	int32_t    central_rate_int         = 0;
 800425e:	2300      	movs	r3, #0
 8004260:	613b      	str	r3, [r7, #16]
	int16_t    x_gradient_int           = 0;
 8004262:	2300      	movs	r3, #0
 8004264:	83bb      	strh	r3, [r7, #28]
	int16_t    y_gradient_int           = 0;
 8004266:	2300      	movs	r3, #0
 8004268:	837b      	strh	r3, [r7, #26]

	LOG_FUNCTION_START("");

	/* Shift central_rate to .13 fractional for simple addition */

	central_rate_int = ((int32_t)central_rate * (1 << 4)) / (1000);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	011b      	lsls	r3, r3, #4
 800426e:	4a23      	ldr	r2, [pc, #140]	; (80042fc <VL53L1_calc_range_ignore_threshold+0xc0>)
 8004270:	fb82 1203 	smull	r1, r2, r2, r3
 8004274:	1192      	asrs	r2, r2, #6
 8004276:	17db      	asrs	r3, r3, #31
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	613b      	str	r3, [r7, #16]

	if (x_gradient < 0) {
 800427c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004280:	2b00      	cmp	r3, #0
 8004282:	da03      	bge.n	800428c <VL53L1_calc_range_ignore_threshold+0x50>
		x_gradient_int = x_gradient * -1;
 8004284:	897b      	ldrh	r3, [r7, #10]
 8004286:	425b      	negs	r3, r3
 8004288:	b29b      	uxth	r3, r3
 800428a:	83bb      	strh	r3, [r7, #28]
	}

	if (y_gradient < 0) {
 800428c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8004290:	2b00      	cmp	r3, #0
 8004292:	da03      	bge.n	800429c <VL53L1_calc_range_ignore_threshold+0x60>
		y_gradient_int = y_gradient * -1;
 8004294:	893b      	ldrh	r3, [r7, #8]
 8004296:	425b      	negs	r3, r3
 8004298:	b29b      	uxth	r3, r3
 800429a:	837b      	strh	r3, [r7, #26]

	/* Calculate full rate per spad - worst case from measured xtalk */
	/* Generated here from .11 fractional kcps */
	/* Additional factor of 4 applied to bring fractional precision to .13 */

	range_ignore_thresh_int = (8 * x_gradient_int * 4) + (8 * y_gradient_int * 4);
 800429c:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80042a0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80042a4:	4413      	add	r3, r2
 80042a6:	015b      	lsls	r3, r3, #5
 80042a8:	617b      	str	r3, [r7, #20]

	/* Convert Kcps to Mcps */

	range_ignore_thresh_int = range_ignore_thresh_int / 1000;
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	4a13      	ldr	r2, [pc, #76]	; (80042fc <VL53L1_calc_range_ignore_threshold+0xc0>)
 80042ae:	fb82 1203 	smull	r1, r2, r2, r3
 80042b2:	1192      	asrs	r2, r2, #6
 80042b4:	17db      	asrs	r3, r3, #31
 80042b6:	1ad3      	subs	r3, r2, r3
 80042b8:	617b      	str	r3, [r7, #20]

	/* Combine with Central Rate - Mcps .13 format*/

	range_ignore_thresh_int = range_ignore_thresh_int + central_rate_int;
 80042ba:	697a      	ldr	r2, [r7, #20]
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	4413      	add	r3, r2
 80042c0:	617b      	str	r3, [r7, #20]

	/* Mult by user input */

	range_ignore_thresh_int = (int32_t)rate_mult * range_ignore_thresh_int;
 80042c2:	79fa      	ldrb	r2, [r7, #7]
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	fb02 f303 	mul.w	r3, r2, r3
 80042ca:	617b      	str	r3, [r7, #20]

	range_ignore_thresh_int = (range_ignore_thresh_int + (1<<4)) / (1<<5);
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	3310      	adds	r3, #16
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	da00      	bge.n	80042d6 <VL53L1_calc_range_ignore_threshold+0x9a>
 80042d4:	331f      	adds	r3, #31
 80042d6:	115b      	asrs	r3, r3, #5
 80042d8:	617b      	str	r3, [r7, #20]

	/* Finally clip and output in correct format */

	if (range_ignore_thresh_int > 0xFFFF) {
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042e0:	db03      	blt.n	80042ea <VL53L1_calc_range_ignore_threshold+0xae>
		range_ignore_thresh_kcps = 0xFFFF;
 80042e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80042e6:	83fb      	strh	r3, [r7, #30]
 80042e8:	e001      	b.n	80042ee <VL53L1_calc_range_ignore_threshold+0xb2>
	} else {
		range_ignore_thresh_kcps = (uint16_t)range_ignore_thresh_int;
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	83fb      	strh	r3, [r7, #30]
			range_ignore_thresh_kcps);
#endif

	LOG_FUNCTION_END(0);

	return range_ignore_thresh_kcps;
 80042ee:	8bfb      	ldrh	r3, [r7, #30]
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3724      	adds	r7, #36	; 0x24
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr
 80042fc:	10624dd3 	.word	0x10624dd3

08004300 <VL53L1_calc_timeout_mclks>:


uint32_t VL53L1_calc_timeout_mclks(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 8004300:	b480      	push	{r7}
 8004302:	b085      	sub	sp, #20
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks   = 0;
 800430a:	2300      	movs	r3, #0
 800430c:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	timeout_mclks   =
			((timeout_us << 12) + (macro_period_us>>1)) /
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	031a      	lsls	r2, r3, #12
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	085b      	lsrs	r3, r3, #1
 8004316:	441a      	add	r2, r3
	timeout_mclks   =
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	fbb2 f3f3 	udiv	r3, r2, r3
 800431e:	60fb      	str	r3, [r7, #12]
			macro_period_us;

	LOG_FUNCTION_END(0);

	return timeout_mclks;
 8004320:	68fb      	ldr	r3, [r7, #12]
}
 8004322:	4618      	mov	r0, r3
 8004324:	3714      	adds	r7, #20
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr

0800432e <VL53L1_calc_encoded_timeout>:


uint16_t VL53L1_calc_encoded_timeout(
	uint32_t timeout_us,
	uint32_t macro_period_us)
{
 800432e:	b580      	push	{r7, lr}
 8004330:	b084      	sub	sp, #16
 8004332:	af00      	add	r7, sp, #0
 8004334:	6078      	str	r0, [r7, #4]
 8004336:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks   = 0;
 8004338:	2300      	movs	r3, #0
 800433a:	60fb      	str	r3, [r7, #12]
	uint16_t timeout_encoded = 0;
 800433c:	2300      	movs	r3, #0
 800433e:	817b      	strh	r3, [r7, #10]

	LOG_FUNCTION_START("");

	timeout_mclks   =
 8004340:	6839      	ldr	r1, [r7, #0]
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f7ff ffdc 	bl	8004300 <VL53L1_calc_timeout_mclks>
 8004348:	60f8      	str	r0, [r7, #12]
		VL53L1_calc_timeout_mclks(timeout_us, macro_period_us);

	timeout_encoded =
 800434a:	68f8      	ldr	r0, [r7, #12]
 800434c:	f000 f859 	bl	8004402 <VL53L1_encode_timeout>
 8004350:	4603      	mov	r3, r0
 8004352:	817b      	strh	r3, [r7, #10]
			timeout_encoded, timeout_encoded);
#endif

	LOG_FUNCTION_END(0);

	return timeout_encoded;
 8004354:	897b      	ldrh	r3, [r7, #10]
}
 8004356:	4618      	mov	r0, r3
 8004358:	3710      	adds	r7, #16
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}

0800435e <VL53L1_calc_timeout_us>:


uint32_t VL53L1_calc_timeout_us(
	uint32_t timeout_mclks,
	uint32_t macro_period_us)
{
 800435e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004360:	b087      	sub	sp, #28
 8004362:	af00      	add	r7, sp, #0
 8004364:	6078      	str	r0, [r7, #4]
 8004366:	6039      	str	r1, [r7, #0]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_us     = 0;
 8004368:	2200      	movs	r2, #0
 800436a:	617a      	str	r2, [r7, #20]
	uint64_t tmp            = 0;
 800436c:	f04f 0100 	mov.w	r1, #0
 8004370:	f04f 0200 	mov.w	r2, #0
 8004374:	e9c7 1202 	strd	r1, r2, [r7, #8]

	LOG_FUNCTION_START("");

	tmp  = (uint64_t)timeout_mclks * (uint64_t)macro_period_us;
 8004378:	687a      	ldr	r2, [r7, #4]
 800437a:	4615      	mov	r5, r2
 800437c:	f04f 0600 	mov.w	r6, #0
 8004380:	683a      	ldr	r2, [r7, #0]
 8004382:	4611      	mov	r1, r2
 8004384:	f04f 0200 	mov.w	r2, #0
 8004388:	fb01 fe06 	mul.w	lr, r1, r6
 800438c:	fb05 f002 	mul.w	r0, r5, r2
 8004390:	4470      	add	r0, lr
 8004392:	fba5 1201 	umull	r1, r2, r5, r1
 8004396:	4410      	add	r0, r2
 8004398:	4602      	mov	r2, r0
 800439a:	e9c7 1202 	strd	r1, r2, [r7, #8]
 800439e:	e9c7 1202 	strd	r1, r2, [r7, #8]
	tmp += 0x00800;
 80043a2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80043a6:	f511 6100 	adds.w	r1, r1, #2048	; 0x800
 80043aa:	f142 0200 	adc.w	r2, r2, #0
 80043ae:	e9c7 1202 	strd	r1, r2, [r7, #8]
	tmp  = tmp >> 12;
 80043b2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80043b6:	0b0b      	lsrs	r3, r1, #12
 80043b8:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 80043bc:	0b14      	lsrs	r4, r2, #12
 80043be:	e9c7 3402 	strd	r3, r4, [r7, #8]

	timeout_us = (uint32_t)tmp;
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	617b      	str	r3, [r7, #20]
			timeout_us, timeout_us);
#endif

	LOG_FUNCTION_END(0);

	return timeout_us;
 80043c6:	697b      	ldr	r3, [r7, #20]
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	371c      	adds	r7, #28
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

080043d0 <VL53L1_calc_decoded_timeout_us>:
}

uint32_t VL53L1_calc_decoded_timeout_us(
	uint16_t timeout_encoded,
	uint32_t macro_period_us)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b084      	sub	sp, #16
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	4603      	mov	r3, r0
 80043d8:	6039      	str	r1, [r7, #0]
 80043da:	80fb      	strh	r3, [r7, #6]
	 *  Max timeout in 20.12 format = 32-bits
	 *
	 *  Macro period [us] = 12.12 format
	 */

	uint32_t timeout_mclks  = 0;
 80043dc:	2300      	movs	r3, #0
 80043de:	60fb      	str	r3, [r7, #12]
	uint32_t timeout_us     = 0;
 80043e0:	2300      	movs	r3, #0
 80043e2:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	timeout_mclks =
 80043e4:	88fb      	ldrh	r3, [r7, #6]
 80043e6:	4618      	mov	r0, r3
 80043e8:	f000 f837 	bl	800445a <VL53L1_decode_timeout>
 80043ec:	60f8      	str	r0, [r7, #12]
		VL53L1_decode_timeout(timeout_encoded);

	timeout_us    =
 80043ee:	6839      	ldr	r1, [r7, #0]
 80043f0:	68f8      	ldr	r0, [r7, #12]
 80043f2:	f7ff ffb4 	bl	800435e <VL53L1_calc_timeout_us>
 80043f6:	60b8      	str	r0, [r7, #8]
		VL53L1_calc_timeout_us(timeout_mclks, macro_period_us);

	LOG_FUNCTION_END(0);

	return timeout_us;
 80043f8:	68bb      	ldr	r3, [r7, #8]
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3710      	adds	r7, #16
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}

08004402 <VL53L1_encode_timeout>:


uint16_t VL53L1_encode_timeout(uint32_t timeout_mclks)
{
 8004402:	b480      	push	{r7}
 8004404:	b087      	sub	sp, #28
 8004406:	af00      	add	r7, sp, #0
 8004408:	6078      	str	r0, [r7, #4]
	/*
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 800440a:	2300      	movs	r3, #0
 800440c:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800440e:	2300      	movs	r3, #0
 8004410:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8004412:	2300      	movs	r3, #0
 8004414:	81fb      	strh	r3, [r7, #14]

	if (timeout_mclks > 0) {
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d017      	beq.n	800444c <VL53L1_encode_timeout+0x4a>
		ls_byte = timeout_mclks - 1;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	3b01      	subs	r3, #1
 8004420:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8004422:	e005      	b.n	8004430 <VL53L1_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	085b      	lsrs	r3, r3, #1
 8004428:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800442a:	89fb      	ldrh	r3, [r7, #14]
 800442c:	3301      	adds	r3, #1
 800442e:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004436:	2b00      	cmp	r3, #0
 8004438:	d1f4      	bne.n	8004424 <VL53L1_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 800443a:	89fb      	ldrh	r3, [r7, #14]
 800443c:	021b      	lsls	r3, r3, #8
 800443e:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	b29b      	uxth	r3, r3
 8004444:	b2db      	uxtb	r3, r3
 8004446:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 8004448:	4413      	add	r3, r2
 800444a:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 800444c:	8afb      	ldrh	r3, [r7, #22]
}
 800444e:	4618      	mov	r0, r3
 8004450:	371c      	adds	r7, #28
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr

0800445a <VL53L1_decode_timeout>:


uint32_t VL53L1_decode_timeout(uint16_t encoded_timeout)
{
 800445a:	b480      	push	{r7}
 800445c:	b085      	sub	sp, #20
 800445e:	af00      	add	r7, sp, #0
 8004460:	4603      	mov	r3, r0
 8004462:	80fb      	strh	r3, [r7, #6]
	/*
	 * Decode 16-bit timeout register value
	 * format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 8004464:	2300      	movs	r3, #0
 8004466:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8004468:	88fb      	ldrh	r3, [r7, #6]
 800446a:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800446c:	88fa      	ldrh	r2, [r7, #6]
 800446e:	0a12      	lsrs	r2, r2, #8
 8004470:	b292      	uxth	r2, r2
 8004472:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8004474:	3301      	adds	r3, #1
 8004476:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 8004478:	68fb      	ldr	r3, [r7, #12]
}
 800447a:	4618      	mov	r0, r3
 800447c:	3714      	adds	r7, #20
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr

08004486 <VL53L1_calc_timeout_register_values>:
	uint32_t                 mm_config_timeout_us,
	uint32_t                 range_config_timeout_us,
	uint16_t                 fast_osc_frequency,
	VL53L1_general_config_t *pgeneral,
	VL53L1_timing_config_t  *ptiming)
{
 8004486:	b580      	push	{r7, lr}
 8004488:	b088      	sub	sp, #32
 800448a:	af00      	add	r7, sp, #0
 800448c:	60f8      	str	r0, [r7, #12]
 800448e:	60b9      	str	r1, [r7, #8]
 8004490:	607a      	str	r2, [r7, #4]
 8004492:	807b      	strh	r3, [r7, #2]
	 * into the appropriate register values
	 *
	 * Must also be run after the VCSEL period settings are changed
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8004494:	2300      	movs	r3, #0
 8004496:	77fb      	strb	r3, [r7, #31]

	uint32_t macro_period_us    = 0;
 8004498:	2300      	movs	r3, #0
 800449a:	617b      	str	r3, [r7, #20]
	uint32_t timeout_mclks      = 0;
 800449c:	2300      	movs	r3, #0
 800449e:	61bb      	str	r3, [r7, #24]
	uint16_t timeout_encoded    = 0;
 80044a0:	2300      	movs	r3, #0
 80044a2:	827b      	strh	r3, [r7, #18]

	LOG_FUNCTION_START("");

	if (fast_osc_frequency == 0) {
 80044a4:	887b      	ldrh	r3, [r7, #2]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d102      	bne.n	80044b0 <VL53L1_calc_timeout_register_values+0x2a>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 80044aa:	23f1      	movs	r3, #241	; 0xf1
 80044ac:	77fb      	strb	r3, [r7, #31]
 80044ae:	e05d      	b.n	800456c <VL53L1_calc_timeout_register_values+0xe6>
	} else {
		/* Update Macro Period for Range A VCSEL Period */
		macro_period_us =
				VL53L1_calc_macro_period_us(
 80044b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044b2:	799a      	ldrb	r2, [r3, #6]
		macro_period_us =
 80044b4:	887b      	ldrh	r3, [r7, #2]
 80044b6:	4611      	mov	r1, r2
 80044b8:	4618      	mov	r0, r3
 80044ba:	f7ff fe8f 	bl	80041dc <VL53L1_calc_macro_period_us>
 80044be:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_a);

		/*  Update Phase timeout - uses Timing A */
		timeout_mclks =
 80044c0:	6979      	ldr	r1, [r7, #20]
 80044c2:	68f8      	ldr	r0, [r7, #12]
 80044c4:	f7ff ff1c 	bl	8004300 <VL53L1_calc_timeout_mclks>
 80044c8:	61b8      	str	r0, [r7, #24]
			VL53L1_calc_timeout_mclks(
				phasecal_config_timeout_us,
				macro_period_us);

		/* clip as the phase cal timeout register is only 8-bits */
		if (timeout_mclks > 0xFF)
 80044ca:	69bb      	ldr	r3, [r7, #24]
 80044cc:	2bff      	cmp	r3, #255	; 0xff
 80044ce:	d901      	bls.n	80044d4 <VL53L1_calc_timeout_register_values+0x4e>
			timeout_mclks = 0xFF;
 80044d0:	23ff      	movs	r3, #255	; 0xff
 80044d2:	61bb      	str	r3, [r7, #24]

		pgeneral->phasecal_config__timeout_macrop =
				(uint8_t)timeout_mclks;
 80044d4:	69bb      	ldr	r3, [r7, #24]
 80044d6:	b2da      	uxtb	r2, r3
		pgeneral->phasecal_config__timeout_macrop =
 80044d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044da:	71da      	strb	r2, [r3, #7]

		/*  Update MM Timing A timeout */
		timeout_encoded =
 80044dc:	6979      	ldr	r1, [r7, #20]
 80044de:	68b8      	ldr	r0, [r7, #8]
 80044e0:	f7ff ff25 	bl	800432e <VL53L1_calc_encoded_timeout>
 80044e4:	4603      	mov	r3, r0
 80044e6:	827b      	strh	r3, [r7, #18]
			VL53L1_calc_encoded_timeout(
				mm_config_timeout_us,
				macro_period_us);

		ptiming->mm_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 80044e8:	8a7b      	ldrh	r3, [r7, #18]
 80044ea:	0a1b      	lsrs	r3, r3, #8
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_hi =
 80044f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044f2:	701a      	strb	r2, [r3, #0]
		ptiming->mm_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 80044f4:	8a7b      	ldrh	r3, [r7, #18]
 80044f6:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_a_lo =
 80044f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044fa:	705a      	strb	r2, [r3, #1]

		/* Update Range Timing A timeout */
		timeout_encoded =
 80044fc:	6979      	ldr	r1, [r7, #20]
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f7ff ff15 	bl	800432e <VL53L1_calc_encoded_timeout>
 8004504:	4603      	mov	r3, r0
 8004506:	827b      	strh	r3, [r7, #18]
			VL53L1_calc_encoded_timeout(
				range_config_timeout_us,
				macro_period_us);

		ptiming->range_config__timeout_macrop_a_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8004508:	8a7b      	ldrh	r3, [r7, #18]
 800450a:	0a1b      	lsrs	r3, r3, #8
 800450c:	b29b      	uxth	r3, r3
 800450e:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_hi =
 8004510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004512:	711a      	strb	r2, [r3, #4]
		ptiming->range_config__timeout_macrop_a_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8004514:	8a7b      	ldrh	r3, [r7, #18]
 8004516:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_a_lo =
 8004518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800451a:	715a      	strb	r2, [r3, #5]

		/* Update Macro Period for Range B VCSEL Period */
		macro_period_us =
				VL53L1_calc_macro_period_us(
 800451c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800451e:	7a5a      	ldrb	r2, [r3, #9]
		macro_period_us =
 8004520:	887b      	ldrh	r3, [r7, #2]
 8004522:	4611      	mov	r1, r2
 8004524:	4618      	mov	r0, r3
 8004526:	f7ff fe59 	bl	80041dc <VL53L1_calc_macro_period_us>
 800452a:	6178      	str	r0, [r7, #20]
					fast_osc_frequency,
					ptiming->range_config__vcsel_period_b);

		/* Update MM Timing B timeout */
		timeout_encoded =
 800452c:	6979      	ldr	r1, [r7, #20]
 800452e:	68b8      	ldr	r0, [r7, #8]
 8004530:	f7ff fefd 	bl	800432e <VL53L1_calc_encoded_timeout>
 8004534:	4603      	mov	r3, r0
 8004536:	827b      	strh	r3, [r7, #18]
				VL53L1_calc_encoded_timeout(
					mm_config_timeout_us,
					macro_period_us);

		ptiming->mm_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8004538:	8a7b      	ldrh	r3, [r7, #18]
 800453a:	0a1b      	lsrs	r3, r3, #8
 800453c:	b29b      	uxth	r3, r3
 800453e:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_hi =
 8004540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004542:	709a      	strb	r2, [r3, #2]
		ptiming->mm_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8004544:	8a7b      	ldrh	r3, [r7, #18]
 8004546:	b2da      	uxtb	r2, r3
		ptiming->mm_config__timeout_macrop_b_lo =
 8004548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800454a:	70da      	strb	r2, [r3, #3]

		/* Update Range Timing B timeout */
		timeout_encoded = VL53L1_calc_encoded_timeout(
 800454c:	6979      	ldr	r1, [r7, #20]
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f7ff feed 	bl	800432e <VL53L1_calc_encoded_timeout>
 8004554:	4603      	mov	r3, r0
 8004556:	827b      	strh	r3, [r7, #18]
							range_config_timeout_us,
							macro_period_us);

		ptiming->range_config__timeout_macrop_b_hi =
				(uint8_t)((timeout_encoded & 0xFF00) >> 8);
 8004558:	8a7b      	ldrh	r3, [r7, #18]
 800455a:	0a1b      	lsrs	r3, r3, #8
 800455c:	b29b      	uxth	r3, r3
 800455e:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_hi =
 8004560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004562:	71da      	strb	r2, [r3, #7]
		ptiming->range_config__timeout_macrop_b_lo =
				(uint8_t) (timeout_encoded & 0x00FF);
 8004564:	8a7b      	ldrh	r3, [r7, #18]
 8004566:	b2da      	uxtb	r2, r3
		ptiming->range_config__timeout_macrop_b_lo =
 8004568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800456a:	721a      	strb	r2, [r3, #8]
	}

	LOG_FUNCTION_END(0);

	return status;
 800456c:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8004570:	4618      	mov	r0, r3
 8004572:	3720      	adds	r7, #32
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}

08004578 <VL53L1_encode_row_col>:

void VL53L1_encode_row_col(
	uint8_t  row,
	uint8_t  col,
	uint8_t *pspad_number)
{
 8004578:	b480      	push	{r7}
 800457a:	b083      	sub	sp, #12
 800457c:	af00      	add	r7, sp, #0
 800457e:	4603      	mov	r3, r0
 8004580:	603a      	str	r2, [r7, #0]
 8004582:	71fb      	strb	r3, [r7, #7]
 8004584:	460b      	mov	r3, r1
 8004586:	71bb      	strb	r3, [r7, #6]
	/**
	 *  Encodes the input array(row,col) location as SPAD number.
	 */

	if (row > 7) {
 8004588:	79fb      	ldrb	r3, [r7, #7]
 800458a:	2b07      	cmp	r3, #7
 800458c:	d90a      	bls.n	80045a4 <VL53L1_encode_row_col+0x2c>
		*pspad_number = 128 + (col << 3) + (15-row);
 800458e:	79bb      	ldrb	r3, [r7, #6]
 8004590:	00db      	lsls	r3, r3, #3
 8004592:	b2da      	uxtb	r2, r3
 8004594:	79fb      	ldrb	r3, [r7, #7]
 8004596:	1ad3      	subs	r3, r2, r3
 8004598:	b2db      	uxtb	r3, r3
 800459a:	3b71      	subs	r3, #113	; 0x71
 800459c:	b2da      	uxtb	r2, r3
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	701a      	strb	r2, [r3, #0]
	} else {
		*pspad_number = ((15-col) << 3) + row;
	}
}
 80045a2:	e00a      	b.n	80045ba <VL53L1_encode_row_col+0x42>
		*pspad_number = ((15-col) << 3) + row;
 80045a4:	79bb      	ldrb	r3, [r7, #6]
 80045a6:	f1c3 030f 	rsb	r3, r3, #15
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	00db      	lsls	r3, r3, #3
 80045ae:	b2da      	uxtb	r2, r3
 80045b0:	79fb      	ldrb	r3, [r7, #7]
 80045b2:	4413      	add	r3, r2
 80045b4:	b2da      	uxtb	r2, r3
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	701a      	strb	r2, [r3, #0]
}
 80045ba:	bf00      	nop
 80045bc:	370c      	adds	r7, #12
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr

080045c6 <VL53L1_decode_zone_size>:

void VL53L1_decode_zone_size(
	uint8_t  encoded_xy_size,
	uint8_t  *pwidth,
	uint8_t  *pheight)
{
 80045c6:	b480      	push	{r7}
 80045c8:	b085      	sub	sp, #20
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	4603      	mov	r3, r0
 80045ce:	60b9      	str	r1, [r7, #8]
 80045d0:	607a      	str	r2, [r7, #4]
 80045d2:	73fb      	strb	r3, [r7, #15]
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */

	*pheight = encoded_xy_size >> 4;
 80045d4:	7bfb      	ldrb	r3, [r7, #15]
 80045d6:	091b      	lsrs	r3, r3, #4
 80045d8:	b2da      	uxtb	r2, r3
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	701a      	strb	r2, [r3, #0]
	*pwidth  = encoded_xy_size & 0x0F;
 80045de:	7bfb      	ldrb	r3, [r7, #15]
 80045e0:	f003 030f 	and.w	r3, r3, #15
 80045e4:	b2da      	uxtb	r2, r3
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	701a      	strb	r2, [r3, #0]

}
 80045ea:	bf00      	nop
 80045ec:	3714      	adds	r7, #20
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr

080045f6 <VL53L1_encode_zone_size>:

void VL53L1_encode_zone_size(
	uint8_t  width,
	uint8_t  height,
	uint8_t *pencoded_xy_size)
{
 80045f6:	b480      	push	{r7}
 80045f8:	b083      	sub	sp, #12
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	4603      	mov	r3, r0
 80045fe:	603a      	str	r2, [r7, #0]
 8004600:	71fb      	strb	r3, [r7, #7]
 8004602:	460b      	mov	r3, r1
 8004604:	71bb      	strb	r3, [r7, #6]
	 *
	 * MS Nibble = height
	 * LS Nibble = width
	 */

	*pencoded_xy_size = (height << 4) + width;
 8004606:	79bb      	ldrb	r3, [r7, #6]
 8004608:	011b      	lsls	r3, r3, #4
 800460a:	b2da      	uxtb	r2, r3
 800460c:	79fb      	ldrb	r3, [r7, #7]
 800460e:	4413      	add	r3, r2
 8004610:	b2da      	uxtb	r2, r3
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	701a      	strb	r2, [r3, #0]

}
 8004616:	bf00      	nop
 8004618:	370c      	adds	r7, #12
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr

08004622 <VL53L1_encode_GPIO_interrupt_config>:
 * Encodes VL53L1_GPIO_interrupt_config_t structure to FW register format
 */

uint8_t	VL53L1_encode_GPIO_interrupt_config(
	VL53L1_GPIO_interrupt_config_t	*pintconf)
{
 8004622:	b480      	push	{r7}
 8004624:	b085      	sub	sp, #20
 8004626:	af00      	add	r7, sp, #0
 8004628:	6078      	str	r0, [r7, #4]
	uint8_t system__interrupt_config;

	system__interrupt_config = pintconf->intr_mode_distance;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	781b      	ldrb	r3, [r3, #0]
 800462e:	73fb      	strb	r3, [r7, #15]
	system__interrupt_config |= ((pintconf->intr_mode_rate) << 2);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	785b      	ldrb	r3, [r3, #1]
 8004634:	009b      	lsls	r3, r3, #2
 8004636:	b25a      	sxtb	r2, r3
 8004638:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800463c:	4313      	orrs	r3, r2
 800463e:	b25b      	sxtb	r3, r3
 8004640:	73fb      	strb	r3, [r7, #15]
	system__interrupt_config |= ((pintconf->intr_new_measure_ready) << 5);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	789b      	ldrb	r3, [r3, #2]
 8004646:	015b      	lsls	r3, r3, #5
 8004648:	b25a      	sxtb	r2, r3
 800464a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800464e:	4313      	orrs	r3, r2
 8004650:	b25b      	sxtb	r3, r3
 8004652:	73fb      	strb	r3, [r7, #15]
	system__interrupt_config |= ((pintconf->intr_no_target) << 6);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	78db      	ldrb	r3, [r3, #3]
 8004658:	019b      	lsls	r3, r3, #6
 800465a:	b25a      	sxtb	r2, r3
 800465c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004660:	4313      	orrs	r3, r2
 8004662:	b25b      	sxtb	r3, r3
 8004664:	73fb      	strb	r3, [r7, #15]
	system__interrupt_config |= ((pintconf->intr_combined_mode) << 7);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	791b      	ldrb	r3, [r3, #4]
 800466a:	01db      	lsls	r3, r3, #7
 800466c:	b25a      	sxtb	r2, r3
 800466e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004672:	4313      	orrs	r3, r2
 8004674:	b25b      	sxtb	r3, r3
 8004676:	73fb      	strb	r3, [r7, #15]

	return system__interrupt_config;
 8004678:	7bfb      	ldrb	r3, [r7, #15]
}
 800467a:	4618      	mov	r0, r3
 800467c:	3714      	adds	r7, #20
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr

08004686 <VL53L1_decode_GPIO_interrupt_config>:
 * Decodes FW register to VL53L1_GPIO_interrupt_config_t structure
 */

VL53L1_GPIO_interrupt_config_t VL53L1_decode_GPIO_interrupt_config(
	uint8_t		system__interrupt_config)
{
 8004686:	b490      	push	{r4, r7}
 8004688:	b086      	sub	sp, #24
 800468a:	af00      	add	r7, sp, #0
 800468c:	6078      	str	r0, [r7, #4]
 800468e:	460b      	mov	r3, r1
 8004690:	70fb      	strb	r3, [r7, #3]
	VL53L1_GPIO_interrupt_config_t	intconf;

	intconf.intr_mode_distance = system__interrupt_config & 0x03;
 8004692:	78fb      	ldrb	r3, [r7, #3]
 8004694:	f003 0303 	and.w	r3, r3, #3
 8004698:	b2db      	uxtb	r3, r3
 800469a:	723b      	strb	r3, [r7, #8]
	intconf.intr_mode_rate = (system__interrupt_config >> 2) & 0x03;
 800469c:	78fb      	ldrb	r3, [r7, #3]
 800469e:	089b      	lsrs	r3, r3, #2
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	f003 0303 	and.w	r3, r3, #3
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	727b      	strb	r3, [r7, #9]
	intconf.intr_new_measure_ready = (system__interrupt_config >> 5) & 0x01;
 80046aa:	78fb      	ldrb	r3, [r7, #3]
 80046ac:	095b      	lsrs	r3, r3, #5
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	f003 0301 	and.w	r3, r3, #1
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	72bb      	strb	r3, [r7, #10]
	intconf.intr_no_target = (system__interrupt_config >> 6) & 0x01;
 80046b8:	78fb      	ldrb	r3, [r7, #3]
 80046ba:	099b      	lsrs	r3, r3, #6
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	f003 0301 	and.w	r3, r3, #1
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	72fb      	strb	r3, [r7, #11]
	intconf.intr_combined_mode = (system__interrupt_config >> 7) & 0x01;
 80046c6:	78fb      	ldrb	r3, [r7, #3]
 80046c8:	09db      	lsrs	r3, r3, #7
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	733b      	strb	r3, [r7, #12]

	/* set some default values */
	intconf.threshold_rate_low = 0;
 80046ce:	2300      	movs	r3, #0
 80046d0:	82bb      	strh	r3, [r7, #20]
	intconf.threshold_rate_high = 0;
 80046d2:	2300      	movs	r3, #0
 80046d4:	827b      	strh	r3, [r7, #18]
	intconf.threshold_distance_low = 0;
 80046d6:	2300      	movs	r3, #0
 80046d8:	823b      	strh	r3, [r7, #16]
	intconf.threshold_distance_high = 0;
 80046da:	2300      	movs	r3, #0
 80046dc:	81fb      	strh	r3, [r7, #14]

	return intconf;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	461c      	mov	r4, r3
 80046e2:	f107 0308 	add.w	r3, r7, #8
 80046e6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80046e8:	6020      	str	r0, [r4, #0]
 80046ea:	6061      	str	r1, [r4, #4]
 80046ec:	60a2      	str	r2, [r4, #8]
 80046ee:	881b      	ldrh	r3, [r3, #0]
 80046f0:	81a3      	strh	r3, [r4, #12]
}
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	3718      	adds	r7, #24
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bc90      	pop	{r4, r7}
 80046fa:	4770      	bx	lr

080046fc <VL53L1_set_GPIO_distance_threshold>:

VL53L1_Error VL53L1_set_GPIO_distance_threshold(
	VL53L1_DEV                      Dev,
	uint16_t			threshold_high,
	uint16_t			threshold_low)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b085      	sub	sp, #20
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	460b      	mov	r3, r1
 8004706:	807b      	strh	r3, [r7, #2]
 8004708:	4613      	mov	r3, r2
 800470a:	803b      	strh	r3, [r7, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800470c:	2300      	movs	r3, #0
 800470e:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->dyn_cfg.system__thresh_high = threshold_high;
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	887a      	ldrh	r2, [r7, #2]
 8004718:	f8a3 21b6 	strh.w	r2, [r3, #438]	; 0x1b6
	pdev->dyn_cfg.system__thresh_low = threshold_low;
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	883a      	ldrh	r2, [r7, #0]
 8004720:	f8a3 21b8 	strh.w	r2, [r3, #440]	; 0x1b8

	LOG_FUNCTION_END(status);
	return status;
 8004724:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004728:	4618      	mov	r0, r3
 800472a:	3714      	adds	r7, #20
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr

08004734 <VL53L1_set_GPIO_rate_threshold>:

VL53L1_Error VL53L1_set_GPIO_rate_threshold(
	VL53L1_DEV                      Dev,
	uint16_t			threshold_high,
	uint16_t			threshold_low)
{
 8004734:	b480      	push	{r7}
 8004736:	b085      	sub	sp, #20
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	460b      	mov	r3, r1
 800473e:	807b      	strh	r3, [r7, #2]
 8004740:	4613      	mov	r3, r2
 8004742:	803b      	strh	r3, [r7, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004744:	2300      	movs	r3, #0
 8004746:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->gen_cfg.system__thresh_rate_high = threshold_high;
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	887a      	ldrh	r2, [r7, #2]
 8004750:	f8a3 2190 	strh.w	r2, [r3, #400]	; 0x190
	pdev->gen_cfg.system__thresh_rate_low = threshold_low;
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	883a      	ldrh	r2, [r7, #0]
 8004758:	f8a3 2192 	strh.w	r2, [r3, #402]	; 0x192

	LOG_FUNCTION_END(status);
	return status;
 800475c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004760:	4618      	mov	r0, r3
 8004762:	3714      	adds	r7, #20
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr

0800476c <VL53L1_set_GPIO_thresholds_from_struct>:
 */

VL53L1_Error VL53L1_set_GPIO_thresholds_from_struct(
	VL53L1_DEV                      Dev,
	VL53L1_GPIO_interrupt_config_t *pintconf)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b084      	sub	sp, #16
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	6039      	str	r1, [r7, #0]
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004776:	2300      	movs	r3, #0
 8004778:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	status = VL53L1_set_GPIO_distance_threshold(
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	88d9      	ldrh	r1, [r3, #6]
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	891b      	ldrh	r3, [r3, #8]
 8004782:	461a      	mov	r2, r3
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	f7ff ffb9 	bl	80046fc <VL53L1_set_GPIO_distance_threshold>
 800478a:	4603      	mov	r3, r0
 800478c:	73fb      	strb	r3, [r7, #15]
			Dev,
			pintconf->threshold_distance_high,
			pintconf->threshold_distance_low);

	if (status == VL53L1_ERROR_NONE) {
 800478e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d109      	bne.n	80047aa <VL53L1_set_GPIO_thresholds_from_struct+0x3e>
		status =
			VL53L1_set_GPIO_rate_threshold(
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	8959      	ldrh	r1, [r3, #10]
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	899b      	ldrh	r3, [r3, #12]
		status =
 800479e:	461a      	mov	r2, r3
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	f7ff ffc7 	bl	8004734 <VL53L1_set_GPIO_rate_threshold>
 80047a6:	4603      	mov	r3, r0
 80047a8:	73fb      	strb	r3, [r7, #15]
				pintconf->threshold_rate_high,
				pintconf->threshold_rate_low);
	}

	LOG_FUNCTION_END(status);
	return status;
 80047aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3710      	adds	r7, #16
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}

080047b6 <VL53L1_low_power_auto_data_init>:
/* Start Patch_LowPowerAutoMode */

VL53L1_Error VL53L1_low_power_auto_data_init(
	VL53L1_DEV                          Dev
	)
{
 80047b6:	b480      	push	{r7}
 80047b8:	b085      	sub	sp, #20
 80047ba:	af00      	add	r7, sp, #0
 80047bc:	6078      	str	r0, [r7, #4]
	/*
	 * Initializes internal data structures for low power auto mode
	 */

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80047be:	2300      	movs	r3, #0
 80047c0:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_START("");

	pdev->low_power_auto_data.vhv_loop_bound =
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	2203      	movs	r2, #3
 80047ca:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
		VL53L1_TUNINGPARM_LOWPOWERAUTO_VHV_LOOP_BOUND_DEFAULT;
	pdev->low_power_auto_data.is_low_power_auto_mode = 0;
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	2200      	movs	r2, #0
 80047d2:	f883 22e5 	strb.w	r2, [r3, #741]	; 0x2e5
	pdev->low_power_auto_data.low_power_auto_range_count = 0;
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	2200      	movs	r2, #0
 80047da:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
	pdev->low_power_auto_data.saved_interrupt_config = 0;
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	2200      	movs	r2, #0
 80047e2:	f883 22e7 	strb.w	r2, [r3, #743]	; 0x2e7
	pdev->low_power_auto_data.saved_vhv_init = 0;
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	2200      	movs	r2, #0
 80047ea:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
	pdev->low_power_auto_data.saved_vhv_timeout = 0;
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	2200      	movs	r2, #0
 80047f2:	f883 22e9 	strb.w	r2, [r3, #745]	; 0x2e9
	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	2200      	movs	r2, #0
 80047fa:	f883 22ea 	strb.w	r2, [r3, #746]	; 0x2ea
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	2200      	movs	r2, #0
 8004802:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
	pdev->low_power_auto_data.dss__required_spads = 0;
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	2200      	movs	r2, #0
 800480a:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0

	LOG_FUNCTION_END(status);

	return status;
 800480e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004812:	4618      	mov	r0, r3
 8004814:	3714      	adds	r7, #20
 8004816:	46bd      	mov	sp, r7
 8004818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481c:	4770      	bx	lr

0800481e <VL53L1_low_power_auto_data_stop_range>:

VL53L1_Error VL53L1_low_power_auto_data_stop_range(
	VL53L1_DEV                          Dev
	)
{
 800481e:	b480      	push	{r7}
 8004820:	b085      	sub	sp, #20
 8004822:	af00      	add	r7, sp, #0
 8004824:	6078      	str	r0, [r7, #4]
	/*
	 * Range has been paused but may continue later
	 */

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004826:	2300      	movs	r3, #0
 8004828:	73fb      	strb	r3, [r7, #15]

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	60bb      	str	r3, [r7, #8]
	LOG_FUNCTION_START("");

	/* doing this ensures stop_range followed by a get_device_results does
	 * not mess up the counters */

	pdev->low_power_auto_data.low_power_auto_range_count = 0xFF;
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	22ff      	movs	r2, #255	; 0xff
 8004832:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6

	pdev->low_power_auto_data.first_run_phasecal_result = 0;
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	2200      	movs	r2, #0
 800483a:	f883 22ea 	strb.w	r2, [r3, #746]	; 0x2ea
	pdev->low_power_auto_data.dss__total_rate_per_spad_mcps = 0;
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	2200      	movs	r2, #0
 8004842:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
	pdev->low_power_auto_data.dss__required_spads = 0;
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	2200      	movs	r2, #0
 800484a:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0

	/* restore vhv configs */
	if (pdev->low_power_auto_data.saved_vhv_init != 0)
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	f893 32e8 	ldrb.w	r3, [r3, #744]	; 0x2e8
 8004854:	2b00      	cmp	r3, #0
 8004856:	d005      	beq.n	8004864 <VL53L1_low_power_auto_data_stop_range+0x46>
		pdev->stat_nvm.vhv_config__init =
			pdev->low_power_auto_data.saved_vhv_init;
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	f893 22e8 	ldrb.w	r2, [r3, #744]	; 0x2e8
		pdev->stat_nvm.vhv_config__init =
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	f883 2163 	strb.w	r2, [r3, #355]	; 0x163
	if (pdev->low_power_auto_data.saved_vhv_timeout != 0)
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	f893 32e9 	ldrb.w	r3, [r3, #745]	; 0x2e9
 800486a:	2b00      	cmp	r3, #0
 800486c:	d005      	beq.n	800487a <VL53L1_low_power_auto_data_stop_range+0x5c>
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
			pdev->low_power_auto_data.saved_vhv_timeout;
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	f893 22e9 	ldrb.w	r2, [r3, #745]	; 0x2e9
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160

	/* remove phasecal override */
	pdev->gen_cfg.phasecal_config__override = 0x00;
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	2200      	movs	r2, #0
 800487e:	f883 218d 	strb.w	r2, [r3, #397]	; 0x18d

	LOG_FUNCTION_END(status);

	return status;
 8004882:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004886:	4618      	mov	r0, r3
 8004888:	3714      	adds	r7, #20
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr

08004892 <VL53L1_config_low_power_auto_mode>:
VL53L1_Error VL53L1_config_low_power_auto_mode(
	VL53L1_general_config_t   *pgeneral,
	VL53L1_dynamic_config_t   *pdynamic,
	VL53L1_low_power_auto_data_t *plpadata
	)
{
 8004892:	b480      	push	{r7}
 8004894:	b087      	sub	sp, #28
 8004896:	af00      	add	r7, sp, #0
 8004898:	60f8      	str	r0, [r7, #12]
 800489a:	60b9      	str	r1, [r7, #8]
 800489c:	607a      	str	r2, [r7, #4]
	/*
	 * Initializes configs for when low power auto presets are selected
	 */

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 800489e:	2300      	movs	r3, #0
 80048a0:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	/* set low power auto mode */
	plpadata->is_low_power_auto_mode = 1;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2201      	movs	r2, #1
 80048a6:	705a      	strb	r2, [r3, #1]

	/* set low power range count to 0 */
	plpadata->low_power_auto_range_count = 0;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2200      	movs	r2, #0
 80048ac:	709a      	strb	r2, [r3, #2]

	/* Turn off MM1/MM2 and DSS2 */
	pdynamic->system__sequence_config = \
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	228b      	movs	r2, #139	; 0x8b
 80048b2:	745a      	strb	r2, [r3, #17]
			/* VL53L1_SEQUENCE_MM1_EN | \*/
			/* VL53L1_SEQUENCE_MM2_EN | \*/
			VL53L1_SEQUENCE_RANGE_EN;

	/* Set DSS to manual/expected SPADs */
	pgeneral->dss_config__manual_effective_spads_select = 200 << 8;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f44f 4248 	mov.w	r2, #51200	; 0xc800
 80048ba:	821a      	strh	r2, [r3, #16]
	pgeneral->dss_config__roi_mode_control =
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	2202      	movs	r2, #2
 80048c0:	729a      	strb	r2, [r3, #10]
		VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

	LOG_FUNCTION_END(status);

	return status;
 80048c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	371c      	adds	r7, #28
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr

080048d2 <VL53L1_low_power_auto_setup_manual_calibration>:

VL53L1_Error VL53L1_low_power_auto_setup_manual_calibration(
	VL53L1_DEV        Dev)
{
 80048d2:	b480      	push	{r7}
 80048d4:	b085      	sub	sp, #20
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	6078      	str	r0, [r7, #4]
	/*
	 * Setup ranges after the first one in low power auto mode by turning
	 * off FW calibration steps and programming static values
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	60fb      	str	r3, [r7, #12]

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 80048de:	2300      	movs	r3, #0
 80048e0:	72fb      	strb	r3, [r7, #11]

	LOG_FUNCTION_START("");

	/* save original vhv configs */
	pdev->low_power_auto_data.saved_vhv_init =
		pdev->stat_nvm.vhv_config__init;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	f893 2163 	ldrb.w	r2, [r3, #355]	; 0x163
	pdev->low_power_auto_data.saved_vhv_init =
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f883 22e8 	strb.w	r2, [r3, #744]	; 0x2e8
	pdev->low_power_auto_data.saved_vhv_timeout =
		pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	f893 2160 	ldrb.w	r2, [r3, #352]	; 0x160
	pdev->low_power_auto_data.saved_vhv_timeout =
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f883 22e9 	strb.w	r2, [r3, #745]	; 0x2e9

	/* disable VHV init */
	pdev->stat_nvm.vhv_config__init &= 0x7F;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	f893 3163 	ldrb.w	r3, [r3, #355]	; 0x163
 8004900:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004904:	b2da      	uxtb	r2, r3
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	f883 2163 	strb.w	r2, [r3, #355]	; 0x163
	/* set loop bound to tuning param */
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8004912:	f003 0303 	and.w	r3, r3, #3
 8004916:	b2da      	uxtb	r2, r3
		(pdev->low_power_auto_data.vhv_loop_bound << 2);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 800491e:	009b      	lsls	r3, r3, #2
 8004920:	b2db      	uxtb	r3, r3
		(pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound & 0x03) +
 8004922:	4413      	add	r3, r2
 8004924:	b2da      	uxtb	r2, r3
	pdev->stat_nvm.vhv_config__timeout_macrop_loop_bound =
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
	/* override phasecal */
	pdev->gen_cfg.phasecal_config__override = 0x01;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2201      	movs	r2, #1
 8004930:	f883 218d 	strb.w	r2, [r3, #397]	; 0x18d
	pdev->low_power_auto_data.first_run_phasecal_result =
		pdev->dbg_results.phasecal_result__vcsel_start;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	f893 22ae 	ldrb.w	r2, [r3, #686]	; 0x2ae
	pdev->low_power_auto_data.first_run_phasecal_result =
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	f883 22ea 	strb.w	r2, [r3, #746]	; 0x2ea
	pdev->gen_cfg.cal_config__vcsel_start =
		pdev->low_power_auto_data.first_run_phasecal_result;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f893 22ea 	ldrb.w	r2, [r3, #746]	; 0x2ea
	pdev->gen_cfg.cal_config__vcsel_start =
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	f883 2187 	strb.w	r2, [r3, #391]	; 0x187

	LOG_FUNCTION_END(status);

	return status;
 800494c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8004950:	4618      	mov	r0, r3
 8004952:	3714      	adds	r7, #20
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr

0800495c <VL53L1_low_power_auto_update_DSS>:

VL53L1_Error VL53L1_low_power_auto_update_DSS(
	VL53L1_DEV        Dev)
{
 800495c:	b480      	push	{r7}
 800495e:	b087      	sub	sp, #28
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]

	/*
	 * Do a DSS calculation and update manual config
	 */

	VL53L1_LLDriverData_t *pdev = VL53L1DevStructGetLLDriverHandle(Dev);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	60fb      	str	r3, [r7, #12]

	/* don't really use this here */
	VL53L1_Error  status = VL53L1_ERROR_NONE;
 8004968:	2300      	movs	r3, #0
 800496a:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	/* Calc total rate per spad */

	/* 9.7 format */
	utemp32a = pdev->sys_results.result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 +
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f8b3 31de 	ldrh.w	r3, [r3, #478]	; 0x1de
 8004972:	461a      	mov	r2, r3
		pdev->sys_results.result__ambient_count_rate_mcps_sd0;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f8b3 31d6 	ldrh.w	r3, [r3, #470]	; 0x1d6
	utemp32a = pdev->sys_results.result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 +
 800497a:	4413      	add	r3, r2
 800497c:	613b      	str	r3, [r7, #16]

	/* clip to 16 bits */
	if (utemp32a > 0xFFFF)
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004984:	d302      	bcc.n	800498c <VL53L1_low_power_auto_update_DSS+0x30>
		utemp32a = 0xFFFF;
 8004986:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800498a:	613b      	str	r3, [r7, #16]

	/* shift up to take advantage of 32 bits */
	/* 9.23 format */
	utemp32a = utemp32a << 16;
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	041b      	lsls	r3, r3, #16
 8004990:	613b      	str	r3, [r7, #16]

	/* check SPAD count */
	if (pdev->sys_results.result__dss_actual_effective_spads_sd0 == 0)
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	f8b3 31d2 	ldrh.w	r3, [r3, #466]	; 0x1d2
 8004998:	2b00      	cmp	r3, #0
 800499a:	d102      	bne.n	80049a2 <VL53L1_low_power_auto_update_DSS+0x46>
		status = VL53L1_ERROR_DIVISION_BY_ZERO;
 800499c:	23f1      	movs	r3, #241	; 0xf1
 800499e:	75fb      	strb	r3, [r7, #23]
 80049a0:	e035      	b.n	8004a0e <VL53L1_low_power_auto_update_DSS+0xb2>
	else {
		/* format 17.15 */
		utemp32a = utemp32a /
			pdev->sys_results.result__dss_actual_effective_spads_sd0;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	f8b3 31d2 	ldrh.w	r3, [r3, #466]	; 0x1d2
 80049a8:	461a      	mov	r2, r3
		utemp32a = utemp32a /
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80049b0:	613b      	str	r3, [r7, #16]
		/* save intermediate result */
		pdev->low_power_auto_data.dss__total_rate_per_spad_mcps =
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	693a      	ldr	r2, [r7, #16]
 80049b6:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
			utemp32a;

		/* get the target rate and shift up by 16
		 * format 9.23 */
		utemp32a = pdev->stat_cfg.dss_config__target_total_rate_mcps <<
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
 80049c0:	041b      	lsls	r3, r3, #16
 80049c2:	613b      	str	r3, [r7, #16]
			16;

		/* check for divide by zero */
		if (pdev->low_power_auto_data.dss__total_rate_per_spad_mcps == 0)
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d102      	bne.n	80049d4 <VL53L1_low_power_auto_update_DSS+0x78>
			status = VL53L1_ERROR_DIVISION_BY_ZERO;
 80049ce:	23f1      	movs	r3, #241	; 0xf1
 80049d0:	75fb      	strb	r3, [r7, #23]
 80049d2:	e01c      	b.n	8004a0e <VL53L1_low_power_auto_update_DSS+0xb2>
		else {
			/* divide by rate per spad
			 * format 24.8 */
			utemp32a = utemp32a /
				pdev->low_power_auto_data.dss__total_rate_per_spad_mcps;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
			utemp32a = utemp32a /
 80049da:	693a      	ldr	r2, [r7, #16]
 80049dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80049e0:	613b      	str	r3, [r7, #16]

			/* clip to 16 bit */
			if (utemp32a > 0xFFFF)
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049e8:	d302      	bcc.n	80049f0 <VL53L1_low_power_auto_update_DSS+0x94>
				utemp32a = 0xFFFF;
 80049ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80049ee:	613b      	str	r3, [r7, #16]

			/* save result in low power auto data */
			pdev->low_power_auto_data.dss__required_spads =
				(uint16_t)utemp32a;
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	b29a      	uxth	r2, r3
			pdev->low_power_auto_data.dss__required_spads =
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0

			/* override DSS config */
			pdev->gen_cfg.dss_config__manual_effective_spads_select =
				pdev->low_power_auto_data.dss__required_spads;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	f8b3 22f0 	ldrh.w	r2, [r3, #752]	; 0x2f0
			pdev->gen_cfg.dss_config__manual_effective_spads_select =
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f8a3 2194 	strh.w	r2, [r3, #404]	; 0x194
			pdev->gen_cfg.dss_config__roi_mode_control =
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2202      	movs	r2, #2
 8004a0a:	f883 218e 	strb.w	r2, [r3, #398]	; 0x18e
				VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;
		}

	}

	if (status == VL53L1_ERROR_DIVISION_BY_ZERO) {
 8004a0e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004a12:	f113 0f0f 	cmn.w	r3, #15
 8004a16:	d110      	bne.n	8004a3a <VL53L1_low_power_auto_update_DSS+0xde>
		/* We want to gracefully set a spad target, not just exit with
		* an error */

		/* set target to mid point */
		pdev->low_power_auto_data.dss__required_spads = 0x8000;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004a1e:	f8a3 22f0 	strh.w	r2, [r3, #752]	; 0x2f0

		/* override DSS config */
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
		pdev->low_power_auto_data.dss__required_spads;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	f8b3 22f0 	ldrh.w	r2, [r3, #752]	; 0x2f0
		pdev->gen_cfg.dss_config__manual_effective_spads_select =
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f8a3 2194 	strh.w	r2, [r3, #404]	; 0x194
		pdev->gen_cfg.dss_config__roi_mode_control =
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2202      	movs	r2, #2
 8004a32:	f883 218e 	strb.w	r2, [r3, #398]	; 0x18e
		VL53L1_DEVICEDSSMODE__REQUESTED_EFFFECTIVE_SPADS;

		/* reset error */
		status = VL53L1_ERROR_NONE;
 8004a36:	2300      	movs	r3, #0
 8004a38:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(status);

	return status;
 8004a3a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	371c      	adds	r7, #28
 8004a42:	46bd      	mov	sp, r7
 8004a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a48:	4770      	bx	lr

08004a4a <VL53L1_calc_pll_period_us>:
	level, VL53L1_TRACE_FUNCTION_NONE, ##__VA_ARGS__)


uint32_t VL53L1_calc_pll_period_us(
	uint16_t  fast_osc_frequency)
{
 8004a4a:	b480      	push	{r7}
 8004a4c:	b085      	sub	sp, #20
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	4603      	mov	r3, r0
 8004a52:	80fb      	strh	r3, [r7, #6]
	 *  ->  only the 18 LS bits are used
	 *
	 *  2^30 = (2^24) (1.0us) * 4096 (2^12) / 64 (PLL Multiplier)
	 */

	uint32_t  pll_period_us        = 0;
 8004a54:	2300      	movs	r3, #0
 8004a56:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	pll_period_us = (0x01 << 30) / fast_osc_frequency;
 8004a58:	88fb      	ldrh	r3, [r7, #6]
 8004a5a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004a5e:	fb92 f3f3 	sdiv	r3, r2, r3
 8004a62:	60fb      	str	r3, [r7, #12]
			pll_period_us);
#endif

	LOG_FUNCTION_END(0);

	return pll_period_us;
 8004a64:	68fb      	ldr	r3, [r7, #12]
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3714      	adds	r7, #20
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a70:	4770      	bx	lr

08004a72 <VL53L1_decode_vcsel_period>:
	return range_mm;
}
#endif

uint8_t VL53L1_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 8004a72:	b480      	push	{r7}
 8004a74:	b085      	sub	sp, #20
 8004a76:	af00      	add	r7, sp, #0
 8004a78:	4603      	mov	r3, r0
 8004a7a:	71fb      	strb	r3, [r7, #7]
	/*
	 * Converts the encoded VCSEL period register value into
	 * the real period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 8004a80:	79fb      	ldrb	r3, [r7, #7]
 8004a82:	3301      	adds	r3, #1
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	005b      	lsls	r3, r3, #1
 8004a88:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 8004a8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3714      	adds	r7, #20
 8004a90:	46bd      	mov	sp, r7
 8004a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a96:	4770      	bx	lr

08004a98 <VL53L1_decode_row_col>:

void VL53L1_decode_row_col(
	uint8_t  spad_number,
	uint8_t  *prow,
	uint8_t  *pcol)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b085      	sub	sp, #20
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	60b9      	str	r1, [r7, #8]
 8004aa2:	607a      	str	r2, [r7, #4]
 8004aa4:	73fb      	strb	r3, [r7, #15]
	/**
	 *  Decodes the array (row,col) location from
	 *  the input SPAD number
	 */

	if (spad_number > 127) {
 8004aa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	da10      	bge.n	8004ad0 <VL53L1_decode_row_col+0x38>
		*prow = 8 + ((255-spad_number) & 0x07);
 8004aae:	7bfb      	ldrb	r3, [r7, #15]
 8004ab0:	43db      	mvns	r3, r3
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	f003 0307 	and.w	r3, r3, #7
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	3308      	adds	r3, #8
 8004abc:	b2da      	uxtb	r2, r3
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	701a      	strb	r2, [r3, #0]
		*pcol = (spad_number-128) >> 3;
 8004ac2:	7bfb      	ldrb	r3, [r7, #15]
 8004ac4:	3b80      	subs	r3, #128	; 0x80
 8004ac6:	10db      	asrs	r3, r3, #3
 8004ac8:	b2da      	uxtb	r2, r3
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	701a      	strb	r2, [r3, #0]
	} else {
		*prow = spad_number & 0x07;
		*pcol = (127-spad_number) >> 3;
	}
}
 8004ace:	e00c      	b.n	8004aea <VL53L1_decode_row_col+0x52>
		*prow = spad_number & 0x07;
 8004ad0:	7bfb      	ldrb	r3, [r7, #15]
 8004ad2:	f003 0307 	and.w	r3, r3, #7
 8004ad6:	b2da      	uxtb	r2, r3
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	701a      	strb	r2, [r3, #0]
		*pcol = (127-spad_number) >> 3;
 8004adc:	7bfb      	ldrb	r3, [r7, #15]
 8004ade:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8004ae2:	10db      	asrs	r3, r3, #3
 8004ae4:	b2da      	uxtb	r2, r3
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	701a      	strb	r2, [r3, #0]
}
 8004aea:	bf00      	nop
 8004aec:	3714      	adds	r7, #20
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr

08004af6 <VL53L1_i2c_encode_static_nvm_managed>:

VL53L1_Error VL53L1_i2c_encode_static_nvm_managed(
	VL53L1_static_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8004af6:	b580      	push	{r7, lr}
 8004af8:	b086      	sub	sp, #24
 8004afa:	af00      	add	r7, sp, #0
 8004afc:	60f8      	str	r0, [r7, #12]
 8004afe:	460b      	mov	r3, r1
 8004b00:	607a      	str	r2, [r7, #4]
 8004b02:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_static_nvm_managed_t into a I2C write buffer
	 * Buffer must be at least 11 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8004b04:	2300      	movs	r3, #0
 8004b06:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 8004b08:	897b      	ldrh	r3, [r7, #10]
 8004b0a:	2b0a      	cmp	r3, #10
 8004b0c:	d802      	bhi.n	8004b14 <VL53L1_i2c_encode_static_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8004b0e:	f06f 0309 	mvn.w	r3, #9
 8004b12:	e047      	b.n	8004ba4 <VL53L1_i2c_encode_static_nvm_managed+0xae>

	*(pbuffer +   0) =
		pdata->i2c_slave__device_address & 0x7F;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	781b      	ldrb	r3, [r3, #0]
 8004b18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b1c:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	3301      	adds	r3, #1
		pdata->ana_config__vhv_ref_sel_vddpix & 0xF;
 8004b26:	68fa      	ldr	r2, [r7, #12]
 8004b28:	7852      	ldrb	r2, [r2, #1]
 8004b2a:	f002 020f 	and.w	r2, r2, #15
 8004b2e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 8004b30:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	3302      	adds	r3, #2
		pdata->ana_config__vhv_ref_sel_vquench & 0x7F;
 8004b36:	68fa      	ldr	r2, [r7, #12]
 8004b38:	7892      	ldrb	r2, [r2, #2]
 8004b3a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004b3e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 8004b40:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	3303      	adds	r3, #3
		pdata->ana_config__reg_avdd1v2_sel & 0x3;
 8004b46:	68fa      	ldr	r2, [r7, #12]
 8004b48:	78d2      	ldrb	r2, [r2, #3]
 8004b4a:	f002 0203 	and.w	r2, r2, #3
 8004b4e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 8004b50:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	3304      	adds	r3, #4
		pdata->ana_config__fast_osc__trim & 0x7F;
 8004b56:	68fa      	ldr	r2, [r7, #12]
 8004b58:	7912      	ldrb	r2, [r2, #4]
 8004b5a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004b5e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 8004b60:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	88d8      	ldrh	r0, [r3, #6]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	3305      	adds	r3, #5
 8004b6a:	461a      	mov	r2, r3
 8004b6c:	2102      	movs	r1, #2
 8004b6e:	f7ff fa2c 	bl	8003fca <VL53L1_i2c_encode_uint16_t>
		pdata->osc_measured__fast_osc__frequency,
		2,
		pbuffer +   5);
	*(pbuffer +   7) =
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	3307      	adds	r3, #7
		pdata->vhv_config__timeout_macrop_loop_bound;
 8004b76:	68fa      	ldr	r2, [r7, #12]
 8004b78:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 8004b7a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	3308      	adds	r3, #8
		pdata->vhv_config__count_thresh;
 8004b80:	68fa      	ldr	r2, [r7, #12]
 8004b82:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 8004b84:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	3309      	adds	r3, #9
		pdata->vhv_config__offset & 0x3F;
 8004b8a:	68fa      	ldr	r2, [r7, #12]
 8004b8c:	7a92      	ldrb	r2, [r2, #10]
 8004b8e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8004b92:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8004b94:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	330a      	adds	r3, #10
		pdata->vhv_config__init;
 8004b9a:	68fa      	ldr	r2, [r7, #12]
 8004b9c:	7ad2      	ldrb	r2, [r2, #11]
	*(pbuffer +  10) =
 8004b9e:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 8004ba0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3718      	adds	r7, #24
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}

08004bac <VL53L1_i2c_decode_static_nvm_managed>:

VL53L1_Error VL53L1_i2c_decode_static_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_static_nvm_managed_t  *pdata)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b086      	sub	sp, #24
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	60b9      	str	r1, [r7, #8]
 8004bb6:	607a      	str	r2, [r7, #4]
 8004bb8:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_static_nvm_managed_t from the input I2C read buffer
	 * Buffer must be at least 11 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 8004bbe:	89fb      	ldrh	r3, [r7, #14]
 8004bc0:	2b0a      	cmp	r3, #10
 8004bc2:	d802      	bhi.n	8004bca <VL53L1_i2c_decode_static_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8004bc4:	f06f 0309 	mvn.w	r3, #9
 8004bc8:	e046      	b.n	8004c58 <VL53L1_i2c_decode_static_nvm_managed+0xac>

	pdata->i2c_slave__device_address =
		(*(pbuffer +   0)) & 0x7F;
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	781b      	ldrb	r3, [r3, #0]
 8004bce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bd2:	b2da      	uxtb	r2, r3
	pdata->i2c_slave__device_address =
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	701a      	strb	r2, [r3, #0]
	pdata->ana_config__vhv_ref_sel_vddpix =
		(*(pbuffer +   1)) & 0xF;
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	3301      	adds	r3, #1
 8004bdc:	781b      	ldrb	r3, [r3, #0]
 8004bde:	f003 030f 	and.w	r3, r3, #15
 8004be2:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vddpix =
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	705a      	strb	r2, [r3, #1]
	pdata->ana_config__vhv_ref_sel_vquench =
		(*(pbuffer +   2)) & 0x7F;
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	3302      	adds	r3, #2
 8004bec:	781b      	ldrb	r3, [r3, #0]
 8004bee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bf2:	b2da      	uxtb	r2, r3
	pdata->ana_config__vhv_ref_sel_vquench =
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	709a      	strb	r2, [r3, #2]
	pdata->ana_config__reg_avdd1v2_sel =
		(*(pbuffer +   3)) & 0x3;
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	3303      	adds	r3, #3
 8004bfc:	781b      	ldrb	r3, [r3, #0]
 8004bfe:	f003 0303 	and.w	r3, r3, #3
 8004c02:	b2da      	uxtb	r2, r3
	pdata->ana_config__reg_avdd1v2_sel =
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	70da      	strb	r2, [r3, #3]
	pdata->ana_config__fast_osc__trim =
		(*(pbuffer +   4)) & 0x7F;
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	3304      	adds	r3, #4
 8004c0c:	781b      	ldrb	r3, [r3, #0]
 8004c0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c12:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim =
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	711a      	strb	r2, [r3, #4]
	pdata->osc_measured__fast_osc__frequency =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   5));
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	3305      	adds	r3, #5
 8004c1c:	4619      	mov	r1, r3
 8004c1e:	2002      	movs	r0, #2
 8004c20:	f7ff f9fd 	bl	800401e <VL53L1_i2c_decode_uint16_t>
 8004c24:	4603      	mov	r3, r0
 8004c26:	461a      	mov	r2, r3
	pdata->osc_measured__fast_osc__frequency =
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	80da      	strh	r2, [r3, #6]
	pdata->vhv_config__timeout_macrop_loop_bound =
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	79da      	ldrb	r2, [r3, #7]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	721a      	strb	r2, [r3, #8]
		(*(pbuffer +   7));
	pdata->vhv_config__count_thresh =
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	7a1a      	ldrb	r2, [r3, #8]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	725a      	strb	r2, [r3, #9]
		(*(pbuffer +   8));
	pdata->vhv_config__offset =
		(*(pbuffer +   9)) & 0x3F;
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	3309      	adds	r3, #9
 8004c40:	781b      	ldrb	r3, [r3, #0]
 8004c42:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c46:	b2da      	uxtb	r2, r3
	pdata->vhv_config__offset =
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	729a      	strb	r2, [r3, #10]
	pdata->vhv_config__init =
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	7a9a      	ldrb	r2, [r3, #10]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	72da      	strb	r2, [r3, #11]
		(*(pbuffer +  10));

	LOG_FUNCTION_END(status);

	return status;
 8004c54:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3718      	adds	r7, #24
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}

08004c60 <VL53L1_get_static_nvm_managed>:


VL53L1_Error VL53L1_get_static_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_static_nvm_managed_t  *pdata)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b086      	sub	sp, #24
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
 8004c68:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_static_nvm_managed_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	75fb      	strb	r3, [r7, #23]
	uint8_t comms_buffer[VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 8004c6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d108      	bne.n	8004c88 <VL53L1_get_static_nvm_managed+0x28>
		status = VL53L1_ReadMulti(
 8004c76:	f107 020c 	add.w	r2, r7, #12
 8004c7a:	230b      	movs	r3, #11
 8004c7c:	2101      	movs	r1, #1
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f001 f8e4 	bl	8005e4c <VL53L1_ReadMulti>
 8004c84:	4603      	mov	r3, r0
 8004c86:	75fb      	strb	r3, [r7, #23]
			Dev,
			VL53L1_I2C_SLAVE__DEVICE_ADDRESS,
			comms_buffer,
			VL53L1_STATIC_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 8004c88:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d108      	bne.n	8004ca2 <VL53L1_get_static_nvm_managed+0x42>
		status = VL53L1_i2c_decode_static_nvm_managed(
 8004c90:	f107 030c 	add.w	r3, r7, #12
 8004c94:	683a      	ldr	r2, [r7, #0]
 8004c96:	4619      	mov	r1, r3
 8004c98:	200b      	movs	r0, #11
 8004c9a:	f7ff ff87 	bl	8004bac <VL53L1_i2c_decode_static_nvm_managed>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	75fb      	strb	r3, [r7, #23]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 8004ca2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3718      	adds	r7, #24
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}

08004cae <VL53L1_i2c_encode_customer_nvm_managed>:

VL53L1_Error VL53L1_i2c_encode_customer_nvm_managed(
	VL53L1_customer_nvm_managed_t *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8004cae:	b580      	push	{r7, lr}
 8004cb0:	b086      	sub	sp, #24
 8004cb2:	af00      	add	r7, sp, #0
 8004cb4:	60f8      	str	r0, [r7, #12]
 8004cb6:	460b      	mov	r3, r1
 8004cb8:	607a      	str	r2, [r7, #4]
 8004cba:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_customer_nvm_managed_t into a I2C write buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 8004cc0:	897b      	ldrh	r3, [r7, #10]
 8004cc2:	2b16      	cmp	r3, #22
 8004cc4:	d802      	bhi.n	8004ccc <VL53L1_i2c_encode_customer_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8004cc6:	f06f 0309 	mvn.w	r3, #9
 8004cca:	e076      	b.n	8004dba <VL53L1_i2c_encode_customer_nvm_managed+0x10c>

	*(pbuffer +   0) =
		pdata->global_config__spad_enables_ref_0;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	3301      	adds	r3, #1
		pdata->global_config__spad_enables_ref_1;
 8004cd8:	68fa      	ldr	r2, [r7, #12]
 8004cda:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 8004cdc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	3302      	adds	r3, #2
		pdata->global_config__spad_enables_ref_2;
 8004ce2:	68fa      	ldr	r2, [r7, #12]
 8004ce4:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 8004ce6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	3303      	adds	r3, #3
		pdata->global_config__spad_enables_ref_3;
 8004cec:	68fa      	ldr	r2, [r7, #12]
 8004cee:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 8004cf0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	3304      	adds	r3, #4
		pdata->global_config__spad_enables_ref_4;
 8004cf6:	68fa      	ldr	r2, [r7, #12]
 8004cf8:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 8004cfa:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	3305      	adds	r3, #5
		pdata->global_config__spad_enables_ref_5 & 0xF;
 8004d00:	68fa      	ldr	r2, [r7, #12]
 8004d02:	7952      	ldrb	r2, [r2, #5]
 8004d04:	f002 020f 	and.w	r2, r2, #15
 8004d08:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 8004d0a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	3306      	adds	r3, #6
		pdata->global_config__ref_en_start_select;
 8004d10:	68fa      	ldr	r2, [r7, #12]
 8004d12:	7992      	ldrb	r2, [r2, #6]
	*(pbuffer +   6) =
 8004d14:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	3307      	adds	r3, #7
		pdata->ref_spad_man__num_requested_ref_spads & 0x3F;
 8004d1a:	68fa      	ldr	r2, [r7, #12]
 8004d1c:	79d2      	ldrb	r2, [r2, #7]
 8004d1e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8004d22:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 8004d24:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	3308      	adds	r3, #8
		pdata->ref_spad_man__ref_location & 0x3;
 8004d2a:	68fa      	ldr	r2, [r7, #12]
 8004d2c:	7a12      	ldrb	r2, [r2, #8]
 8004d2e:	f002 0203 	and.w	r2, r2, #3
 8004d32:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 8004d34:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	8958      	ldrh	r0, [r3, #10]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	3309      	adds	r3, #9
 8004d3e:	461a      	mov	r2, r3
 8004d40:	2102      	movs	r1, #2
 8004d42:	f7ff f942 	bl	8003fca <VL53L1_i2c_encode_uint16_t>
		pdata->algo__crosstalk_compensation_plane_offset_kcps,
		2,
		pbuffer +   9);
	VL53L1_i2c_encode_int16_t(
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	330b      	adds	r3, #11
 8004d50:	461a      	mov	r2, r3
 8004d52:	2102      	movs	r1, #2
 8004d54:	f7ff f983 	bl	800405e <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_x_plane_gradient_kcps,
		2,
		pbuffer +  11);
	VL53L1_i2c_encode_int16_t(
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	330d      	adds	r3, #13
 8004d62:	461a      	mov	r2, r3
 8004d64:	2102      	movs	r1, #2
 8004d66:	f7ff f97a 	bl	800405e <VL53L1_i2c_encode_int16_t>
		pdata->algo__crosstalk_compensation_y_plane_gradient_kcps,
		2,
		pbuffer +  13);
	VL53L1_i2c_encode_uint16_t(
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	8a18      	ldrh	r0, [r3, #16]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	330f      	adds	r3, #15
 8004d72:	461a      	mov	r2, r3
 8004d74:	2102      	movs	r1, #2
 8004d76:	f7ff f928 	bl	8003fca <VL53L1_i2c_encode_uint16_t>
		pdata->ref_spad_char__total_rate_target_mcps,
		2,
		pbuffer +  15);
	VL53L1_i2c_encode_int16_t(
		pdata->algo__part_to_part_range_offset_mm & 0x1FFF,
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
	VL53L1_i2c_encode_int16_t(
 8004d80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004d84:	b218      	sxth	r0, r3
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	3311      	adds	r3, #17
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	2102      	movs	r1, #2
 8004d8e:	f7ff f966 	bl	800405e <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  17);
	VL53L1_i2c_encode_int16_t(
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	f9b3 0014 	ldrsh.w	r0, [r3, #20]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	3313      	adds	r3, #19
 8004d9c:	461a      	mov	r2, r3
 8004d9e:	2102      	movs	r1, #2
 8004da0:	f7ff f95d 	bl	800405e <VL53L1_i2c_encode_int16_t>
		pdata->mm_config__inner_offset_mm,
		2,
		pbuffer +  19);
	VL53L1_i2c_encode_int16_t(
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	f9b3 0016 	ldrsh.w	r0, [r3, #22]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	3315      	adds	r3, #21
 8004dae:	461a      	mov	r2, r3
 8004db0:	2102      	movs	r1, #2
 8004db2:	f7ff f954 	bl	800405e <VL53L1_i2c_encode_int16_t>
		2,
		pbuffer +  21);
	LOG_FUNCTION_END(status);


	return status;
 8004db6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3718      	adds	r7, #24
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}

08004dc2 <VL53L1_i2c_decode_customer_nvm_managed>:

VL53L1_Error VL53L1_i2c_decode_customer_nvm_managed(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 8004dc2:	b580      	push	{r7, lr}
 8004dc4:	b086      	sub	sp, #24
 8004dc6:	af00      	add	r7, sp, #0
 8004dc8:	4603      	mov	r3, r0
 8004dca:	60b9      	str	r1, [r7, #8]
 8004dcc:	607a      	str	r2, [r7, #4]
 8004dce:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_customer_nvm_managed_t from the input I2C read buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES > buf_size)
 8004dd4:	89fb      	ldrh	r3, [r7, #14]
 8004dd6:	2b16      	cmp	r3, #22
 8004dd8:	d802      	bhi.n	8004de0 <VL53L1_i2c_decode_customer_nvm_managed+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8004dda:	f06f 0309 	mvn.w	r3, #9
 8004dde:	e079      	b.n	8004ed4 <VL53L1_i2c_decode_customer_nvm_managed+0x112>

	pdata->global_config__spad_enables_ref_0 =
		(*(pbuffer +   0));
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	781a      	ldrb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_0 =
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	701a      	strb	r2, [r3, #0]
	pdata->global_config__spad_enables_ref_1 =
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	785a      	ldrb	r2, [r3, #1]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->global_config__spad_enables_ref_2 =
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	789a      	ldrb	r2, [r3, #2]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->global_config__spad_enables_ref_3 =
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	78da      	ldrb	r2, [r3, #3]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->global_config__spad_enables_ref_4 =
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	791a      	ldrb	r2, [r3, #4]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	711a      	strb	r2, [r3, #4]
		(*(pbuffer +   4));
	pdata->global_config__spad_enables_ref_5 =
		(*(pbuffer +   5)) & 0xF;
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	3305      	adds	r3, #5
 8004e0c:	781b      	ldrb	r3, [r3, #0]
 8004e0e:	f003 030f 	and.w	r3, r3, #15
 8004e12:	b2da      	uxtb	r2, r3
	pdata->global_config__spad_enables_ref_5 =
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	715a      	strb	r2, [r3, #5]
	pdata->global_config__ref_en_start_select =
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	799a      	ldrb	r2, [r3, #6]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	719a      	strb	r2, [r3, #6]
		(*(pbuffer +   6));
	pdata->ref_spad_man__num_requested_ref_spads =
		(*(pbuffer +   7)) & 0x3F;
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	3307      	adds	r3, #7
 8004e24:	781b      	ldrb	r3, [r3, #0]
 8004e26:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e2a:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__num_requested_ref_spads =
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	71da      	strb	r2, [r3, #7]
	pdata->ref_spad_man__ref_location =
		(*(pbuffer +   8)) & 0x3;
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	3308      	adds	r3, #8
 8004e34:	781b      	ldrb	r3, [r3, #0]
 8004e36:	f003 0303 	and.w	r3, r3, #3
 8004e3a:	b2da      	uxtb	r2, r3
	pdata->ref_spad_man__ref_location =
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	721a      	strb	r2, [r3, #8]
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   9));
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	3309      	adds	r3, #9
 8004e44:	4619      	mov	r1, r3
 8004e46:	2002      	movs	r0, #2
 8004e48:	f7ff f8e9 	bl	800401e <VL53L1_i2c_decode_uint16_t>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_plane_offset_kcps =
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	815a      	strh	r2, [r3, #10]
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  11));
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	330b      	adds	r3, #11
 8004e58:	4619      	mov	r1, r3
 8004e5a:	2002      	movs	r0, #2
 8004e5c:	f7ff f92a 	bl	80040b4 <VL53L1_i2c_decode_int16_t>
 8004e60:	4603      	mov	r3, r0
 8004e62:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_x_plane_gradient_kcps =
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	819a      	strh	r2, [r3, #12]
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  13));
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	330d      	adds	r3, #13
 8004e6c:	4619      	mov	r1, r3
 8004e6e:	2002      	movs	r0, #2
 8004e70:	f7ff f920 	bl	80040b4 <VL53L1_i2c_decode_int16_t>
 8004e74:	4603      	mov	r3, r0
 8004e76:	461a      	mov	r2, r3
	pdata->algo__crosstalk_compensation_y_plane_gradient_kcps =
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	81da      	strh	r2, [r3, #14]
	pdata->ref_spad_char__total_rate_target_mcps =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  15));
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	330f      	adds	r3, #15
 8004e80:	4619      	mov	r1, r3
 8004e82:	2002      	movs	r0, #2
 8004e84:	f7ff f8cb 	bl	800401e <VL53L1_i2c_decode_uint16_t>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	461a      	mov	r2, r3
	pdata->ref_spad_char__total_rate_target_mcps =
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	821a      	strh	r2, [r3, #16]
	pdata->algo__part_to_part_range_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  17)) & 0x1FFF;
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	3311      	adds	r3, #17
 8004e94:	4619      	mov	r1, r3
 8004e96:	2002      	movs	r0, #2
 8004e98:	f7ff f90c 	bl	80040b4 <VL53L1_i2c_decode_int16_t>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004ea2:	b21a      	sxth	r2, r3
	pdata->algo__part_to_part_range_offset_mm =
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	825a      	strh	r2, [r3, #18]
	pdata->mm_config__inner_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  19));
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	3313      	adds	r3, #19
 8004eac:	4619      	mov	r1, r3
 8004eae:	2002      	movs	r0, #2
 8004eb0:	f7ff f900 	bl	80040b4 <VL53L1_i2c_decode_int16_t>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	461a      	mov	r2, r3
	pdata->mm_config__inner_offset_mm =
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	829a      	strh	r2, [r3, #20]
	pdata->mm_config__outer_offset_mm =
		(VL53L1_i2c_decode_int16_t(2, pbuffer +  21));
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	3315      	adds	r3, #21
 8004ec0:	4619      	mov	r1, r3
 8004ec2:	2002      	movs	r0, #2
 8004ec4:	f7ff f8f6 	bl	80040b4 <VL53L1_i2c_decode_int16_t>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	461a      	mov	r2, r3
	pdata->mm_config__outer_offset_mm =
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	82da      	strh	r2, [r3, #22]

	LOG_FUNCTION_END(status);

	return status;
 8004ed0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3718      	adds	r7, #24
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}

08004edc <VL53L1_get_customer_nvm_managed>:


VL53L1_Error VL53L1_get_customer_nvm_managed(
	VL53L1_DEV                 Dev,
	VL53L1_customer_nvm_managed_t  *pdata)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b088      	sub	sp, #32
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_customer_nvm_managed_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	77fb      	strb	r3, [r7, #31]
	uint8_t comms_buffer[VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 8004eea:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d108      	bne.n	8004f04 <VL53L1_get_customer_nvm_managed+0x28>
		status = VL53L1_ReadMulti(
 8004ef2:	f107 0208 	add.w	r2, r7, #8
 8004ef6:	2317      	movs	r3, #23
 8004ef8:	210d      	movs	r1, #13
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f000 ffa6 	bl	8005e4c <VL53L1_ReadMulti>
 8004f00:	4603      	mov	r3, r0
 8004f02:	77fb      	strb	r3, [r7, #31]
			Dev,
			VL53L1_GLOBAL_CONFIG__SPAD_ENABLES_REF_0,
			comms_buffer,
			VL53L1_CUSTOMER_NVM_MANAGED_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 8004f04:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d108      	bne.n	8004f1e <VL53L1_get_customer_nvm_managed+0x42>
		status = VL53L1_i2c_decode_customer_nvm_managed(
 8004f0c:	f107 0308 	add.w	r3, r7, #8
 8004f10:	683a      	ldr	r2, [r7, #0]
 8004f12:	4619      	mov	r1, r3
 8004f14:	2017      	movs	r0, #23
 8004f16:	f7ff ff54 	bl	8004dc2 <VL53L1_i2c_decode_customer_nvm_managed>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	77fb      	strb	r3, [r7, #31]
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 8004f1e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3720      	adds	r7, #32
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}

08004f2a <VL53L1_i2c_encode_static_config>:

VL53L1_Error VL53L1_i2c_encode_static_config(
	VL53L1_static_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8004f2a:	b580      	push	{r7, lr}
 8004f2c:	b086      	sub	sp, #24
 8004f2e:	af00      	add	r7, sp, #0
 8004f30:	60f8      	str	r0, [r7, #12]
 8004f32:	460b      	mov	r3, r1
 8004f34:	607a      	str	r2, [r7, #4]
 8004f36:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_static_config_t into a I2C write buffer
	 * Buffer must be at least 32 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_STATIC_CONFIG_I2C_SIZE_BYTES > buf_size)
 8004f3c:	897b      	ldrh	r3, [r7, #10]
 8004f3e:	2b1f      	cmp	r3, #31
 8004f40:	d802      	bhi.n	8004f48 <VL53L1_i2c_encode_static_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8004f42:	f06f 0309 	mvn.w	r3, #9
 8004f46:	e0cf      	b.n	80050e8 <VL53L1_i2c_encode_static_config+0x1be>

	VL53L1_i2c_encode_uint16_t(
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	881b      	ldrh	r3, [r3, #0]
 8004f4c:	687a      	ldr	r2, [r7, #4]
 8004f4e:	2102      	movs	r1, #2
 8004f50:	4618      	mov	r0, r3
 8004f52:	f7ff f83a 	bl	8003fca <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__target_total_rate_mcps,
		2,
		pbuffer +   0);
	*(pbuffer +   2) =
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	3302      	adds	r3, #2
		pdata->debug__ctrl & 0x1;
 8004f5a:	68fa      	ldr	r2, [r7, #12]
 8004f5c:	7892      	ldrb	r2, [r2, #2]
 8004f5e:	f002 0201 	and.w	r2, r2, #1
 8004f62:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 8004f64:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	3303      	adds	r3, #3
		pdata->test_mode__ctrl & 0xF;
 8004f6a:	68fa      	ldr	r2, [r7, #12]
 8004f6c:	78d2      	ldrb	r2, [r2, #3]
 8004f6e:	f002 020f 	and.w	r2, r2, #15
 8004f72:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 8004f74:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	3304      	adds	r3, #4
		pdata->clk_gating__ctrl & 0xF;
 8004f7a:	68fa      	ldr	r2, [r7, #12]
 8004f7c:	7912      	ldrb	r2, [r2, #4]
 8004f7e:	f002 020f 	and.w	r2, r2, #15
 8004f82:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 8004f84:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	3305      	adds	r3, #5
		pdata->nvm_bist__ctrl & 0x1F;
 8004f8a:	68fa      	ldr	r2, [r7, #12]
 8004f8c:	7952      	ldrb	r2, [r2, #5]
 8004f8e:	f002 021f 	and.w	r2, r2, #31
 8004f92:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 8004f94:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	3306      	adds	r3, #6
		pdata->nvm_bist__num_nvm_words & 0x7F;
 8004f9a:	68fa      	ldr	r2, [r7, #12]
 8004f9c:	7992      	ldrb	r2, [r2, #6]
 8004f9e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004fa2:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 8004fa4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	3307      	adds	r3, #7
		pdata->nvm_bist__start_address & 0x7F;
 8004faa:	68fa      	ldr	r2, [r7, #12]
 8004fac:	79d2      	ldrb	r2, [r2, #7]
 8004fae:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004fb2:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 8004fb4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	3308      	adds	r3, #8
		pdata->host_if__status & 0x1;
 8004fba:	68fa      	ldr	r2, [r7, #12]
 8004fbc:	7a12      	ldrb	r2, [r2, #8]
 8004fbe:	f002 0201 	and.w	r2, r2, #1
 8004fc2:	b2d2      	uxtb	r2, r2
	*(pbuffer +   8) =
 8004fc4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	3309      	adds	r3, #9
		pdata->pad_i2c_hv__config;
 8004fca:	68fa      	ldr	r2, [r7, #12]
 8004fcc:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   9) =
 8004fce:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	330a      	adds	r3, #10
		pdata->pad_i2c_hv__extsup_config & 0x1;
 8004fd4:	68fa      	ldr	r2, [r7, #12]
 8004fd6:	7a92      	ldrb	r2, [r2, #10]
 8004fd8:	f002 0201 	and.w	r2, r2, #1
 8004fdc:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 8004fde:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	330b      	adds	r3, #11
		pdata->gpio_hv_pad__ctrl & 0x3;
 8004fe4:	68fa      	ldr	r2, [r7, #12]
 8004fe6:	7ad2      	ldrb	r2, [r2, #11]
 8004fe8:	f002 0203 	and.w	r2, r2, #3
 8004fec:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 8004fee:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	330c      	adds	r3, #12
		pdata->gpio_hv_mux__ctrl & 0x1F;
 8004ff4:	68fa      	ldr	r2, [r7, #12]
 8004ff6:	7b12      	ldrb	r2, [r2, #12]
 8004ff8:	f002 021f 	and.w	r2, r2, #31
 8004ffc:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 8004ffe:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	330d      	adds	r3, #13
		pdata->gpio__tio_hv_status & 0x3;
 8005004:	68fa      	ldr	r2, [r7, #12]
 8005006:	7b52      	ldrb	r2, [r2, #13]
 8005008:	f002 0203 	and.w	r2, r2, #3
 800500c:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 800500e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	330e      	adds	r3, #14
		pdata->gpio__fio_hv_status & 0x3;
 8005014:	68fa      	ldr	r2, [r7, #12]
 8005016:	7b92      	ldrb	r2, [r2, #14]
 8005018:	f002 0203 	and.w	r2, r2, #3
 800501c:	b2d2      	uxtb	r2, r2
	*(pbuffer +  14) =
 800501e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	330f      	adds	r3, #15
		pdata->ana_config__spad_sel_pswidth & 0x7;
 8005024:	68fa      	ldr	r2, [r7, #12]
 8005026:	7bd2      	ldrb	r2, [r2, #15]
 8005028:	f002 0207 	and.w	r2, r2, #7
 800502c:	b2d2      	uxtb	r2, r2
	*(pbuffer +  15) =
 800502e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	3310      	adds	r3, #16
		pdata->ana_config__vcsel_pulse_width_offset & 0x1F;
 8005034:	68fa      	ldr	r2, [r7, #12]
 8005036:	7c12      	ldrb	r2, [r2, #16]
 8005038:	f002 021f 	and.w	r2, r2, #31
 800503c:	b2d2      	uxtb	r2, r2
	*(pbuffer +  16) =
 800503e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	3311      	adds	r3, #17
		pdata->ana_config__fast_osc__config_ctrl & 0x1;
 8005044:	68fa      	ldr	r2, [r7, #12]
 8005046:	7c52      	ldrb	r2, [r2, #17]
 8005048:	f002 0201 	and.w	r2, r2, #1
 800504c:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 800504e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  18) =
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	3312      	adds	r3, #18
		pdata->sigma_estimator__effective_pulse_width_ns;
 8005054:	68fa      	ldr	r2, [r7, #12]
 8005056:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 8005058:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	3313      	adds	r3, #19
		pdata->sigma_estimator__effective_ambient_width_ns;
 800505e:	68fa      	ldr	r2, [r7, #12]
 8005060:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 8005062:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	3314      	adds	r3, #20
		pdata->sigma_estimator__sigma_ref_mm;
 8005068:	68fa      	ldr	r2, [r7, #12]
 800506a:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 800506c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	3315      	adds	r3, #21
		pdata->algo__crosstalk_compensation_valid_height_mm;
 8005072:	68fa      	ldr	r2, [r7, #12]
 8005074:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 8005076:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  22) =
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	3316      	adds	r3, #22
		pdata->spare_host_config__static_config_spare_0;
 800507c:	68fa      	ldr	r2, [r7, #12]
 800507e:	7d92      	ldrb	r2, [r2, #22]
	*(pbuffer +  22) =
 8005080:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  23) =
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	3317      	adds	r3, #23
		pdata->spare_host_config__static_config_spare_1;
 8005086:	68fa      	ldr	r2, [r7, #12]
 8005088:	7dd2      	ldrb	r2, [r2, #23]
	*(pbuffer +  23) =
 800508a:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	8b18      	ldrh	r0, [r3, #24]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	3318      	adds	r3, #24
 8005094:	461a      	mov	r2, r3
 8005096:	2102      	movs	r1, #2
 8005098:	f7fe ff97 	bl	8003fca <VL53L1_i2c_encode_uint16_t>
		pdata->algo__range_ignore_threshold_mcps,
		2,
		pbuffer +  24);
	*(pbuffer +  26) =
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	331a      	adds	r3, #26
		pdata->algo__range_ignore_valid_height_mm;
 80050a0:	68fa      	ldr	r2, [r7, #12]
 80050a2:	7e92      	ldrb	r2, [r2, #26]
	*(pbuffer +  26) =
 80050a4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  27) =
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	331b      	adds	r3, #27
		pdata->algo__range_min_clip;
 80050aa:	68fa      	ldr	r2, [r7, #12]
 80050ac:	7ed2      	ldrb	r2, [r2, #27]
	*(pbuffer +  27) =
 80050ae:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  28) =
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	331c      	adds	r3, #28
		pdata->algo__consistency_check__tolerance & 0xF;
 80050b4:	68fa      	ldr	r2, [r7, #12]
 80050b6:	7f12      	ldrb	r2, [r2, #28]
 80050b8:	f002 020f 	and.w	r2, r2, #15
 80050bc:	b2d2      	uxtb	r2, r2
	*(pbuffer +  28) =
 80050be:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  29) =
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	331d      	adds	r3, #29
		pdata->spare_host_config__static_config_spare_2;
 80050c4:	68fa      	ldr	r2, [r7, #12]
 80050c6:	7f52      	ldrb	r2, [r2, #29]
	*(pbuffer +  29) =
 80050c8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  30) =
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	331e      	adds	r3, #30
		pdata->sd_config__reset_stages_msb & 0xF;
 80050ce:	68fa      	ldr	r2, [r7, #12]
 80050d0:	7f92      	ldrb	r2, [r2, #30]
 80050d2:	f002 020f 	and.w	r2, r2, #15
 80050d6:	b2d2      	uxtb	r2, r2
	*(pbuffer +  30) =
 80050d8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  31) =
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	331f      	adds	r3, #31
		pdata->sd_config__reset_stages_lsb;
 80050de:	68fa      	ldr	r2, [r7, #12]
 80050e0:	7fd2      	ldrb	r2, [r2, #31]
	*(pbuffer +  31) =
 80050e2:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 80050e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	3718      	adds	r7, #24
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}

080050f0 <VL53L1_i2c_encode_general_config>:

VL53L1_Error VL53L1_i2c_encode_general_config(
	VL53L1_general_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b086      	sub	sp, #24
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	60f8      	str	r0, [r7, #12]
 80050f8:	460b      	mov	r3, r1
 80050fa:	607a      	str	r2, [r7, #4]
 80050fc:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_general_config_t into a I2C write buffer
	 * Buffer must be at least 22 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80050fe:	2300      	movs	r3, #0
 8005100:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_GENERAL_CONFIG_I2C_SIZE_BYTES > buf_size)
 8005102:	897b      	ldrh	r3, [r7, #10]
 8005104:	2b15      	cmp	r3, #21
 8005106:	d802      	bhi.n	800510e <VL53L1_i2c_encode_general_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8005108:	f06f 0309 	mvn.w	r3, #9
 800510c:	e070      	b.n	80051f0 <VL53L1_i2c_encode_general_config+0x100>

	*(pbuffer +   0) =
		pdata->gph_config__stream_count_update_value;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	781a      	ldrb	r2, [r3, #0]
	*(pbuffer +   0) =
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	3301      	adds	r3, #1
		pdata->global_config__stream_divider;
 800511a:	68fa      	ldr	r2, [r7, #12]
 800511c:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 800511e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	3302      	adds	r3, #2
		pdata->system__interrupt_config_gpio;
 8005124:	68fa      	ldr	r2, [r7, #12]
 8005126:	7892      	ldrb	r2, [r2, #2]
	*(pbuffer +   2) =
 8005128:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	3303      	adds	r3, #3
		pdata->cal_config__vcsel_start & 0x7F;
 800512e:	68fa      	ldr	r2, [r7, #12]
 8005130:	78d2      	ldrb	r2, [r2, #3]
 8005132:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005136:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 8005138:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
		pdata->cal_config__repeat_rate & 0xFFF,
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	889b      	ldrh	r3, [r3, #4]
	VL53L1_i2c_encode_uint16_t(
 800513e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005142:	b298      	uxth	r0, r3
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	3304      	adds	r3, #4
 8005148:	461a      	mov	r2, r3
 800514a:	2102      	movs	r1, #2
 800514c:	f7fe ff3d 	bl	8003fca <VL53L1_i2c_encode_uint16_t>
		2,
		pbuffer +   4);
	*(pbuffer +   6) =
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	3306      	adds	r3, #6
		pdata->global_config__vcsel_width & 0x7F;
 8005154:	68fa      	ldr	r2, [r7, #12]
 8005156:	7992      	ldrb	r2, [r2, #6]
 8005158:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800515c:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 800515e:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	3307      	adds	r3, #7
		pdata->phasecal_config__timeout_macrop;
 8005164:	68fa      	ldr	r2, [r7, #12]
 8005166:	79d2      	ldrb	r2, [r2, #7]
	*(pbuffer +   7) =
 8005168:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	3308      	adds	r3, #8
		pdata->phasecal_config__target;
 800516e:	68fa      	ldr	r2, [r7, #12]
 8005170:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 8005172:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	3309      	adds	r3, #9
		pdata->phasecal_config__override & 0x1;
 8005178:	68fa      	ldr	r2, [r7, #12]
 800517a:	7a52      	ldrb	r2, [r2, #9]
 800517c:	f002 0201 	and.w	r2, r2, #1
 8005180:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 8005182:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	330b      	adds	r3, #11
		pdata->dss_config__roi_mode_control & 0x7;
 8005188:	68fa      	ldr	r2, [r7, #12]
 800518a:	7a92      	ldrb	r2, [r2, #10]
 800518c:	f002 0207 	and.w	r2, r2, #7
 8005190:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 8005192:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	8998      	ldrh	r0, [r3, #12]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	330c      	adds	r3, #12
 800519c:	461a      	mov	r2, r3
 800519e:	2102      	movs	r1, #2
 80051a0:	f7fe ff13 	bl	8003fca <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_high,
		2,
		pbuffer +  12);
	VL53L1_i2c_encode_uint16_t(
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	89d8      	ldrh	r0, [r3, #14]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	330e      	adds	r3, #14
 80051ac:	461a      	mov	r2, r3
 80051ae:	2102      	movs	r1, #2
 80051b0:	f7fe ff0b 	bl	8003fca <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_rate_low,
		2,
		pbuffer +  14);
	VL53L1_i2c_encode_uint16_t(
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	8a18      	ldrh	r0, [r3, #16]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	3310      	adds	r3, #16
 80051bc:	461a      	mov	r2, r3
 80051be:	2102      	movs	r1, #2
 80051c0:	f7fe ff03 	bl	8003fca <VL53L1_i2c_encode_uint16_t>
		pdata->dss_config__manual_effective_spads_select,
		2,
		pbuffer +  16);
	*(pbuffer +  18) =
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	3312      	adds	r3, #18
		pdata->dss_config__manual_block_select;
 80051c8:	68fa      	ldr	r2, [r7, #12]
 80051ca:	7c92      	ldrb	r2, [r2, #18]
	*(pbuffer +  18) =
 80051cc:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  19) =
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	3313      	adds	r3, #19
		pdata->dss_config__aperture_attenuation;
 80051d2:	68fa      	ldr	r2, [r7, #12]
 80051d4:	7cd2      	ldrb	r2, [r2, #19]
	*(pbuffer +  19) =
 80051d6:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  20) =
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	3314      	adds	r3, #20
		pdata->dss_config__max_spads_limit;
 80051dc:	68fa      	ldr	r2, [r7, #12]
 80051de:	7d12      	ldrb	r2, [r2, #20]
	*(pbuffer +  20) =
 80051e0:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  21) =
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	3315      	adds	r3, #21
		pdata->dss_config__min_spads_limit;
 80051e6:	68fa      	ldr	r2, [r7, #12]
 80051e8:	7d52      	ldrb	r2, [r2, #21]
	*(pbuffer +  21) =
 80051ea:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 80051ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3718      	adds	r7, #24
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}

080051f8 <VL53L1_i2c_encode_timing_config>:

VL53L1_Error VL53L1_i2c_encode_timing_config(
	VL53L1_timing_config_t   *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b086      	sub	sp, #24
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	60f8      	str	r0, [r7, #12]
 8005200:	460b      	mov	r3, r1
 8005202:	607a      	str	r2, [r7, #4]
 8005204:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_timing_config_t into a I2C write buffer
	 * Buffer must be at least 23 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005206:	2300      	movs	r3, #0
 8005208:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_TIMING_CONFIG_I2C_SIZE_BYTES > buf_size)
 800520a:	897b      	ldrh	r3, [r7, #10]
 800520c:	2b16      	cmp	r3, #22
 800520e:	d802      	bhi.n	8005216 <VL53L1_i2c_encode_timing_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8005210:	f06f 0309 	mvn.w	r3, #9
 8005214:	e06e      	b.n	80052f4 <VL53L1_i2c_encode_timing_config+0xfc>

	*(pbuffer +   0) =
		pdata->mm_config__timeout_macrop_a_hi & 0xF;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	781b      	ldrb	r3, [r3, #0]
 800521a:	f003 030f 	and.w	r3, r3, #15
 800521e:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	3301      	adds	r3, #1
		pdata->mm_config__timeout_macrop_a_lo;
 8005228:	68fa      	ldr	r2, [r7, #12]
 800522a:	7852      	ldrb	r2, [r2, #1]
	*(pbuffer +   1) =
 800522c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	3302      	adds	r3, #2
		pdata->mm_config__timeout_macrop_b_hi & 0xF;
 8005232:	68fa      	ldr	r2, [r7, #12]
 8005234:	7892      	ldrb	r2, [r2, #2]
 8005236:	f002 020f 	and.w	r2, r2, #15
 800523a:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 800523c:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	3303      	adds	r3, #3
		pdata->mm_config__timeout_macrop_b_lo;
 8005242:	68fa      	ldr	r2, [r7, #12]
 8005244:	78d2      	ldrb	r2, [r2, #3]
	*(pbuffer +   3) =
 8005246:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	3304      	adds	r3, #4
		pdata->range_config__timeout_macrop_a_hi & 0xF;
 800524c:	68fa      	ldr	r2, [r7, #12]
 800524e:	7912      	ldrb	r2, [r2, #4]
 8005250:	f002 020f 	and.w	r2, r2, #15
 8005254:	b2d2      	uxtb	r2, r2
	*(pbuffer +   4) =
 8005256:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   5) =
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	3305      	adds	r3, #5
		pdata->range_config__timeout_macrop_a_lo;
 800525c:	68fa      	ldr	r2, [r7, #12]
 800525e:	7952      	ldrb	r2, [r2, #5]
	*(pbuffer +   5) =
 8005260:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	3306      	adds	r3, #6
		pdata->range_config__vcsel_period_a & 0x3F;
 8005266:	68fa      	ldr	r2, [r7, #12]
 8005268:	7992      	ldrb	r2, [r2, #6]
 800526a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800526e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 8005270:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	3307      	adds	r3, #7
		pdata->range_config__timeout_macrop_b_hi & 0xF;
 8005276:	68fa      	ldr	r2, [r7, #12]
 8005278:	79d2      	ldrb	r2, [r2, #7]
 800527a:	f002 020f 	and.w	r2, r2, #15
 800527e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   7) =
 8005280:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	3308      	adds	r3, #8
		pdata->range_config__timeout_macrop_b_lo;
 8005286:	68fa      	ldr	r2, [r7, #12]
 8005288:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   8) =
 800528a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	3309      	adds	r3, #9
		pdata->range_config__vcsel_period_b & 0x3F;
 8005290:	68fa      	ldr	r2, [r7, #12]
 8005292:	7a52      	ldrb	r2, [r2, #9]
 8005294:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8005298:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800529a:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	8958      	ldrh	r0, [r3, #10]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	330a      	adds	r3, #10
 80052a4:	461a      	mov	r2, r3
 80052a6:	2102      	movs	r1, #2
 80052a8:	f7fe fe8f 	bl	8003fca <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__sigma_thresh,
		2,
		pbuffer +  10);
	VL53L1_i2c_encode_uint16_t(
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	8998      	ldrh	r0, [r3, #12]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	330c      	adds	r3, #12
 80052b4:	461a      	mov	r2, r3
 80052b6:	2102      	movs	r1, #2
 80052b8:	f7fe fe87 	bl	8003fca <VL53L1_i2c_encode_uint16_t>
		pdata->range_config__min_count_rate_rtn_limit_mcps,
		2,
		pbuffer +  12);
	*(pbuffer +  14) =
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	330e      	adds	r3, #14
		pdata->range_config__valid_phase_low;
 80052c0:	68fa      	ldr	r2, [r7, #12]
 80052c2:	7b92      	ldrb	r2, [r2, #14]
	*(pbuffer +  14) =
 80052c4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	330f      	adds	r3, #15
		pdata->range_config__valid_phase_high;
 80052ca:	68fa      	ldr	r2, [r7, #12]
 80052cc:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  15) =
 80052ce:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint32_t(
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	6918      	ldr	r0, [r3, #16]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	3312      	adds	r3, #18
 80052d8:	461a      	mov	r2, r3
 80052da:	2104      	movs	r1, #4
 80052dc:	f7fe ff13 	bl	8004106 <VL53L1_i2c_encode_uint32_t>
		pdata->system__intermeasurement_period,
		4,
		pbuffer +  18);
	*(pbuffer +  22) =
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	3316      	adds	r3, #22
		pdata->system__fractional_enable & 0x1;
 80052e4:	68fa      	ldr	r2, [r7, #12]
 80052e6:	7d12      	ldrb	r2, [r2, #20]
 80052e8:	f002 0201 	and.w	r2, r2, #1
 80052ec:	b2d2      	uxtb	r2, r2
	*(pbuffer +  22) =
 80052ee:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 80052f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3718      	adds	r7, #24
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}

080052fc <VL53L1_i2c_encode_dynamic_config>:

VL53L1_Error VL53L1_i2c_encode_dynamic_config(
	VL53L1_dynamic_config_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b086      	sub	sp, #24
 8005300:	af00      	add	r7, sp, #0
 8005302:	60f8      	str	r0, [r7, #12]
 8005304:	460b      	mov	r3, r1
 8005306:	607a      	str	r2, [r7, #4]
 8005308:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_dynamic_config_t into a I2C write buffer
	 * Buffer must be at least 18 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 800530a:	2300      	movs	r3, #0
 800530c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_DYNAMIC_CONFIG_I2C_SIZE_BYTES > buf_size)
 800530e:	897b      	ldrh	r3, [r7, #10]
 8005310:	2b11      	cmp	r3, #17
 8005312:	d802      	bhi.n	800531a <VL53L1_i2c_encode_dynamic_config+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8005314:	f06f 0309 	mvn.w	r3, #9
 8005318:	e071      	b.n	80053fe <VL53L1_i2c_encode_dynamic_config+0x102>

	*(pbuffer +   0) =
		pdata->system__grouped_parameter_hold_0 & 0x3;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	781b      	ldrb	r3, [r3, #0]
 800531e:	f003 0303 	and.w	r3, r3, #3
 8005322:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	701a      	strb	r2, [r3, #0]
	VL53L1_i2c_encode_uint16_t(
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	8858      	ldrh	r0, [r3, #2]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	3301      	adds	r3, #1
 8005330:	461a      	mov	r2, r3
 8005332:	2102      	movs	r1, #2
 8005334:	f7fe fe49 	bl	8003fca <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_high,
		2,
		pbuffer +   1);
	VL53L1_i2c_encode_uint16_t(
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	8898      	ldrh	r0, [r3, #4]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	3303      	adds	r3, #3
 8005340:	461a      	mov	r2, r3
 8005342:	2102      	movs	r1, #2
 8005344:	f7fe fe41 	bl	8003fca <VL53L1_i2c_encode_uint16_t>
		pdata->system__thresh_low,
		2,
		pbuffer +   3);
	*(pbuffer +   5) =
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	3305      	adds	r3, #5
		pdata->system__enable_xtalk_per_quadrant & 0x1;
 800534c:	68fa      	ldr	r2, [r7, #12]
 800534e:	7992      	ldrb	r2, [r2, #6]
 8005350:	f002 0201 	and.w	r2, r2, #1
 8005354:	b2d2      	uxtb	r2, r2
	*(pbuffer +   5) =
 8005356:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   6) =
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	3306      	adds	r3, #6
		pdata->system__seed_config & 0x7;
 800535c:	68fa      	ldr	r2, [r7, #12]
 800535e:	79d2      	ldrb	r2, [r2, #7]
 8005360:	f002 0207 	and.w	r2, r2, #7
 8005364:	b2d2      	uxtb	r2, r2
	*(pbuffer +   6) =
 8005366:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   7) =
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	3307      	adds	r3, #7
		pdata->sd_config__woi_sd0;
 800536c:	68fa      	ldr	r2, [r7, #12]
 800536e:	7a12      	ldrb	r2, [r2, #8]
	*(pbuffer +   7) =
 8005370:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   8) =
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	3308      	adds	r3, #8
		pdata->sd_config__woi_sd1;
 8005376:	68fa      	ldr	r2, [r7, #12]
 8005378:	7a52      	ldrb	r2, [r2, #9]
	*(pbuffer +   8) =
 800537a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   9) =
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	3309      	adds	r3, #9
		pdata->sd_config__initial_phase_sd0 & 0x7F;
 8005380:	68fa      	ldr	r2, [r7, #12]
 8005382:	7a92      	ldrb	r2, [r2, #10]
 8005384:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005388:	b2d2      	uxtb	r2, r2
	*(pbuffer +   9) =
 800538a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  10) =
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	330a      	adds	r3, #10
		pdata->sd_config__initial_phase_sd1 & 0x7F;
 8005390:	68fa      	ldr	r2, [r7, #12]
 8005392:	7ad2      	ldrb	r2, [r2, #11]
 8005394:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005398:	b2d2      	uxtb	r2, r2
	*(pbuffer +  10) =
 800539a:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  11) =
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	330b      	adds	r3, #11
		pdata->system__grouped_parameter_hold_1 & 0x3;
 80053a0:	68fa      	ldr	r2, [r7, #12]
 80053a2:	7b12      	ldrb	r2, [r2, #12]
 80053a4:	f002 0203 	and.w	r2, r2, #3
 80053a8:	b2d2      	uxtb	r2, r2
	*(pbuffer +  11) =
 80053aa:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  12) =
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	330c      	adds	r3, #12
		pdata->sd_config__first_order_select & 0x3;
 80053b0:	68fa      	ldr	r2, [r7, #12]
 80053b2:	7b52      	ldrb	r2, [r2, #13]
 80053b4:	f002 0203 	and.w	r2, r2, #3
 80053b8:	b2d2      	uxtb	r2, r2
	*(pbuffer +  12) =
 80053ba:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  13) =
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	330d      	adds	r3, #13
		pdata->sd_config__quantifier & 0xF;
 80053c0:	68fa      	ldr	r2, [r7, #12]
 80053c2:	7b92      	ldrb	r2, [r2, #14]
 80053c4:	f002 020f 	and.w	r2, r2, #15
 80053c8:	b2d2      	uxtb	r2, r2
	*(pbuffer +  13) =
 80053ca:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  14) =
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	330e      	adds	r3, #14
		pdata->roi_config__user_roi_centre_spad;
 80053d0:	68fa      	ldr	r2, [r7, #12]
 80053d2:	7bd2      	ldrb	r2, [r2, #15]
	*(pbuffer +  14) =
 80053d4:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  15) =
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	330f      	adds	r3, #15
		pdata->roi_config__user_roi_requested_global_xy_size;
 80053da:	68fa      	ldr	r2, [r7, #12]
 80053dc:	7c12      	ldrb	r2, [r2, #16]
	*(pbuffer +  15) =
 80053de:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  16) =
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	3310      	adds	r3, #16
		pdata->system__sequence_config;
 80053e4:	68fa      	ldr	r2, [r7, #12]
 80053e6:	7c52      	ldrb	r2, [r2, #17]
	*(pbuffer +  16) =
 80053e8:	701a      	strb	r2, [r3, #0]
	*(pbuffer +  17) =
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	3311      	adds	r3, #17
		pdata->system__grouped_parameter_hold & 0x3;
 80053ee:	68fa      	ldr	r2, [r7, #12]
 80053f0:	7c92      	ldrb	r2, [r2, #18]
 80053f2:	f002 0203 	and.w	r2, r2, #3
 80053f6:	b2d2      	uxtb	r2, r2
	*(pbuffer +  17) =
 80053f8:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 80053fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3718      	adds	r7, #24
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}

08005406 <VL53L1_i2c_encode_system_control>:

VL53L1_Error VL53L1_i2c_encode_system_control(
	VL53L1_system_control_t  *pdata,
	uint16_t                  buf_size,
	uint8_t                  *pbuffer)
{
 8005406:	b480      	push	{r7}
 8005408:	b087      	sub	sp, #28
 800540a:	af00      	add	r7, sp, #0
 800540c:	60f8      	str	r0, [r7, #12]
 800540e:	460b      	mov	r3, r1
 8005410:	607a      	str	r2, [r7, #4]
 8005412:	817b      	strh	r3, [r7, #10]
	/**
	 * Encodes data structure VL53L1_system_control_t into a I2C write buffer
	 * Buffer must be at least 5 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005414:	2300      	movs	r3, #0
 8005416:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES > buf_size)
 8005418:	897b      	ldrh	r3, [r7, #10]
 800541a:	2b04      	cmp	r3, #4
 800541c:	d802      	bhi.n	8005424 <VL53L1_i2c_encode_system_control+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 800541e:	f06f 0309 	mvn.w	r3, #9
 8005422:	e025      	b.n	8005470 <VL53L1_i2c_encode_system_control+0x6a>

	*(pbuffer +   0) =
		pdata->power_management__go1_power_force & 0x1;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	781b      	ldrb	r3, [r3, #0]
 8005428:	f003 0301 	and.w	r3, r3, #1
 800542c:	b2da      	uxtb	r2, r3
	*(pbuffer +   0) =
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   1) =
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	3301      	adds	r3, #1
		pdata->system__stream_count_ctrl & 0x1;
 8005436:	68fa      	ldr	r2, [r7, #12]
 8005438:	7852      	ldrb	r2, [r2, #1]
 800543a:	f002 0201 	and.w	r2, r2, #1
 800543e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   1) =
 8005440:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   2) =
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	3302      	adds	r3, #2
		pdata->firmware__enable & 0x1;
 8005446:	68fa      	ldr	r2, [r7, #12]
 8005448:	7892      	ldrb	r2, [r2, #2]
 800544a:	f002 0201 	and.w	r2, r2, #1
 800544e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   2) =
 8005450:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   3) =
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	3303      	adds	r3, #3
		pdata->system__interrupt_clear & 0x3;
 8005456:	68fa      	ldr	r2, [r7, #12]
 8005458:	78d2      	ldrb	r2, [r2, #3]
 800545a:	f002 0203 	and.w	r2, r2, #3
 800545e:	b2d2      	uxtb	r2, r2
	*(pbuffer +   3) =
 8005460:	701a      	strb	r2, [r3, #0]
	*(pbuffer +   4) =
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	3304      	adds	r3, #4
		pdata->system__mode_start;
 8005466:	68fa      	ldr	r2, [r7, #12]
 8005468:	7912      	ldrb	r2, [r2, #4]
	*(pbuffer +   4) =
 800546a:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_END(status);


	return status;
 800546c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005470:	4618      	mov	r0, r3
 8005472:	371c      	adds	r7, #28
 8005474:	46bd      	mov	sp, r7
 8005476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547a:	4770      	bx	lr

0800547c <VL53L1_set_system_control>:


VL53L1_Error VL53L1_set_system_control(
	VL53L1_DEV                 Dev,
	VL53L1_system_control_t   *pdata)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b084      	sub	sp, #16
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
 8005484:	6039      	str	r1, [r7, #0]
	/**
	 * Serialises and sends the contents of VL53L1_system_control_t
	 * data structure to the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005486:	2300      	movs	r3, #0
 8005488:	73fb      	strb	r3, [r7, #15]
	uint8_t comms_buffer[VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 800548a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d108      	bne.n	80054a4 <VL53L1_set_system_control+0x28>
		status = VL53L1_i2c_encode_system_control(
 8005492:	f107 0308 	add.w	r3, r7, #8
 8005496:	461a      	mov	r2, r3
 8005498:	2105      	movs	r1, #5
 800549a:	6838      	ldr	r0, [r7, #0]
 800549c:	f7ff ffb3 	bl	8005406 <VL53L1_i2c_encode_system_control>
 80054a0:	4603      	mov	r3, r0
 80054a2:	73fb      	strb	r3, [r7, #15]
			pdata,
			VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES,
			comms_buffer);

	if (status == VL53L1_ERROR_NONE)
 80054a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d108      	bne.n	80054be <VL53L1_set_system_control+0x42>
		status = VL53L1_WriteMulti(
 80054ac:	f107 0208 	add.w	r2, r7, #8
 80054b0:	2305      	movs	r3, #5
 80054b2:	2183      	movs	r1, #131	; 0x83
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	f000 fc93 	bl	8005de0 <VL53L1_WriteMulti>
 80054ba:	4603      	mov	r3, r0
 80054bc:	73fb      	strb	r3, [r7, #15]
			comms_buffer,
			VL53L1_SYSTEM_CONTROL_I2C_SIZE_BYTES);

	LOG_FUNCTION_END(status);

	return status;
 80054be:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3710      	adds	r7, #16
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}

080054ca <VL53L1_i2c_decode_system_results>:

VL53L1_Error VL53L1_i2c_decode_system_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_system_results_t   *pdata)
{
 80054ca:	b580      	push	{r7, lr}
 80054cc:	b086      	sub	sp, #24
 80054ce:	af00      	add	r7, sp, #0
 80054d0:	4603      	mov	r3, r0
 80054d2:	60b9      	str	r1, [r7, #8]
 80054d4:	607a      	str	r2, [r7, #4]
 80054d6:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_system_results_t from the input I2C read buffer
	 * Buffer must be at least 44 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80054d8:	2300      	movs	r3, #0
 80054da:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_SYSTEM_RESULTS_I2C_SIZE_BYTES > buf_size)
 80054dc:	89fb      	ldrh	r3, [r7, #14]
 80054de:	2b2b      	cmp	r3, #43	; 0x2b
 80054e0:	d802      	bhi.n	80054e8 <VL53L1_i2c_decode_system_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80054e2:	f06f 0309 	mvn.w	r3, #9
 80054e6:	e0e2      	b.n	80056ae <VL53L1_i2c_decode_system_results+0x1e4>

	pdata->result__interrupt_status =
		(*(pbuffer +   0)) & 0x3F;
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	781b      	ldrb	r3, [r3, #0]
 80054ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80054f0:	b2da      	uxtb	r2, r3
	pdata->result__interrupt_status =
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	701a      	strb	r2, [r3, #0]
	pdata->result__range_status =
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	785a      	ldrb	r2, [r3, #1]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->result__report_status =
		(*(pbuffer +   2)) & 0xF;
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	3302      	adds	r3, #2
 8005502:	781b      	ldrb	r3, [r3, #0]
 8005504:	f003 030f 	and.w	r3, r3, #15
 8005508:	b2da      	uxtb	r2, r3
	pdata->result__report_status =
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	709a      	strb	r2, [r3, #2]
	pdata->result__stream_count =
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	78da      	ldrb	r2, [r3, #3]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	70da      	strb	r2, [r3, #3]
		(*(pbuffer +   3));
	pdata->result__dss_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   4));
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	3304      	adds	r3, #4
 800551a:	4619      	mov	r1, r3
 800551c:	2002      	movs	r0, #2
 800551e:	f7fe fd7e 	bl	800401e <VL53L1_i2c_decode_uint16_t>
 8005522:	4603      	mov	r3, r0
 8005524:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd0 =
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	809a      	strh	r2, [r3, #4]
	pdata->result__peak_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   6));
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	3306      	adds	r3, #6
 800552e:	4619      	mov	r1, r3
 8005530:	2002      	movs	r0, #2
 8005532:	f7fe fd74 	bl	800401e <VL53L1_i2c_decode_uint16_t>
 8005536:	4603      	mov	r3, r0
 8005538:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd0 =
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	80da      	strh	r2, [r3, #6]
	pdata->result__ambient_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8));
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	3308      	adds	r3, #8
 8005542:	4619      	mov	r1, r3
 8005544:	2002      	movs	r0, #2
 8005546:	f7fe fd6a 	bl	800401e <VL53L1_i2c_decode_uint16_t>
 800554a:	4603      	mov	r3, r0
 800554c:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd0 =
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	811a      	strh	r2, [r3, #8]
	pdata->result__sigma_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  10));
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	330a      	adds	r3, #10
 8005556:	4619      	mov	r1, r3
 8005558:	2002      	movs	r0, #2
 800555a:	f7fe fd60 	bl	800401e <VL53L1_i2c_decode_uint16_t>
 800555e:	4603      	mov	r3, r0
 8005560:	461a      	mov	r2, r3
	pdata->result__sigma_sd0 =
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	815a      	strh	r2, [r3, #10]
	pdata->result__phase_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  12));
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	330c      	adds	r3, #12
 800556a:	4619      	mov	r1, r3
 800556c:	2002      	movs	r0, #2
 800556e:	f7fe fd56 	bl	800401e <VL53L1_i2c_decode_uint16_t>
 8005572:	4603      	mov	r3, r0
 8005574:	461a      	mov	r2, r3
	pdata->result__phase_sd0 =
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	819a      	strh	r2, [r3, #12]
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  14));
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	330e      	adds	r3, #14
 800557e:	4619      	mov	r1, r3
 8005580:	2002      	movs	r0, #2
 8005582:	f7fe fd4c 	bl	800401e <VL53L1_i2c_decode_uint16_t>
 8005586:	4603      	mov	r3, r0
 8005588:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd0 =
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	81da      	strh	r2, [r3, #14]
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  16));
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	3310      	adds	r3, #16
 8005592:	4619      	mov	r1, r3
 8005594:	2002      	movs	r0, #2
 8005596:	f7fe fd42 	bl	800401e <VL53L1_i2c_decode_uint16_t>
 800559a:	4603      	mov	r3, r0
 800559c:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_crosstalk_corrected_mcps_sd0 =
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	821a      	strh	r2, [r3, #16]
	pdata->result__mm_inner_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18));
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	3312      	adds	r3, #18
 80055a6:	4619      	mov	r1, r3
 80055a8:	2002      	movs	r0, #2
 80055aa:	f7fe fd38 	bl	800401e <VL53L1_i2c_decode_uint16_t>
 80055ae:	4603      	mov	r3, r0
 80055b0:	461a      	mov	r2, r3
	pdata->result__mm_inner_actual_effective_spads_sd0 =
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	825a      	strh	r2, [r3, #18]
	pdata->result__mm_outer_actual_effective_spads_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  20));
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	3314      	adds	r3, #20
 80055ba:	4619      	mov	r1, r3
 80055bc:	2002      	movs	r0, #2
 80055be:	f7fe fd2e 	bl	800401e <VL53L1_i2c_decode_uint16_t>
 80055c2:	4603      	mov	r3, r0
 80055c4:	461a      	mov	r2, r3
	pdata->result__mm_outer_actual_effective_spads_sd0 =
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	829a      	strh	r2, [r3, #20]
	pdata->result__avg_signal_count_rate_mcps_sd0 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	3316      	adds	r3, #22
 80055ce:	4619      	mov	r1, r3
 80055d0:	2002      	movs	r0, #2
 80055d2:	f7fe fd24 	bl	800401e <VL53L1_i2c_decode_uint16_t>
 80055d6:	4603      	mov	r3, r0
 80055d8:	461a      	mov	r2, r3
	pdata->result__avg_signal_count_rate_mcps_sd0 =
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	82da      	strh	r2, [r3, #22]
	pdata->result__dss_actual_effective_spads_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	3318      	adds	r3, #24
 80055e2:	4619      	mov	r1, r3
 80055e4:	2002      	movs	r0, #2
 80055e6:	f7fe fd1a 	bl	800401e <VL53L1_i2c_decode_uint16_t>
 80055ea:	4603      	mov	r3, r0
 80055ec:	461a      	mov	r2, r3
	pdata->result__dss_actual_effective_spads_sd1 =
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	831a      	strh	r2, [r3, #24]
	pdata->result__peak_signal_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  26));
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	331a      	adds	r3, #26
 80055f6:	4619      	mov	r1, r3
 80055f8:	2002      	movs	r0, #2
 80055fa:	f7fe fd10 	bl	800401e <VL53L1_i2c_decode_uint16_t>
 80055fe:	4603      	mov	r3, r0
 8005600:	461a      	mov	r2, r3
	pdata->result__peak_signal_count_rate_mcps_sd1 =
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	835a      	strh	r2, [r3, #26]
	pdata->result__ambient_count_rate_mcps_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  28));
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	331c      	adds	r3, #28
 800560a:	4619      	mov	r1, r3
 800560c:	2002      	movs	r0, #2
 800560e:	f7fe fd06 	bl	800401e <VL53L1_i2c_decode_uint16_t>
 8005612:	4603      	mov	r3, r0
 8005614:	461a      	mov	r2, r3
	pdata->result__ambient_count_rate_mcps_sd1 =
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	839a      	strh	r2, [r3, #28]
	pdata->result__sigma_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  30));
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	331e      	adds	r3, #30
 800561e:	4619      	mov	r1, r3
 8005620:	2002      	movs	r0, #2
 8005622:	f7fe fcfc 	bl	800401e <VL53L1_i2c_decode_uint16_t>
 8005626:	4603      	mov	r3, r0
 8005628:	461a      	mov	r2, r3
	pdata->result__sigma_sd1 =
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	83da      	strh	r2, [r3, #30]
	pdata->result__phase_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  32));
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	3320      	adds	r3, #32
 8005632:	4619      	mov	r1, r3
 8005634:	2002      	movs	r0, #2
 8005636:	f7fe fcf2 	bl	800401e <VL53L1_i2c_decode_uint16_t>
 800563a:	4603      	mov	r3, r0
 800563c:	461a      	mov	r2, r3
	pdata->result__phase_sd1 =
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	841a      	strh	r2, [r3, #32]
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  34));
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	3322      	adds	r3, #34	; 0x22
 8005646:	4619      	mov	r1, r3
 8005648:	2002      	movs	r0, #2
 800564a:	f7fe fce8 	bl	800401e <VL53L1_i2c_decode_uint16_t>
 800564e:	4603      	mov	r3, r0
 8005650:	461a      	mov	r2, r3
	pdata->result__final_crosstalk_corrected_range_mm_sd1 =
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	845a      	strh	r2, [r3, #34]	; 0x22
	pdata->result__spare_0_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  36));
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	3324      	adds	r3, #36	; 0x24
 800565a:	4619      	mov	r1, r3
 800565c:	2002      	movs	r0, #2
 800565e:	f7fe fcde 	bl	800401e <VL53L1_i2c_decode_uint16_t>
 8005662:	4603      	mov	r3, r0
 8005664:	461a      	mov	r2, r3
	pdata->result__spare_0_sd1 =
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	849a      	strh	r2, [r3, #36]	; 0x24
	pdata->result__spare_1_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  38));
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	3326      	adds	r3, #38	; 0x26
 800566e:	4619      	mov	r1, r3
 8005670:	2002      	movs	r0, #2
 8005672:	f7fe fcd4 	bl	800401e <VL53L1_i2c_decode_uint16_t>
 8005676:	4603      	mov	r3, r0
 8005678:	461a      	mov	r2, r3
	pdata->result__spare_1_sd1 =
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	84da      	strh	r2, [r3, #38]	; 0x26
	pdata->result__spare_2_sd1 =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  40));
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	3328      	adds	r3, #40	; 0x28
 8005682:	4619      	mov	r1, r3
 8005684:	2002      	movs	r0, #2
 8005686:	f7fe fcca 	bl	800401e <VL53L1_i2c_decode_uint16_t>
 800568a:	4603      	mov	r3, r0
 800568c:	461a      	mov	r2, r3
	pdata->result__spare_2_sd1 =
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	851a      	strh	r2, [r3, #40]	; 0x28
	pdata->result__spare_3_sd1 =
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		(*(pbuffer +  42));
	pdata->result__thresh_info =
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		(*(pbuffer +  43));

	LOG_FUNCTION_END(status);

	return status;
 80056aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3718      	adds	r7, #24
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}

080056b6 <VL53L1_i2c_decode_core_results>:

VL53L1_Error VL53L1_i2c_decode_core_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_core_results_t     *pdata)
{
 80056b6:	b580      	push	{r7, lr}
 80056b8:	b086      	sub	sp, #24
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	4603      	mov	r3, r0
 80056be:	60b9      	str	r1, [r7, #8]
 80056c0:	607a      	str	r2, [r7, #4]
 80056c2:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_core_results_t from the input I2C read buffer
	 * Buffer must be at least 33 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 80056c4:	2300      	movs	r3, #0
 80056c6:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_CORE_RESULTS_I2C_SIZE_BYTES > buf_size)
 80056c8:	89fb      	ldrh	r3, [r7, #14]
 80056ca:	2b20      	cmp	r3, #32
 80056cc:	d802      	bhi.n	80056d4 <VL53L1_i2c_decode_core_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 80056ce:	f06f 0309 	mvn.w	r3, #9
 80056d2:	e04d      	b.n	8005770 <VL53L1_i2c_decode_core_results+0xba>

	pdata->result_core__ambient_window_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   0));
 80056d4:	68b9      	ldr	r1, [r7, #8]
 80056d6:	2004      	movs	r0, #4
 80056d8:	f7fe fd3e 	bl	8004158 <VL53L1_i2c_decode_uint32_t>
 80056dc:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd0 =
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	601a      	str	r2, [r3, #0]
	pdata->result_core__ranging_total_events_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +   4));
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	3304      	adds	r3, #4
 80056e6:	4619      	mov	r1, r3
 80056e8:	2004      	movs	r0, #4
 80056ea:	f7fe fd35 	bl	8004158 <VL53L1_i2c_decode_uint32_t>
 80056ee:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd0 =
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	605a      	str	r2, [r3, #4]
	pdata->result_core__signal_total_events_sd0 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +   8));
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	3308      	adds	r3, #8
 80056f8:	4619      	mov	r1, r3
 80056fa:	2004      	movs	r0, #4
 80056fc:	f7fe fd49 	bl	8004192 <VL53L1_i2c_decode_int32_t>
 8005700:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd0 =
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	609a      	str	r2, [r3, #8]
	pdata->result_core__total_periods_elapsed_sd0 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  12));
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	330c      	adds	r3, #12
 800570a:	4619      	mov	r1, r3
 800570c:	2004      	movs	r0, #4
 800570e:	f7fe fd23 	bl	8004158 <VL53L1_i2c_decode_uint32_t>
 8005712:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd0 =
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	60da      	str	r2, [r3, #12]
	pdata->result_core__ambient_window_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  16));
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	3310      	adds	r3, #16
 800571c:	4619      	mov	r1, r3
 800571e:	2004      	movs	r0, #4
 8005720:	f7fe fd1a 	bl	8004158 <VL53L1_i2c_decode_uint32_t>
 8005724:	4602      	mov	r2, r0
	pdata->result_core__ambient_window_events_sd1 =
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	611a      	str	r2, [r3, #16]
	pdata->result_core__ranging_total_events_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  20));
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	3314      	adds	r3, #20
 800572e:	4619      	mov	r1, r3
 8005730:	2004      	movs	r0, #4
 8005732:	f7fe fd11 	bl	8004158 <VL53L1_i2c_decode_uint32_t>
 8005736:	4602      	mov	r2, r0
	pdata->result_core__ranging_total_events_sd1 =
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	615a      	str	r2, [r3, #20]
	pdata->result_core__signal_total_events_sd1 =
		(VL53L1_i2c_decode_int32_t(4, pbuffer +  24));
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	3318      	adds	r3, #24
 8005740:	4619      	mov	r1, r3
 8005742:	2004      	movs	r0, #4
 8005744:	f7fe fd25 	bl	8004192 <VL53L1_i2c_decode_int32_t>
 8005748:	4602      	mov	r2, r0
	pdata->result_core__signal_total_events_sd1 =
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	619a      	str	r2, [r3, #24]
	pdata->result_core__total_periods_elapsed_sd1 =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  28));
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	331c      	adds	r3, #28
 8005752:	4619      	mov	r1, r3
 8005754:	2004      	movs	r0, #4
 8005756:	f7fe fcff 	bl	8004158 <VL53L1_i2c_decode_uint32_t>
 800575a:	4602      	mov	r2, r0
	pdata->result_core__total_periods_elapsed_sd1 =
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	61da      	str	r2, [r3, #28]
	pdata->result_core__spare_0 =
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	f893 2020 	ldrb.w	r2, [r3, #32]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  32));

	LOG_FUNCTION_END(status);

	return status;
 800576c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005770:	4618      	mov	r0, r3
 8005772:	3718      	adds	r7, #24
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}

08005778 <VL53L1_i2c_decode_debug_results>:

VL53L1_Error VL53L1_i2c_decode_debug_results(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_debug_results_t    *pdata)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b086      	sub	sp, #24
 800577c:	af00      	add	r7, sp, #0
 800577e:	4603      	mov	r3, r0
 8005780:	60b9      	str	r1, [r7, #8]
 8005782:	607a      	str	r2, [r7, #4]
 8005784:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_debug_results_t from the input I2C read buffer
	 * Buffer must be at least 56 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005786:	2300      	movs	r3, #0
 8005788:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_DEBUG_RESULTS_I2C_SIZE_BYTES > buf_size)
 800578a:	89fb      	ldrh	r3, [r7, #14]
 800578c:	2b37      	cmp	r3, #55	; 0x37
 800578e:	d802      	bhi.n	8005796 <VL53L1_i2c_decode_debug_results+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8005790:	f06f 0309 	mvn.w	r3, #9
 8005794:	e15e      	b.n	8005a54 <VL53L1_i2c_decode_debug_results+0x2dc>

	pdata->phasecal_result__reference_phase =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   0));
 8005796:	68b9      	ldr	r1, [r7, #8]
 8005798:	2002      	movs	r0, #2
 800579a:	f7fe fc40 	bl	800401e <VL53L1_i2c_decode_uint16_t>
 800579e:	4603      	mov	r3, r0
 80057a0:	461a      	mov	r2, r3
	pdata->phasecal_result__reference_phase =
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	801a      	strh	r2, [r3, #0]
	pdata->phasecal_result__vcsel_start =
		(*(pbuffer +   2)) & 0x7F;
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	3302      	adds	r3, #2
 80057aa:	781b      	ldrb	r3, [r3, #0]
 80057ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057b0:	b2da      	uxtb	r2, r3
	pdata->phasecal_result__vcsel_start =
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	709a      	strb	r2, [r3, #2]
	pdata->ref_spad_char_result__num_actual_ref_spads =
		(*(pbuffer +   3)) & 0x3F;
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	3303      	adds	r3, #3
 80057ba:	781b      	ldrb	r3, [r3, #0]
 80057bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80057c0:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__num_actual_ref_spads =
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	70da      	strb	r2, [r3, #3]
	pdata->ref_spad_char_result__ref_location =
		(*(pbuffer +   4)) & 0x3;
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	3304      	adds	r3, #4
 80057ca:	781b      	ldrb	r3, [r3, #0]
 80057cc:	f003 0303 	and.w	r3, r3, #3
 80057d0:	b2da      	uxtb	r2, r3
	pdata->ref_spad_char_result__ref_location =
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	711a      	strb	r2, [r3, #4]
	pdata->vhv_result__coldboot_status =
		(*(pbuffer +   5)) & 0x1;
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	3305      	adds	r3, #5
 80057da:	781b      	ldrb	r3, [r3, #0]
 80057dc:	f003 0301 	and.w	r3, r3, #1
 80057e0:	b2da      	uxtb	r2, r3
	pdata->vhv_result__coldboot_status =
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	715a      	strb	r2, [r3, #5]
	pdata->vhv_result__search_result =
		(*(pbuffer +   6)) & 0x3F;
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	3306      	adds	r3, #6
 80057ea:	781b      	ldrb	r3, [r3, #0]
 80057ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80057f0:	b2da      	uxtb	r2, r3
	pdata->vhv_result__search_result =
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	719a      	strb	r2, [r3, #6]
	pdata->vhv_result__latest_setting =
		(*(pbuffer +   7)) & 0x3F;
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	3307      	adds	r3, #7
 80057fa:	781b      	ldrb	r3, [r3, #0]
 80057fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005800:	b2da      	uxtb	r2, r3
	pdata->vhv_result__latest_setting =
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	71da      	strb	r2, [r3, #7]
	pdata->result__osc_calibrate_val =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   8)) & 0x3FF;
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	3308      	adds	r3, #8
 800580a:	4619      	mov	r1, r3
 800580c:	2002      	movs	r0, #2
 800580e:	f7fe fc06 	bl	800401e <VL53L1_i2c_decode_uint16_t>
 8005812:	4603      	mov	r3, r0
 8005814:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005818:	b29a      	uxth	r2, r3
	pdata->result__osc_calibrate_val =
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	811a      	strh	r2, [r3, #8]
	pdata->ana_config__powerdown_go1 =
		(*(pbuffer +  10)) & 0x3;
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	330a      	adds	r3, #10
 8005822:	781b      	ldrb	r3, [r3, #0]
 8005824:	f003 0303 	and.w	r3, r3, #3
 8005828:	b2da      	uxtb	r2, r3
	pdata->ana_config__powerdown_go1 =
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	729a      	strb	r2, [r3, #10]
	pdata->ana_config__ref_bg_ctrl =
		(*(pbuffer +  11)) & 0x3;
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	330b      	adds	r3, #11
 8005832:	781b      	ldrb	r3, [r3, #0]
 8005834:	f003 0303 	and.w	r3, r3, #3
 8005838:	b2da      	uxtb	r2, r3
	pdata->ana_config__ref_bg_ctrl =
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	72da      	strb	r2, [r3, #11]
	pdata->ana_config__regdvdd1v2_ctrl =
		(*(pbuffer +  12)) & 0xF;
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	330c      	adds	r3, #12
 8005842:	781b      	ldrb	r3, [r3, #0]
 8005844:	f003 030f 	and.w	r3, r3, #15
 8005848:	b2da      	uxtb	r2, r3
	pdata->ana_config__regdvdd1v2_ctrl =
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	731a      	strb	r2, [r3, #12]
	pdata->ana_config__osc_slow_ctrl =
		(*(pbuffer +  13)) & 0x7;
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	330d      	adds	r3, #13
 8005852:	781b      	ldrb	r3, [r3, #0]
 8005854:	f003 0307 	and.w	r3, r3, #7
 8005858:	b2da      	uxtb	r2, r3
	pdata->ana_config__osc_slow_ctrl =
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	735a      	strb	r2, [r3, #13]
	pdata->test_mode__status =
		(*(pbuffer +  14)) & 0x1;
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	330e      	adds	r3, #14
 8005862:	781b      	ldrb	r3, [r3, #0]
 8005864:	f003 0301 	and.w	r3, r3, #1
 8005868:	b2da      	uxtb	r2, r3
	pdata->test_mode__status =
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	739a      	strb	r2, [r3, #14]
	pdata->firmware__system_status =
		(*(pbuffer +  15)) & 0x3;
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	330f      	adds	r3, #15
 8005872:	781b      	ldrb	r3, [r3, #0]
 8005874:	f003 0303 	and.w	r3, r3, #3
 8005878:	b2da      	uxtb	r2, r3
	pdata->firmware__system_status =
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	73da      	strb	r2, [r3, #15]
	pdata->firmware__mode_status =
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	7c1a      	ldrb	r2, [r3, #16]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  16));
	pdata->firmware__secondary_mode_status =
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	7c5a      	ldrb	r2, [r3, #17]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  17));
	pdata->firmware__cal_repeat_rate_counter =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  18)) & 0xFFF;
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	3312      	adds	r3, #18
 8005892:	4619      	mov	r1, r3
 8005894:	2002      	movs	r0, #2
 8005896:	f7fe fbc2 	bl	800401e <VL53L1_i2c_decode_uint16_t>
 800589a:	4603      	mov	r3, r0
 800589c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058a0:	b29a      	uxth	r2, r3
	pdata->firmware__cal_repeat_rate_counter =
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	825a      	strh	r2, [r3, #18]
	pdata->gph__system__thresh_high =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  22));
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	3316      	adds	r3, #22
 80058aa:	4619      	mov	r1, r3
 80058ac:	2002      	movs	r0, #2
 80058ae:	f7fe fbb6 	bl	800401e <VL53L1_i2c_decode_uint16_t>
 80058b2:	4603      	mov	r3, r0
 80058b4:	461a      	mov	r2, r3
	pdata->gph__system__thresh_high =
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	829a      	strh	r2, [r3, #20]
	pdata->gph__system__thresh_low =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +  24));
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	3318      	adds	r3, #24
 80058be:	4619      	mov	r1, r3
 80058c0:	2002      	movs	r0, #2
 80058c2:	f7fe fbac 	bl	800401e <VL53L1_i2c_decode_uint16_t>
 80058c6:	4603      	mov	r3, r0
 80058c8:	461a      	mov	r2, r3
	pdata->gph__system__thresh_low =
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	82da      	strh	r2, [r3, #22]
	pdata->gph__system__enable_xtalk_per_quadrant =
		(*(pbuffer +  26)) & 0x1;
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	331a      	adds	r3, #26
 80058d2:	781b      	ldrb	r3, [r3, #0]
 80058d4:	f003 0301 	and.w	r3, r3, #1
 80058d8:	b2da      	uxtb	r2, r3
	pdata->gph__system__enable_xtalk_per_quadrant =
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	761a      	strb	r2, [r3, #24]
	pdata->gph__spare_0 =
		(*(pbuffer +  27)) & 0x7;
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	331b      	adds	r3, #27
 80058e2:	781b      	ldrb	r3, [r3, #0]
 80058e4:	f003 0307 	and.w	r3, r3, #7
 80058e8:	b2da      	uxtb	r2, r3
	pdata->gph__spare_0 =
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	765a      	strb	r2, [r3, #25]
	pdata->gph__sd_config__woi_sd0 =
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	7f1a      	ldrb	r2, [r3, #28]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  28));
	pdata->gph__sd_config__woi_sd1 =
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	7f5a      	ldrb	r2, [r3, #29]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  29));
	pdata->gph__sd_config__initial_phase_sd0 =
		(*(pbuffer +  30)) & 0x7F;
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	331e      	adds	r3, #30
 8005902:	781b      	ldrb	r3, [r3, #0]
 8005904:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005908:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd0 =
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	771a      	strb	r2, [r3, #28]
	pdata->gph__sd_config__initial_phase_sd1 =
		(*(pbuffer +  31)) & 0x7F;
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	331f      	adds	r3, #31
 8005912:	781b      	ldrb	r3, [r3, #0]
 8005914:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005918:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__initial_phase_sd1 =
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	775a      	strb	r2, [r3, #29]
	pdata->gph__sd_config__first_order_select =
		(*(pbuffer +  32)) & 0x3;
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	3320      	adds	r3, #32
 8005922:	781b      	ldrb	r3, [r3, #0]
 8005924:	f003 0303 	and.w	r3, r3, #3
 8005928:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__first_order_select =
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	779a      	strb	r2, [r3, #30]
	pdata->gph__sd_config__quantifier =
		(*(pbuffer +  33)) & 0xF;
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	3321      	adds	r3, #33	; 0x21
 8005932:	781b      	ldrb	r3, [r3, #0]
 8005934:	f003 030f 	and.w	r3, r3, #15
 8005938:	b2da      	uxtb	r2, r3
	pdata->gph__sd_config__quantifier =
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	77da      	strb	r2, [r3, #31]
	pdata->gph__roi_config__user_roi_centre_spad =
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  34));
	pdata->gph__roi_config__user_roi_requested_global_xy_size =
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		(*(pbuffer +  35));
	pdata->gph__system__sequence_config =
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		(*(pbuffer +  36));
	pdata->gph__gph_id =
		(*(pbuffer +  37)) & 0x1;
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	3325      	adds	r3, #37	; 0x25
 8005966:	781b      	ldrb	r3, [r3, #0]
 8005968:	f003 0301 	and.w	r3, r3, #1
 800596c:	b2da      	uxtb	r2, r3
	pdata->gph__gph_id =
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	pdata->system__interrupt_set =
		(*(pbuffer +  38)) & 0x3;
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	3326      	adds	r3, #38	; 0x26
 8005978:	781b      	ldrb	r3, [r3, #0]
 800597a:	f003 0303 	and.w	r3, r3, #3
 800597e:	b2da      	uxtb	r2, r3
	pdata->system__interrupt_set =
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	pdata->interrupt_manager__enables =
		(*(pbuffer +  39)) & 0x1F;
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	3327      	adds	r3, #39	; 0x27
 800598a:	781b      	ldrb	r3, [r3, #0]
 800598c:	f003 031f 	and.w	r3, r3, #31
 8005990:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__enables =
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	pdata->interrupt_manager__clear =
		(*(pbuffer +  40)) & 0x1F;
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	3328      	adds	r3, #40	; 0x28
 800599c:	781b      	ldrb	r3, [r3, #0]
 800599e:	f003 031f 	and.w	r3, r3, #31
 80059a2:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__clear =
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	pdata->interrupt_manager__status =
		(*(pbuffer +  41)) & 0x1F;
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	3329      	adds	r3, #41	; 0x29
 80059ae:	781b      	ldrb	r3, [r3, #0]
 80059b0:	f003 031f 	and.w	r3, r3, #31
 80059b4:	b2da      	uxtb	r2, r3
	pdata->interrupt_manager__status =
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	pdata->mcu_to_host_bank__wr_access_en =
		(*(pbuffer +  42)) & 0x1;
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	332a      	adds	r3, #42	; 0x2a
 80059c0:	781b      	ldrb	r3, [r3, #0]
 80059c2:	f003 0301 	and.w	r3, r3, #1
 80059c6:	b2da      	uxtb	r2, r3
	pdata->mcu_to_host_bank__wr_access_en =
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pdata->power_management__go1_reset_status =
		(*(pbuffer +  43)) & 0x1;
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	332b      	adds	r3, #43	; 0x2b
 80059d2:	781b      	ldrb	r3, [r3, #0]
 80059d4:	f003 0301 	and.w	r3, r3, #1
 80059d8:	b2da      	uxtb	r2, r3
	pdata->power_management__go1_reset_status =
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	pdata->pad_startup_mode__value_ro =
		(*(pbuffer +  44)) & 0x3;
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	332c      	adds	r3, #44	; 0x2c
 80059e4:	781b      	ldrb	r3, [r3, #0]
 80059e6:	f003 0303 	and.w	r3, r3, #3
 80059ea:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ro =
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	pdata->pad_startup_mode__value_ctrl =
		(*(pbuffer +  45)) & 0x3F;
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	332d      	adds	r3, #45	; 0x2d
 80059f6:	781b      	ldrb	r3, [r3, #0]
 80059f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80059fc:	b2da      	uxtb	r2, r3
	pdata->pad_startup_mode__value_ctrl =
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	pdata->pll_period_us =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  46)) & 0x3FFFF;
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	332e      	adds	r3, #46	; 0x2e
 8005a08:	4619      	mov	r1, r3
 8005a0a:	2004      	movs	r0, #4
 8005a0c:	f7fe fba4 	bl	8004158 <VL53L1_i2c_decode_uint32_t>
 8005a10:	4603      	mov	r3, r0
 8005a12:	f3c3 0211 	ubfx	r2, r3, #0, #18
	pdata->pll_period_us =
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	62da      	str	r2, [r3, #44]	; 0x2c
	pdata->interrupt_scheduler__data_out =
		(VL53L1_i2c_decode_uint32_t(4, pbuffer +  50));
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	3332      	adds	r3, #50	; 0x32
 8005a1e:	4619      	mov	r1, r3
 8005a20:	2004      	movs	r0, #4
 8005a22:	f7fe fb99 	bl	8004158 <VL53L1_i2c_decode_uint32_t>
 8005a26:	4602      	mov	r2, r0
	pdata->interrupt_scheduler__data_out =
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	631a      	str	r2, [r3, #48]	; 0x30
	pdata->nvm_bist__complete =
		(*(pbuffer +  54)) & 0x1;
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	3336      	adds	r3, #54	; 0x36
 8005a30:	781b      	ldrb	r3, [r3, #0]
 8005a32:	f003 0301 	and.w	r3, r3, #1
 8005a36:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__complete =
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	pdata->nvm_bist__status =
		(*(pbuffer +  55)) & 0x1;
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	3337      	adds	r3, #55	; 0x37
 8005a42:	781b      	ldrb	r3, [r3, #0]
 8005a44:	f003 0301 	and.w	r3, r3, #1
 8005a48:	b2da      	uxtb	r2, r3
	pdata->nvm_bist__status =
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	LOG_FUNCTION_END(status);

	return status;
 8005a50:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	3718      	adds	r7, #24
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}

08005a5c <VL53L1_i2c_decode_nvm_copy_data>:

VL53L1_Error VL53L1_i2c_decode_nvm_copy_data(
	uint16_t                   buf_size,
	uint8_t                   *pbuffer,
	VL53L1_nvm_copy_data_t    *pdata)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b086      	sub	sp, #24
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	4603      	mov	r3, r0
 8005a64:	60b9      	str	r1, [r7, #8]
 8005a66:	607a      	str	r2, [r7, #4]
 8005a68:	81fb      	strh	r3, [r7, #14]
	/**
	 * Decodes data structure VL53L1_nvm_copy_data_t from the input I2C read buffer
	 * Buffer must be at least 49 bytes
	*/

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_START("");

	if (VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES > buf_size)
 8005a6e:	89fb      	ldrh	r3, [r7, #14]
 8005a70:	2b30      	cmp	r3, #48	; 0x30
 8005a72:	d802      	bhi.n	8005a7a <VL53L1_i2c_decode_nvm_copy_data+0x1e>
		return VL53L1_ERROR_COMMS_BUFFER_TOO_SMALL;
 8005a74:	f06f 0309 	mvn.w	r3, #9
 8005a78:	e112      	b.n	8005ca0 <VL53L1_i2c_decode_nvm_copy_data+0x244>

	pdata->identification__model_id =
		(*(pbuffer +   0));
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	781a      	ldrb	r2, [r3, #0]
	pdata->identification__model_id =
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	701a      	strb	r2, [r3, #0]
	pdata->identification__module_type =
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	785a      	ldrb	r2, [r3, #1]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	705a      	strb	r2, [r3, #1]
		(*(pbuffer +   1));
	pdata->identification__revision_id =
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	789a      	ldrb	r2, [r3, #2]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	709a      	strb	r2, [r3, #2]
		(*(pbuffer +   2));
	pdata->identification__module_id =
		(VL53L1_i2c_decode_uint16_t(2, pbuffer +   3));
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	3303      	adds	r3, #3
 8005a96:	4619      	mov	r1, r3
 8005a98:	2002      	movs	r0, #2
 8005a9a:	f7fe fac0 	bl	800401e <VL53L1_i2c_decode_uint16_t>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	461a      	mov	r2, r3
	pdata->identification__module_id =
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	809a      	strh	r2, [r3, #4]
	pdata->ana_config__fast_osc__trim_max =
		(*(pbuffer +   5)) & 0x7F;
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	3305      	adds	r3, #5
 8005aaa:	781b      	ldrb	r3, [r3, #0]
 8005aac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ab0:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__trim_max =
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	719a      	strb	r2, [r3, #6]
	pdata->ana_config__fast_osc__freq_set =
		(*(pbuffer +   6)) & 0x7;
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	3306      	adds	r3, #6
 8005aba:	781b      	ldrb	r3, [r3, #0]
 8005abc:	f003 0307 	and.w	r3, r3, #7
 8005ac0:	b2da      	uxtb	r2, r3
	pdata->ana_config__fast_osc__freq_set =
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	71da      	strb	r2, [r3, #7]
	pdata->ana_config__vcsel_trim =
		(*(pbuffer +   7)) & 0x7;
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	3307      	adds	r3, #7
 8005aca:	781b      	ldrb	r3, [r3, #0]
 8005acc:	f003 0307 	and.w	r3, r3, #7
 8005ad0:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_trim =
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	721a      	strb	r2, [r3, #8]
	pdata->ana_config__vcsel_selion =
		(*(pbuffer +   8)) & 0x3F;
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	3308      	adds	r3, #8
 8005ada:	781b      	ldrb	r3, [r3, #0]
 8005adc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ae0:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion =
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	725a      	strb	r2, [r3, #9]
	pdata->ana_config__vcsel_selion_max =
		(*(pbuffer +   9)) & 0x3F;
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	3309      	adds	r3, #9
 8005aea:	781b      	ldrb	r3, [r3, #0]
 8005aec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005af0:	b2da      	uxtb	r2, r3
	pdata->ana_config__vcsel_selion_max =
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	729a      	strb	r2, [r3, #10]
	pdata->protected_laser_safety__lock_bit =
		(*(pbuffer +  10)) & 0x1;
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	330a      	adds	r3, #10
 8005afa:	781b      	ldrb	r3, [r3, #0]
 8005afc:	f003 0301 	and.w	r3, r3, #1
 8005b00:	b2da      	uxtb	r2, r3
	pdata->protected_laser_safety__lock_bit =
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	72da      	strb	r2, [r3, #11]
	pdata->laser_safety__key =
		(*(pbuffer +  11)) & 0x7F;
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	330b      	adds	r3, #11
 8005b0a:	781b      	ldrb	r3, [r3, #0]
 8005b0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b10:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key =
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	731a      	strb	r2, [r3, #12]
	pdata->laser_safety__key_ro =
		(*(pbuffer +  12)) & 0x1;
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	330c      	adds	r3, #12
 8005b1a:	781b      	ldrb	r3, [r3, #0]
 8005b1c:	f003 0301 	and.w	r3, r3, #1
 8005b20:	b2da      	uxtb	r2, r3
	pdata->laser_safety__key_ro =
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	735a      	strb	r2, [r3, #13]
	pdata->laser_safety__clip =
		(*(pbuffer +  13)) & 0x3F;
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	330d      	adds	r3, #13
 8005b2a:	781b      	ldrb	r3, [r3, #0]
 8005b2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b30:	b2da      	uxtb	r2, r3
	pdata->laser_safety__clip =
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	739a      	strb	r2, [r3, #14]
	pdata->laser_safety__mult =
		(*(pbuffer +  14)) & 0x3F;
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	330e      	adds	r3, #14
 8005b3a:	781b      	ldrb	r3, [r3, #0]
 8005b3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b40:	b2da      	uxtb	r2, r3
	pdata->laser_safety__mult =
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	73da      	strb	r2, [r3, #15]
	pdata->global_config__spad_enables_rtn_0 =
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	7bda      	ldrb	r2, [r3, #15]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	741a      	strb	r2, [r3, #16]
		(*(pbuffer +  15));
	pdata->global_config__spad_enables_rtn_1 =
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	7c1a      	ldrb	r2, [r3, #16]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	745a      	strb	r2, [r3, #17]
		(*(pbuffer +  16));
	pdata->global_config__spad_enables_rtn_2 =
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	7c5a      	ldrb	r2, [r3, #17]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	749a      	strb	r2, [r3, #18]
		(*(pbuffer +  17));
	pdata->global_config__spad_enables_rtn_3 =
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	7c9a      	ldrb	r2, [r3, #18]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	74da      	strb	r2, [r3, #19]
		(*(pbuffer +  18));
	pdata->global_config__spad_enables_rtn_4 =
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	7cda      	ldrb	r2, [r3, #19]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	751a      	strb	r2, [r3, #20]
		(*(pbuffer +  19));
	pdata->global_config__spad_enables_rtn_5 =
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	7d1a      	ldrb	r2, [r3, #20]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	755a      	strb	r2, [r3, #21]
		(*(pbuffer +  20));
	pdata->global_config__spad_enables_rtn_6 =
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	7d5a      	ldrb	r2, [r3, #21]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	759a      	strb	r2, [r3, #22]
		(*(pbuffer +  21));
	pdata->global_config__spad_enables_rtn_7 =
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	7d9a      	ldrb	r2, [r3, #22]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	75da      	strb	r2, [r3, #23]
		(*(pbuffer +  22));
	pdata->global_config__spad_enables_rtn_8 =
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	7dda      	ldrb	r2, [r3, #23]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	761a      	strb	r2, [r3, #24]
		(*(pbuffer +  23));
	pdata->global_config__spad_enables_rtn_9 =
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	7e1a      	ldrb	r2, [r3, #24]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	765a      	strb	r2, [r3, #25]
		(*(pbuffer +  24));
	pdata->global_config__spad_enables_rtn_10 =
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	7e5a      	ldrb	r2, [r3, #25]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	769a      	strb	r2, [r3, #26]
		(*(pbuffer +  25));
	pdata->global_config__spad_enables_rtn_11 =
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	7e9a      	ldrb	r2, [r3, #26]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	76da      	strb	r2, [r3, #27]
		(*(pbuffer +  26));
	pdata->global_config__spad_enables_rtn_12 =
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	7eda      	ldrb	r2, [r3, #27]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	771a      	strb	r2, [r3, #28]
		(*(pbuffer +  27));
	pdata->global_config__spad_enables_rtn_13 =
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	7f1a      	ldrb	r2, [r3, #28]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	775a      	strb	r2, [r3, #29]
		(*(pbuffer +  28));
	pdata->global_config__spad_enables_rtn_14 =
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	7f5a      	ldrb	r2, [r3, #29]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	779a      	strb	r2, [r3, #30]
		(*(pbuffer +  29));
	pdata->global_config__spad_enables_rtn_15 =
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	7f9a      	ldrb	r2, [r3, #30]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	77da      	strb	r2, [r3, #31]
		(*(pbuffer +  30));
	pdata->global_config__spad_enables_rtn_16 =
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	7fda      	ldrb	r2, [r3, #31]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	f883 2020 	strb.w	r2, [r3, #32]
		(*(pbuffer +  31));
	pdata->global_config__spad_enables_rtn_17 =
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	f893 2020 	ldrb.w	r2, [r3, #32]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		(*(pbuffer +  32));
	pdata->global_config__spad_enables_rtn_18 =
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		(*(pbuffer +  33));
	pdata->global_config__spad_enables_rtn_19 =
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		(*(pbuffer +  34));
	pdata->global_config__spad_enables_rtn_20 =
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		(*(pbuffer +  35));
	pdata->global_config__spad_enables_rtn_21 =
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
		(*(pbuffer +  36));
	pdata->global_config__spad_enables_rtn_22 =
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
		(*(pbuffer +  37));
	pdata->global_config__spad_enables_rtn_23 =
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		(*(pbuffer +  38));
	pdata->global_config__spad_enables_rtn_24 =
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		(*(pbuffer +  39));
	pdata->global_config__spad_enables_rtn_25 =
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		(*(pbuffer +  40));
	pdata->global_config__spad_enables_rtn_26 =
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		(*(pbuffer +  41));
	pdata->global_config__spad_enables_rtn_27 =
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		(*(pbuffer +  42));
	pdata->global_config__spad_enables_rtn_28 =
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		(*(pbuffer +  43));
	pdata->global_config__spad_enables_rtn_29 =
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		(*(pbuffer +  44));
	pdata->global_config__spad_enables_rtn_30 =
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
		(*(pbuffer +  45));
	pdata->global_config__spad_enables_rtn_31 =
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		(*(pbuffer +  46));
	pdata->roi_config__mode_roi_centre_spad =
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		(*(pbuffer +  47));
	pdata->roi_config__mode_roi_xy_size =
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
		(*(pbuffer +  48));

	LOG_FUNCTION_END(status);

	return status;
 8005c9c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	3718      	adds	r7, #24
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}

08005ca8 <VL53L1_get_nvm_copy_data>:


VL53L1_Error VL53L1_get_nvm_copy_data(
	VL53L1_DEV                 Dev,
	VL53L1_nvm_copy_data_t    *pdata)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b090      	sub	sp, #64	; 0x40
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
 8005cb0:	6039      	str	r1, [r7, #0]
	/**
	 * Reads and de-serialises the contents of VL53L1_nvm_copy_data_t
	 * data structure from the device
	 */

	VL53L1_Error status = VL53L1_ERROR_NONE;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t comms_buffer[VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES];

	LOG_FUNCTION_START("");

	if (status == VL53L1_ERROR_NONE) /*lint !e774 always true*/
 8005cb8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d10a      	bne.n	8005cd6 <VL53L1_get_nvm_copy_data+0x2e>
		status = VL53L1_ReadMulti(
 8005cc0:	f107 020c 	add.w	r2, r7, #12
 8005cc4:	2331      	movs	r3, #49	; 0x31
 8005cc6:	f240 110f 	movw	r1, #271	; 0x10f
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f000 f8be 	bl	8005e4c <VL53L1_ReadMulti>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			VL53L1_IDENTIFICATION__MODEL_ID,
			comms_buffer,
			VL53L1_NVM_COPY_DATA_I2C_SIZE_BYTES);

	if (status == VL53L1_ERROR_NONE)
 8005cd6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d109      	bne.n	8005cf2 <VL53L1_get_nvm_copy_data+0x4a>
		status = VL53L1_i2c_decode_nvm_copy_data(
 8005cde:	f107 030c 	add.w	r3, r7, #12
 8005ce2:	683a      	ldr	r2, [r7, #0]
 8005ce4:	4619      	mov	r1, r3
 8005ce6:	2031      	movs	r0, #49	; 0x31
 8005ce8:	f7ff feb8 	bl	8005a5c <VL53L1_i2c_decode_nvm_copy_data>
 8005cec:	4603      	mov	r3, r0
 8005cee:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			comms_buffer,
			pdata);

	LOG_FUNCTION_END(status);

	return status;
 8005cf2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3740      	adds	r7, #64	; 0x40
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}

08005cfe <VL53L1_poll_for_boot_completion>:


VL53L1_Error VL53L1_poll_for_boot_completion(
	VL53L1_DEV    Dev,
	uint32_t      timeout_ms)
{
 8005cfe:	b580      	push	{r7, lr}
 8005d00:	b086      	sub	sp, #24
 8005d02:	af02      	add	r7, sp, #8
 8005d04:	6078      	str	r0, [r7, #4]
 8005d06:	6039      	str	r1, [r7, #0]
	/**
	 * Polls the bit 0 of the FIRMWARE__SYSTEM_STATUS register to see if
	 * the firmware is ready.
	 */

	VL53L1_Error status       = VL53L1_ERROR_NONE;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	73fb      	strb	r3, [r7, #15]
	 * it copies the NVM data into the G02 host register banks
	 * The host must wait the required time to allow the copy
	 * to complete before attempting to read the firmware status
	 */

	status = VL53L1_WaitUs(
 8005d0c:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f000 f98b 	bl	800602c <VL53L1_WaitUs>
 8005d16:	4603      	mov	r3, r0
 8005d18:	73fb      	strb	r3, [r7, #15]
			Dev,
			VL53L1_FIRMWARE_BOOT_TIME_US);

	if (status == VL53L1_ERROR_NONE)
 8005d1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d10b      	bne.n	8005d3a <VL53L1_poll_for_boot_completion+0x3c>
		status =
 8005d22:	2301      	movs	r3, #1
 8005d24:	9301      	str	r3, [sp, #4]
 8005d26:	2301      	movs	r3, #1
 8005d28:	9300      	str	r3, [sp, #0]
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	22e5      	movs	r2, #229	; 0xe5
 8005d2e:	6839      	ldr	r1, [r7, #0]
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f000 f991 	bl	8006058 <VL53L1_WaitValueMaskEx>
 8005d36:	4603      	mov	r3, r0
 8005d38:	73fb      	strb	r3, [r7, #15]
				VL53L1_FIRMWARE__SYSTEM_STATUS,
				0x01,
				0x01,
				VL53L1_POLLING_DELAY_MS);

	if (status == VL53L1_ERROR_NONE)
 8005d3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d103      	bne.n	8005d4a <VL53L1_poll_for_boot_completion+0x4c>
		VL53L1_init_ll_driver_state(Dev, VL53L1_DEVICESTATE_SW_STANDBY);
 8005d42:	2103      	movs	r1, #3
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f7fd ff23 	bl	8003b90 <VL53L1_init_ll_driver_state>

	LOG_FUNCTION_END(status);

	return status;
 8005d4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3710      	adds	r7, #16
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}

08005d56 <_I2CWrite>:
 #   define VL53L1_PutI2cBus(...) (void)0
 #endif

 uint8_t _I2CBuffer[256];

 int _I2CWrite(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count) {
 8005d56:	b580      	push	{r7, lr}
 8005d58:	b088      	sub	sp, #32
 8005d5a:	af02      	add	r7, sp, #8
 8005d5c:	60f8      	str	r0, [r7, #12]
 8005d5e:	60b9      	str	r1, [r7, #8]
 8005d60:	607a      	str	r2, [r7, #4]
     int status = 0;
 8005d62:	2300      	movs	r3, #0
 8005d64:	617b      	str	r3, [r7, #20]
     int i2c_time_out = I2C_TIME_OUT_BASE + count * I2C_TIME_OUT_BYTE;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	330a      	adds	r3, #10
 8005d6a:	613b      	str	r3, [r7, #16]

     status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f8d3 03a0 	ldr.w	r0, [r3, #928]	; 0x3a0
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	f893 3398 	ldrb.w	r3, [r3, #920]	; 0x398
 8005d78:	b299      	uxth	r1, r3
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	b29a      	uxth	r2, r3
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	9300      	str	r3, [sp, #0]
 8005d82:	4613      	mov	r3, r2
 8005d84:	68ba      	ldr	r2, [r7, #8]
 8005d86:	f000 fe27 	bl	80069d8 <HAL_I2C_Master_Transmit>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	617b      	str	r3, [r7, #20]

     return status;
 8005d8e:	697b      	ldr	r3, [r7, #20]
 }
 8005d90:	4618      	mov	r0, r3
 8005d92:	3718      	adds	r7, #24
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bd80      	pop	{r7, pc}

08005d98 <_I2CRead>:

 int _I2CRead(VL53L1_DEV Dev, uint8_t *pdata, uint32_t count) {
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b088      	sub	sp, #32
 8005d9c:	af02      	add	r7, sp, #8
 8005d9e:	60f8      	str	r0, [r7, #12]
 8005da0:	60b9      	str	r1, [r7, #8]
 8005da2:	607a      	str	r2, [r7, #4]
    int status = 0;
 8005da4:	2300      	movs	r3, #0
 8005da6:	617b      	str	r3, [r7, #20]
    int i2c_time_out = I2C_TIME_OUT_BASE + count * I2C_TIME_OUT_BYTE;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	330a      	adds	r3, #10
 8005dac:	613b      	str	r3, [r7, #16]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	f8d3 03a0 	ldr.w	r0, [r3, #928]	; 0x3a0
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f893 3398 	ldrb.w	r3, [r3, #920]	; 0x398
 8005dba:	f043 0301 	orr.w	r3, r3, #1
 8005dbe:	b2db      	uxtb	r3, r3
 8005dc0:	b299      	uxth	r1, r3
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	b29a      	uxth	r2, r3
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	9300      	str	r3, [sp, #0]
 8005dca:	4613      	mov	r3, r2
 8005dcc:	68ba      	ldr	r2, [r7, #8]
 8005dce:	f000 ff11 	bl	8006bf4 <HAL_I2C_Master_Receive>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	617b      	str	r3, [r7, #20]

    return status;
 8005dd6:	697b      	ldr	r3, [r7, #20]
 }
 8005dd8:	4618      	mov	r0, r3
 8005dda:	3718      	adds	r7, #24
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}

08005de0 <VL53L1_WriteMulti>:

VL53L1_Error VL53L1_WriteMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b086      	sub	sp, #24
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	60f8      	str	r0, [r7, #12]
 8005de8:	607a      	str	r2, [r7, #4]
 8005dea:	603b      	str	r3, [r7, #0]
 8005dec:	460b      	mov	r3, r1
 8005dee:	817b      	strh	r3, [r7, #10]
    int status_int;
	VL53L1_Error Status = VL53L1_ERROR_NONE;
 8005df0:	2300      	movs	r3, #0
 8005df2:	75fb      	strb	r3, [r7, #23]
	//check if the command fits in the buffer
	if(count > sizeof(_I2CBuffer)-1) {
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	2bff      	cmp	r3, #255	; 0xff
 8005df8:	d902      	bls.n	8005e00 <VL53L1_WriteMulti+0x20>
		return VL53L1_ERROR_INVALID_PARAMS;
 8005dfa:	f06f 0303 	mvn.w	r3, #3
 8005dfe:	e01d      	b.n	8005e3c <VL53L1_WriteMulti+0x5c>
	}

	_I2CBuffer[0] = index>>8;
 8005e00:	897b      	ldrh	r3, [r7, #10]
 8005e02:	0a1b      	lsrs	r3, r3, #8
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	b2da      	uxtb	r2, r3
 8005e08:	4b0e      	ldr	r3, [pc, #56]	; (8005e44 <VL53L1_WriteMulti+0x64>)
 8005e0a:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 8005e0c:	897b      	ldrh	r3, [r7, #10]
 8005e0e:	b2da      	uxtb	r2, r3
 8005e10:	4b0c      	ldr	r3, [pc, #48]	; (8005e44 <VL53L1_WriteMulti+0x64>)
 8005e12:	705a      	strb	r2, [r3, #1]

	memcpy(&_I2CBuffer[2], pdata, count);
 8005e14:	683a      	ldr	r2, [r7, #0]
 8005e16:	6879      	ldr	r1, [r7, #4]
 8005e18:	480b      	ldr	r0, [pc, #44]	; (8005e48 <VL53L1_WriteMulti+0x68>)
 8005e1a:	f006 fc19 	bl	800c650 <memcpy>
	VL53L1_GetI2cBus();
	status_int = _I2CWrite(Dev, _I2CBuffer, count + 2);
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	3302      	adds	r3, #2
 8005e22:	461a      	mov	r2, r3
 8005e24:	4907      	ldr	r1, [pc, #28]	; (8005e44 <VL53L1_WriteMulti+0x64>)
 8005e26:	68f8      	ldr	r0, [r7, #12]
 8005e28:	f7ff ff95 	bl	8005d56 <_I2CWrite>
 8005e2c:	6138      	str	r0, [r7, #16]
	if (status_int != 0) {
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d001      	beq.n	8005e38 <VL53L1_WriteMulti+0x58>
	        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8005e34:	23f3      	movs	r3, #243	; 0xf3
 8005e36:	75fb      	strb	r3, [r7, #23]
	    }
	VL53L1_PutI2cBus();

    return Status;
 8005e38:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	3718      	adds	r7, #24
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}
 8005e44:	20004518 	.word	0x20004518
 8005e48:	2000451a 	.word	0x2000451a

08005e4c <VL53L1_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L1_Error VL53L1_ReadMulti(VL53L1_DEV Dev, uint16_t index, uint8_t *pdata, uint32_t count) {
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b086      	sub	sp, #24
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	60f8      	str	r0, [r7, #12]
 8005e54:	607a      	str	r2, [r7, #4]
 8005e56:	603b      	str	r3, [r7, #0]
 8005e58:	460b      	mov	r3, r1
 8005e5a:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8005e60:	897b      	ldrh	r3, [r7, #10]
 8005e62:	0a1b      	lsrs	r3, r3, #8
 8005e64:	b29b      	uxth	r3, r3
 8005e66:	b2da      	uxtb	r2, r3
 8005e68:	4b11      	ldr	r3, [pc, #68]	; (8005eb0 <VL53L1_ReadMulti+0x64>)
 8005e6a:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8005e6c:	897b      	ldrh	r3, [r7, #10]
 8005e6e:	b2da      	uxtb	r2, r3
 8005e70:	4b0f      	ldr	r3, [pc, #60]	; (8005eb0 <VL53L1_ReadMulti+0x64>)
 8005e72:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8005e74:	2202      	movs	r2, #2
 8005e76:	490e      	ldr	r1, [pc, #56]	; (8005eb0 <VL53L1_ReadMulti+0x64>)
 8005e78:	68f8      	ldr	r0, [r7, #12]
 8005e7a:	f7ff ff6c 	bl	8005d56 <_I2CWrite>
 8005e7e:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d002      	beq.n	8005e8c <VL53L1_ReadMulti+0x40>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8005e86:	23f3      	movs	r3, #243	; 0xf3
 8005e88:	75fb      	strb	r3, [r7, #23]
        goto done;
 8005e8a:	e00a      	b.n	8005ea2 <VL53L1_ReadMulti+0x56>
    }
    status_int = _I2CRead(Dev, pdata, count);
 8005e8c:	683a      	ldr	r2, [r7, #0]
 8005e8e:	6879      	ldr	r1, [r7, #4]
 8005e90:	68f8      	ldr	r0, [r7, #12]
 8005e92:	f7ff ff81 	bl	8005d98 <_I2CRead>
 8005e96:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d001      	beq.n	8005ea2 <VL53L1_ReadMulti+0x56>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8005e9e:	23f3      	movs	r3, #243	; 0xf3
 8005ea0:	75fb      	strb	r3, [r7, #23]
    }
done:
    VL53L1_PutI2cBus();
    return Status;
 8005ea2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3718      	adds	r7, #24
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}
 8005eae:	bf00      	nop
 8005eb0:	20004518 	.word	0x20004518

08005eb4 <VL53L1_WrByte>:

VL53L1_Error VL53L1_WrByte(VL53L1_DEV Dev, uint16_t index, uint8_t data) {
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b084      	sub	sp, #16
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
 8005ebc:	460b      	mov	r3, r1
 8005ebe:	807b      	strh	r3, [r7, #2]
 8005ec0:	4613      	mov	r3, r2
 8005ec2:	707b      	strb	r3, [r7, #1]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8005ec8:	887b      	ldrh	r3, [r7, #2]
 8005eca:	0a1b      	lsrs	r3, r3, #8
 8005ecc:	b29b      	uxth	r3, r3
 8005ece:	b2da      	uxtb	r2, r3
 8005ed0:	4b0c      	ldr	r3, [pc, #48]	; (8005f04 <VL53L1_WrByte+0x50>)
 8005ed2:	701a      	strb	r2, [r3, #0]
    _I2CBuffer[1] = index&0xFF;
 8005ed4:	887b      	ldrh	r3, [r7, #2]
 8005ed6:	b2da      	uxtb	r2, r3
 8005ed8:	4b0a      	ldr	r3, [pc, #40]	; (8005f04 <VL53L1_WrByte+0x50>)
 8005eda:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data;
 8005edc:	4a09      	ldr	r2, [pc, #36]	; (8005f04 <VL53L1_WrByte+0x50>)
 8005ede:	787b      	ldrb	r3, [r7, #1]
 8005ee0:	7093      	strb	r3, [r2, #2]

    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 8005ee2:	2203      	movs	r2, #3
 8005ee4:	4907      	ldr	r1, [pc, #28]	; (8005f04 <VL53L1_WrByte+0x50>)
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f7ff ff35 	bl	8005d56 <_I2CWrite>
 8005eec:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d001      	beq.n	8005ef8 <VL53L1_WrByte+0x44>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8005ef4:	23f3      	movs	r3, #243	; 0xf3
 8005ef6:	73fb      	strb	r3, [r7, #15]
    }
    VL53L1_PutI2cBus();
    return Status;
 8005ef8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	3710      	adds	r7, #16
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}
 8005f04:	20004518 	.word	0x20004518

08005f08 <VL53L1_RdByte>:
    Status = VL53L1_WrByte(Dev, index, data);
done:
    return Status;
}

VL53L1_Error VL53L1_RdByte(VL53L1_DEV Dev, uint16_t index, uint8_t *data) {
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b086      	sub	sp, #24
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	60f8      	str	r0, [r7, #12]
 8005f10:	460b      	mov	r3, r1
 8005f12:	607a      	str	r2, [r7, #4]
 8005f14:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8005f16:	2300      	movs	r3, #0
 8005f18:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

	_I2CBuffer[0] = index>>8;
 8005f1a:	897b      	ldrh	r3, [r7, #10]
 8005f1c:	0a1b      	lsrs	r3, r3, #8
 8005f1e:	b29b      	uxth	r3, r3
 8005f20:	b2da      	uxtb	r2, r3
 8005f22:	4b11      	ldr	r3, [pc, #68]	; (8005f68 <VL53L1_RdByte+0x60>)
 8005f24:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 8005f26:	897b      	ldrh	r3, [r7, #10]
 8005f28:	b2da      	uxtb	r2, r3
 8005f2a:	4b0f      	ldr	r3, [pc, #60]	; (8005f68 <VL53L1_RdByte+0x60>)
 8005f2c:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8005f2e:	2202      	movs	r2, #2
 8005f30:	490d      	ldr	r1, [pc, #52]	; (8005f68 <VL53L1_RdByte+0x60>)
 8005f32:	68f8      	ldr	r0, [r7, #12]
 8005f34:	f7ff ff0f 	bl	8005d56 <_I2CWrite>
 8005f38:	6138      	str	r0, [r7, #16]
    if( status_int ){
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d002      	beq.n	8005f46 <VL53L1_RdByte+0x3e>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8005f40:	23f3      	movs	r3, #243	; 0xf3
 8005f42:	75fb      	strb	r3, [r7, #23]
        goto done;
 8005f44:	e00a      	b.n	8005f5c <VL53L1_RdByte+0x54>
    }
    status_int = _I2CRead(Dev, data, 1);
 8005f46:	2201      	movs	r2, #1
 8005f48:	6879      	ldr	r1, [r7, #4]
 8005f4a:	68f8      	ldr	r0, [r7, #12]
 8005f4c:	f7ff ff24 	bl	8005d98 <_I2CRead>
 8005f50:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d001      	beq.n	8005f5c <VL53L1_RdByte+0x54>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8005f58:	23f3      	movs	r3, #243	; 0xf3
 8005f5a:	75fb      	strb	r3, [r7, #23]
    }
done:
    VL53L1_PutI2cBus();
    return Status;
 8005f5c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	3718      	adds	r7, #24
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}
 8005f68:	20004518 	.word	0x20004518

08005f6c <VL53L1_RdWord>:

VL53L1_Error VL53L1_RdWord(VL53L1_DEV Dev, uint16_t index, uint16_t *data) {
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b086      	sub	sp, #24
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	60f8      	str	r0, [r7, #12]
 8005f74:	460b      	mov	r3, r1
 8005f76:	607a      	str	r2, [r7, #4]
 8005f78:	817b      	strh	r3, [r7, #10]
    VL53L1_Error Status = VL53L1_ERROR_NONE;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    _I2CBuffer[0] = index>>8;
 8005f7e:	897b      	ldrh	r3, [r7, #10]
 8005f80:	0a1b      	lsrs	r3, r3, #8
 8005f82:	b29b      	uxth	r3, r3
 8005f84:	b2da      	uxtb	r2, r3
 8005f86:	4b18      	ldr	r3, [pc, #96]	; (8005fe8 <VL53L1_RdWord+0x7c>)
 8005f88:	701a      	strb	r2, [r3, #0]
	_I2CBuffer[1] = index&0xFF;
 8005f8a:	897b      	ldrh	r3, [r7, #10]
 8005f8c:	b2da      	uxtb	r2, r3
 8005f8e:	4b16      	ldr	r3, [pc, #88]	; (8005fe8 <VL53L1_RdWord+0x7c>)
 8005f90:	705a      	strb	r2, [r3, #1]
    VL53L1_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8005f92:	2202      	movs	r2, #2
 8005f94:	4914      	ldr	r1, [pc, #80]	; (8005fe8 <VL53L1_RdWord+0x7c>)
 8005f96:	68f8      	ldr	r0, [r7, #12]
 8005f98:	f7ff fedd 	bl	8005d56 <_I2CWrite>
 8005f9c:	6138      	str	r0, [r7, #16]

    if( status_int ){
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d002      	beq.n	8005faa <VL53L1_RdWord+0x3e>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8005fa4:	23f3      	movs	r3, #243	; 0xf3
 8005fa6:	75fb      	strb	r3, [r7, #23]
        goto done;
 8005fa8:	e017      	b.n	8005fda <VL53L1_RdWord+0x6e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 8005faa:	2202      	movs	r2, #2
 8005fac:	490e      	ldr	r1, [pc, #56]	; (8005fe8 <VL53L1_RdWord+0x7c>)
 8005fae:	68f8      	ldr	r0, [r7, #12]
 8005fb0:	f7ff fef2 	bl	8005d98 <_I2CRead>
 8005fb4:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d002      	beq.n	8005fc2 <VL53L1_RdWord+0x56>
        Status = VL53L1_ERROR_CONTROL_INTERFACE;
 8005fbc:	23f3      	movs	r3, #243	; 0xf3
 8005fbe:	75fb      	strb	r3, [r7, #23]
        goto done;
 8005fc0:	e00b      	b.n	8005fda <VL53L1_RdWord+0x6e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 8005fc2:	4b09      	ldr	r3, [pc, #36]	; (8005fe8 <VL53L1_RdWord+0x7c>)
 8005fc4:	781b      	ldrb	r3, [r3, #0]
 8005fc6:	b29b      	uxth	r3, r3
 8005fc8:	021b      	lsls	r3, r3, #8
 8005fca:	b29a      	uxth	r2, r3
 8005fcc:	4b06      	ldr	r3, [pc, #24]	; (8005fe8 <VL53L1_RdWord+0x7c>)
 8005fce:	785b      	ldrb	r3, [r3, #1]
 8005fd0:	b29b      	uxth	r3, r3
 8005fd2:	4413      	add	r3, r2
 8005fd4:	b29a      	uxth	r2, r3
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	801a      	strh	r2, [r3, #0]
done:
    VL53L1_PutI2cBus();
    return Status;
 8005fda:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3718      	adds	r7, #24
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}
 8005fe6:	bf00      	nop
 8005fe8:	20004518 	.word	0x20004518

08005fec <VL53L1_GetTickCount>:
    return Status;
}

VL53L1_Error VL53L1_GetTickCount(
	uint32_t *ptick_count_ms)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b085      	sub	sp, #20
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]

    /* Returns current tick count in [ms] */

	VL53L1_Error status  = VL53L1_ERROR_NONE;
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	73fb      	strb	r3, [r7, #15]

	//*ptick_count_ms = timeGetTime();
	*ptick_count_ms = 0;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	601a      	str	r2, [r3, #0]
		VL53L1_TRACE_LEVEL_DEBUG,
		"VL53L1_GetTickCount() = %5u ms;\n",
	*ptick_count_ms);
#endif

	return status;
 8005ffe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006002:	4618      	mov	r0, r3
 8006004:	3714      	adds	r7, #20
 8006006:	46bd      	mov	sp, r7
 8006008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600c:	4770      	bx	lr

0800600e <VL53L1_WaitMs>:

	trace_print(VL53L1_TRACE_LEVEL_INFO, "VL53L1_GetTimerFrequency: Freq : %dHz\n", *ptimer_freq_hz);
	return VL53L1_ERROR_NONE;
}

VL53L1_Error VL53L1_WaitMs(VL53L1_Dev_t *pdev, int32_t wait_ms){
 800600e:	b580      	push	{r7, lr}
 8006010:	b082      	sub	sp, #8
 8006012:	af00      	add	r7, sp, #0
 8006014:	6078      	str	r0, [r7, #4]
 8006016:	6039      	str	r1, [r7, #0]
	(void)pdev;
	HAL_Delay(wait_ms);
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	4618      	mov	r0, r3
 800601c:	f000 f8f2 	bl	8006204 <HAL_Delay>
    return VL53L1_ERROR_NONE;
 8006020:	2300      	movs	r3, #0
}
 8006022:	4618      	mov	r0, r3
 8006024:	3708      	adds	r7, #8
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}
	...

0800602c <VL53L1_WaitUs>:

VL53L1_Error VL53L1_WaitUs(VL53L1_Dev_t *pdev, int32_t wait_us){
 800602c:	b580      	push	{r7, lr}
 800602e:	b082      	sub	sp, #8
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
 8006034:	6039      	str	r1, [r7, #0]
	(void)pdev;
	HAL_Delay(wait_us/1000);
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	4a06      	ldr	r2, [pc, #24]	; (8006054 <VL53L1_WaitUs+0x28>)
 800603a:	fb82 1203 	smull	r1, r2, r2, r3
 800603e:	1192      	asrs	r2, r2, #6
 8006040:	17db      	asrs	r3, r3, #31
 8006042:	1ad3      	subs	r3, r2, r3
 8006044:	4618      	mov	r0, r3
 8006046:	f000 f8dd 	bl	8006204 <HAL_Delay>
    return VL53L1_ERROR_NONE;
 800604a:	2300      	movs	r3, #0
}
 800604c:	4618      	mov	r0, r3
 800604e:	3708      	adds	r7, #8
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}
 8006054:	10624dd3 	.word	0x10624dd3

08006058 <VL53L1_WaitValueMaskEx>:
	uint32_t      timeout_ms,
	uint16_t      index,
	uint8_t       value,
	uint8_t       mask,
	uint32_t      poll_delay_ms)
{
 8006058:	b590      	push	{r4, r7, lr}
 800605a:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
 800605e:	af00      	add	r7, sp, #0
 8006060:	f107 040c 	add.w	r4, r7, #12
 8006064:	6020      	str	r0, [r4, #0]
 8006066:	f107 0008 	add.w	r0, r7, #8
 800606a:	6001      	str	r1, [r0, #0]
 800606c:	4619      	mov	r1, r3
 800606e:	1dbb      	adds	r3, r7, #6
 8006070:	801a      	strh	r2, [r3, #0]
 8006072:	1d7b      	adds	r3, r7, #5
 8006074:	460a      	mov	r2, r1
 8006076:	701a      	strb	r2, [r3, #0]
	 *          value,
	 *          mask,
	 *          poll_delay_ms);
	 */

	VL53L1_Error status         = VL53L1_ERROR_NONE;
 8006078:	2300      	movs	r3, #0
 800607a:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
	uint32_t     start_time_ms = 0;
 800607e:	2300      	movs	r3, #0
 8006080:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
	uint32_t     current_time_ms = 0;
 8006084:	2300      	movs	r3, #0
 8006086:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	uint32_t     polling_time_ms = 0;
 800608a:	2300      	movs	r3, #0
 800608c:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	uint8_t      byte_value      = 0;
 8006090:	2300      	movs	r3, #0
 8006092:	f887 3213 	strb.w	r3, [r7, #531]	; 0x213
	uint8_t      found           = 0;
 8006096:	2300      	movs	r3, #0
 8006098:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
#ifdef PAL_EXTENDED
	VL53L1_get_register_name(
			index,
			register_name);
#else
	VL53L1_COPYSTRING(register_name, "");
 800609c:	f107 0310 	add.w	r3, r7, #16
 80060a0:	f240 12ff 	movw	r2, #511	; 0x1ff
 80060a4:	4935      	ldr	r1, [pc, #212]	; (800617c <VL53L1_WaitValueMaskEx+0x124>)
 80060a6:	4618      	mov	r0, r3
 80060a8:	f006 fb0a 	bl	800c6c0 <strncpy>
    trace_i2c("WaitValueMaskEx(%5d, %s, 0x%02X, 0x%02X, %5d);\n",
    		     timeout_ms, register_name, value, mask, poll_delay_ms);

	/* calculate time limit in absolute time */

	 VL53L1_GetTickCount(&start_time_ms);
 80060ac:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80060b0:	4618      	mov	r0, r3
 80060b2:	f7ff ff9b 	bl	8005fec <VL53L1_GetTickCount>
	VL53L1_set_trace_functions(VL53L1_TRACE_FUNCTION_NONE);
#endif

	/* wait until value is found, timeout reached on error occurred */

	while ((status == VL53L1_ERROR_NONE) &&
 80060b6:	e03f      	b.n	8006138 <VL53L1_WaitValueMaskEx+0xe0>
		   (polling_time_ms < timeout_ms) &&
		   (found == 0)) {

		if (status == VL53L1_ERROR_NONE)
 80060b8:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d10b      	bne.n	80060d8 <VL53L1_WaitValueMaskEx+0x80>
			status = VL53L1_RdByte(
 80060c0:	f207 2213 	addw	r2, r7, #531	; 0x213
 80060c4:	1dbb      	adds	r3, r7, #6
 80060c6:	8819      	ldrh	r1, [r3, #0]
 80060c8:	f107 030c 	add.w	r3, r7, #12
 80060cc:	6818      	ldr	r0, [r3, #0]
 80060ce:	f7ff ff1b 	bl	8005f08 <VL53L1_RdByte>
 80060d2:	4603      	mov	r3, r0
 80060d4:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
							pdev,
							index,
							&byte_value);

		if ((byte_value & mask) == value)
 80060d8:	f897 2213 	ldrb.w	r2, [r7, #531]	; 0x213
 80060dc:	f897 3238 	ldrb.w	r3, [r7, #568]	; 0x238
 80060e0:	4013      	ands	r3, r2
 80060e2:	b2db      	uxtb	r3, r3
 80060e4:	1d7a      	adds	r2, r7, #5
 80060e6:	7812      	ldrb	r2, [r2, #0]
 80060e8:	429a      	cmp	r2, r3
 80060ea:	d102      	bne.n	80060f2 <VL53L1_WaitValueMaskEx+0x9a>
			found = 1;
 80060ec:	2301      	movs	r3, #1
 80060ee:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f

		if (status == VL53L1_ERROR_NONE  &&
 80060f2:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d112      	bne.n	8006120 <VL53L1_WaitValueMaskEx+0xc8>
 80060fa:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d10e      	bne.n	8006120 <VL53L1_WaitValueMaskEx+0xc8>
			found == 0 &&
 8006102:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8006106:	2b00      	cmp	r3, #0
 8006108:	d00a      	beq.n	8006120 <VL53L1_WaitValueMaskEx+0xc8>
			poll_delay_ms > 0)
			status = VL53L1_WaitMs(
 800610a:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 800610e:	f107 030c 	add.w	r3, r7, #12
 8006112:	4611      	mov	r1, r2
 8006114:	6818      	ldr	r0, [r3, #0]
 8006116:	f7ff ff7a 	bl	800600e <VL53L1_WaitMs>
 800611a:	4603      	mov	r3, r0
 800611c:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
					pdev,
					poll_delay_ms);

		/* Update polling time (Compare difference rather than absolute to
		negate 32bit wrap around issue) */
		VL53L1_GetTickCount(&current_time_ms);
 8006120:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8006124:	4618      	mov	r0, r3
 8006126:	f7ff ff61 	bl	8005fec <VL53L1_GetTickCount>
		polling_time_ms = current_time_ms - start_time_ms;
 800612a:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 800612e:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8006132:	1ad3      	subs	r3, r2, r3
 8006134:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
	while ((status == VL53L1_ERROR_NONE) &&
 8006138:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 800613c:	2b00      	cmp	r3, #0
 800613e:	d10a      	bne.n	8006156 <VL53L1_WaitValueMaskEx+0xfe>
 8006140:	f107 0308 	add.w	r3, r7, #8
 8006144:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	429a      	cmp	r2, r3
 800614c:	d203      	bcs.n	8006156 <VL53L1_WaitValueMaskEx+0xfe>
		   (polling_time_ms < timeout_ms) &&
 800614e:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 8006152:	2b00      	cmp	r3, #0
 8006154:	d0b0      	beq.n	80060b8 <VL53L1_WaitValueMaskEx+0x60>
#ifdef VL53L1_LOG_ENABLE
	/* Restore function logging */
	VL53L1_set_trace_functions(trace_functions);
#endif

	if (found == 0 && status == VL53L1_ERROR_NONE)
 8006156:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 800615a:	2b00      	cmp	r3, #0
 800615c:	d106      	bne.n	800616c <VL53L1_WaitValueMaskEx+0x114>
 800615e:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
 8006162:	2b00      	cmp	r3, #0
 8006164:	d102      	bne.n	800616c <VL53L1_WaitValueMaskEx+0x114>
		status = VL53L1_ERROR_TIME_OUT;
 8006166:	23f9      	movs	r3, #249	; 0xf9
 8006168:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227

	return status;
 800616c:	f997 3227 	ldrsb.w	r3, [r7, #551]	; 0x227
}
 8006170:	4618      	mov	r0, r3
 8006172:	f507 770b 	add.w	r7, r7, #556	; 0x22c
 8006176:	46bd      	mov	sp, r7
 8006178:	bd90      	pop	{r4, r7, pc}
 800617a:	bf00      	nop
 800617c:	0800cf34 	.word	0x0800cf34

08006180 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006184:	4a0e      	ldr	r2, [pc, #56]	; (80061c0 <HAL_Init+0x40>)
 8006186:	4b0e      	ldr	r3, [pc, #56]	; (80061c0 <HAL_Init+0x40>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800618e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006190:	4a0b      	ldr	r2, [pc, #44]	; (80061c0 <HAL_Init+0x40>)
 8006192:	4b0b      	ldr	r3, [pc, #44]	; (80061c0 <HAL_Init+0x40>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800619a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800619c:	4a08      	ldr	r2, [pc, #32]	; (80061c0 <HAL_Init+0x40>)
 800619e:	4b08      	ldr	r3, [pc, #32]	; (80061c0 <HAL_Init+0x40>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80061a8:	2003      	movs	r0, #3
 80061aa:	f000 f917 	bl	80063dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80061ae:	2000      	movs	r0, #0
 80061b0:	f006 f8e0 	bl	800c374 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80061b4:	f005 ff7e 	bl	800c0b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80061b8:	2300      	movs	r3, #0
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	bd80      	pop	{r7, pc}
 80061be:	bf00      	nop
 80061c0:	40023c00 	.word	0x40023c00

080061c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80061c4:	b480      	push	{r7}
 80061c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80061c8:	4b06      	ldr	r3, [pc, #24]	; (80061e4 <HAL_IncTick+0x20>)
 80061ca:	781b      	ldrb	r3, [r3, #0]
 80061cc:	461a      	mov	r2, r3
 80061ce:	4b06      	ldr	r3, [pc, #24]	; (80061e8 <HAL_IncTick+0x24>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4413      	add	r3, r2
 80061d4:	4a04      	ldr	r2, [pc, #16]	; (80061e8 <HAL_IncTick+0x24>)
 80061d6:	6013      	str	r3, [r2, #0]
}
 80061d8:	bf00      	nop
 80061da:	46bd      	mov	sp, r7
 80061dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e0:	4770      	bx	lr
 80061e2:	bf00      	nop
 80061e4:	20000020 	.word	0x20000020
 80061e8:	20004618 	.word	0x20004618

080061ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80061ec:	b480      	push	{r7}
 80061ee:	af00      	add	r7, sp, #0
  return uwTick;
 80061f0:	4b03      	ldr	r3, [pc, #12]	; (8006200 <HAL_GetTick+0x14>)
 80061f2:	681b      	ldr	r3, [r3, #0]
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	46bd      	mov	sp, r7
 80061f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fc:	4770      	bx	lr
 80061fe:	bf00      	nop
 8006200:	20004618 	.word	0x20004618

08006204 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b084      	sub	sp, #16
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800620c:	f7ff ffee 	bl	80061ec <HAL_GetTick>
 8006210:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800621c:	d005      	beq.n	800622a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800621e:	4b09      	ldr	r3, [pc, #36]	; (8006244 <HAL_Delay+0x40>)
 8006220:	781b      	ldrb	r3, [r3, #0]
 8006222:	461a      	mov	r2, r3
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	4413      	add	r3, r2
 8006228:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800622a:	bf00      	nop
 800622c:	f7ff ffde 	bl	80061ec <HAL_GetTick>
 8006230:	4602      	mov	r2, r0
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	1ad2      	subs	r2, r2, r3
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	429a      	cmp	r2, r3
 800623a:	d3f7      	bcc.n	800622c <HAL_Delay+0x28>
  {
  }
}
 800623c:	bf00      	nop
 800623e:	3710      	adds	r7, #16
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}
 8006244:	20000020 	.word	0x20000020

08006248 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006248:	b480      	push	{r7}
 800624a:	b085      	sub	sp, #20
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f003 0307 	and.w	r3, r3, #7
 8006256:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006258:	4b0c      	ldr	r3, [pc, #48]	; (800628c <NVIC_SetPriorityGrouping+0x44>)
 800625a:	68db      	ldr	r3, [r3, #12]
 800625c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800625e:	68ba      	ldr	r2, [r7, #8]
 8006260:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006264:	4013      	ands	r3, r2
 8006266:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006270:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006274:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006278:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800627a:	4a04      	ldr	r2, [pc, #16]	; (800628c <NVIC_SetPriorityGrouping+0x44>)
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	60d3      	str	r3, [r2, #12]
}
 8006280:	bf00      	nop
 8006282:	3714      	adds	r7, #20
 8006284:	46bd      	mov	sp, r7
 8006286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628a:	4770      	bx	lr
 800628c:	e000ed00 	.word	0xe000ed00

08006290 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8006290:	b480      	push	{r7}
 8006292:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006294:	4b04      	ldr	r3, [pc, #16]	; (80062a8 <NVIC_GetPriorityGrouping+0x18>)
 8006296:	68db      	ldr	r3, [r3, #12]
 8006298:	0a1b      	lsrs	r3, r3, #8
 800629a:	f003 0307 	and.w	r3, r3, #7
}
 800629e:	4618      	mov	r0, r3
 80062a0:	46bd      	mov	sp, r7
 80062a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a6:	4770      	bx	lr
 80062a8:	e000ed00 	.word	0xe000ed00

080062ac <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b083      	sub	sp, #12
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	4603      	mov	r3, r0
 80062b4:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80062b6:	4909      	ldr	r1, [pc, #36]	; (80062dc <NVIC_EnableIRQ+0x30>)
 80062b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062bc:	095b      	lsrs	r3, r3, #5
 80062be:	79fa      	ldrb	r2, [r7, #7]
 80062c0:	f002 021f 	and.w	r2, r2, #31
 80062c4:	2001      	movs	r0, #1
 80062c6:	fa00 f202 	lsl.w	r2, r0, r2
 80062ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80062ce:	bf00      	nop
 80062d0:	370c      	adds	r7, #12
 80062d2:	46bd      	mov	sp, r7
 80062d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d8:	4770      	bx	lr
 80062da:	bf00      	nop
 80062dc:	e000e100 	.word	0xe000e100

080062e0 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b083      	sub	sp, #12
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	4603      	mov	r3, r0
 80062e8:	6039      	str	r1, [r7, #0]
 80062ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80062ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	da0b      	bge.n	800630c <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80062f4:	490d      	ldr	r1, [pc, #52]	; (800632c <NVIC_SetPriority+0x4c>)
 80062f6:	79fb      	ldrb	r3, [r7, #7]
 80062f8:	f003 030f 	and.w	r3, r3, #15
 80062fc:	3b04      	subs	r3, #4
 80062fe:	683a      	ldr	r2, [r7, #0]
 8006300:	b2d2      	uxtb	r2, r2
 8006302:	0112      	lsls	r2, r2, #4
 8006304:	b2d2      	uxtb	r2, r2
 8006306:	440b      	add	r3, r1
 8006308:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800630a:	e009      	b.n	8006320 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800630c:	4908      	ldr	r1, [pc, #32]	; (8006330 <NVIC_SetPriority+0x50>)
 800630e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006312:	683a      	ldr	r2, [r7, #0]
 8006314:	b2d2      	uxtb	r2, r2
 8006316:	0112      	lsls	r2, r2, #4
 8006318:	b2d2      	uxtb	r2, r2
 800631a:	440b      	add	r3, r1
 800631c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006320:	bf00      	nop
 8006322:	370c      	adds	r7, #12
 8006324:	46bd      	mov	sp, r7
 8006326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632a:	4770      	bx	lr
 800632c:	e000ed00 	.word	0xe000ed00
 8006330:	e000e100 	.word	0xe000e100

08006334 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006334:	b480      	push	{r7}
 8006336:	b089      	sub	sp, #36	; 0x24
 8006338:	af00      	add	r7, sp, #0
 800633a:	60f8      	str	r0, [r7, #12]
 800633c:	60b9      	str	r1, [r7, #8]
 800633e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	f003 0307 	and.w	r3, r3, #7
 8006346:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006348:	69fb      	ldr	r3, [r7, #28]
 800634a:	f1c3 0307 	rsb	r3, r3, #7
 800634e:	2b04      	cmp	r3, #4
 8006350:	bf28      	it	cs
 8006352:	2304      	movcs	r3, #4
 8006354:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006356:	69fb      	ldr	r3, [r7, #28]
 8006358:	3304      	adds	r3, #4
 800635a:	2b06      	cmp	r3, #6
 800635c:	d902      	bls.n	8006364 <NVIC_EncodePriority+0x30>
 800635e:	69fb      	ldr	r3, [r7, #28]
 8006360:	3b03      	subs	r3, #3
 8006362:	e000      	b.n	8006366 <NVIC_EncodePriority+0x32>
 8006364:	2300      	movs	r3, #0
 8006366:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006368:	2201      	movs	r2, #1
 800636a:	69bb      	ldr	r3, [r7, #24]
 800636c:	fa02 f303 	lsl.w	r3, r2, r3
 8006370:	1e5a      	subs	r2, r3, #1
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	401a      	ands	r2, r3
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800637a:	2101      	movs	r1, #1
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	fa01 f303 	lsl.w	r3, r1, r3
 8006382:	1e59      	subs	r1, r3, #1
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006388:	4313      	orrs	r3, r2
         );
}
 800638a:	4618      	mov	r0, r3
 800638c:	3724      	adds	r7, #36	; 0x24
 800638e:	46bd      	mov	sp, r7
 8006390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006394:	4770      	bx	lr
	...

08006398 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b082      	sub	sp, #8
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	3b01      	subs	r3, #1
 80063a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80063a8:	d301      	bcc.n	80063ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80063aa:	2301      	movs	r3, #1
 80063ac:	e00f      	b.n	80063ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80063ae:	4a0a      	ldr	r2, [pc, #40]	; (80063d8 <SysTick_Config+0x40>)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	3b01      	subs	r3, #1
 80063b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80063b6:	210f      	movs	r1, #15
 80063b8:	f04f 30ff 	mov.w	r0, #4294967295
 80063bc:	f7ff ff90 	bl	80062e0 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80063c0:	4b05      	ldr	r3, [pc, #20]	; (80063d8 <SysTick_Config+0x40>)
 80063c2:	2200      	movs	r2, #0
 80063c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80063c6:	4b04      	ldr	r3, [pc, #16]	; (80063d8 <SysTick_Config+0x40>)
 80063c8:	2207      	movs	r2, #7
 80063ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80063cc:	2300      	movs	r3, #0
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	3708      	adds	r7, #8
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}
 80063d6:	bf00      	nop
 80063d8:	e000e010 	.word	0xe000e010

080063dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b082      	sub	sp, #8
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f7ff ff2f 	bl	8006248 <NVIC_SetPriorityGrouping>
}
 80063ea:	bf00      	nop
 80063ec:	3708      	adds	r7, #8
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}

080063f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80063f2:	b580      	push	{r7, lr}
 80063f4:	b086      	sub	sp, #24
 80063f6:	af00      	add	r7, sp, #0
 80063f8:	4603      	mov	r3, r0
 80063fa:	60b9      	str	r1, [r7, #8]
 80063fc:	607a      	str	r2, [r7, #4]
 80063fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006400:	2300      	movs	r3, #0
 8006402:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006404:	f7ff ff44 	bl	8006290 <NVIC_GetPriorityGrouping>
 8006408:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800640a:	687a      	ldr	r2, [r7, #4]
 800640c:	68b9      	ldr	r1, [r7, #8]
 800640e:	6978      	ldr	r0, [r7, #20]
 8006410:	f7ff ff90 	bl	8006334 <NVIC_EncodePriority>
 8006414:	4602      	mov	r2, r0
 8006416:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800641a:	4611      	mov	r1, r2
 800641c:	4618      	mov	r0, r3
 800641e:	f7ff ff5f 	bl	80062e0 <NVIC_SetPriority>
}
 8006422:	bf00      	nop
 8006424:	3718      	adds	r7, #24
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}

0800642a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800642a:	b580      	push	{r7, lr}
 800642c:	b082      	sub	sp, #8
 800642e:	af00      	add	r7, sp, #0
 8006430:	4603      	mov	r3, r0
 8006432:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006434:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006438:	4618      	mov	r0, r3
 800643a:	f7ff ff37 	bl	80062ac <NVIC_EnableIRQ>
}
 800643e:	bf00      	nop
 8006440:	3708      	adds	r7, #8
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}

08006446 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006446:	b580      	push	{r7, lr}
 8006448:	b082      	sub	sp, #8
 800644a:	af00      	add	r7, sp, #0
 800644c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f7ff ffa2 	bl	8006398 <SysTick_Config>
 8006454:	4603      	mov	r3, r0
}
 8006456:	4618      	mov	r0, r3
 8006458:	3708      	adds	r7, #8
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}
	...

08006460 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8006460:	b480      	push	{r7}
 8006462:	b083      	sub	sp, #12
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2b04      	cmp	r3, #4
 800646c:	d106      	bne.n	800647c <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800646e:	4a09      	ldr	r2, [pc, #36]	; (8006494 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8006470:	4b08      	ldr	r3, [pc, #32]	; (8006494 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f043 0304 	orr.w	r3, r3, #4
 8006478:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 800647a:	e005      	b.n	8006488 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800647c:	4a05      	ldr	r2, [pc, #20]	; (8006494 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800647e:	4b05      	ldr	r3, [pc, #20]	; (8006494 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f023 0304 	bic.w	r3, r3, #4
 8006486:	6013      	str	r3, [r2, #0]
}
 8006488:	bf00      	nop
 800648a:	370c      	adds	r7, #12
 800648c:	46bd      	mov	sp, r7
 800648e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006492:	4770      	bx	lr
 8006494:	e000e010 	.word	0xe000e010

08006498 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006498:	b480      	push	{r7}
 800649a:	b089      	sub	sp, #36	; 0x24
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
 80064a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80064a2:	2300      	movs	r3, #0
 80064a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80064a6:	2300      	movs	r3, #0
 80064a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80064aa:	2300      	movs	r3, #0
 80064ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80064ae:	2300      	movs	r3, #0
 80064b0:	61fb      	str	r3, [r7, #28]
 80064b2:	e159      	b.n	8006768 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80064b4:	2201      	movs	r2, #1
 80064b6:	69fb      	ldr	r3, [r7, #28]
 80064b8:	fa02 f303 	lsl.w	r3, r2, r3
 80064bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	681a      	ldr	r2, [r3, #0]
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	4013      	ands	r3, r2
 80064c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80064c8:	693a      	ldr	r2, [r7, #16]
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	429a      	cmp	r2, r3
 80064ce:	f040 8148 	bne.w	8006762 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	685b      	ldr	r3, [r3, #4]
 80064d6:	2b02      	cmp	r3, #2
 80064d8:	d003      	beq.n	80064e2 <HAL_GPIO_Init+0x4a>
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	2b12      	cmp	r3, #18
 80064e0:	d123      	bne.n	800652a <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80064e2:	69fb      	ldr	r3, [r7, #28]
 80064e4:	08da      	lsrs	r2, r3, #3
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	3208      	adds	r2, #8
 80064ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80064f0:	69fb      	ldr	r3, [r7, #28]
 80064f2:	f003 0307 	and.w	r3, r3, #7
 80064f6:	009b      	lsls	r3, r3, #2
 80064f8:	220f      	movs	r2, #15
 80064fa:	fa02 f303 	lsl.w	r3, r2, r3
 80064fe:	43db      	mvns	r3, r3
 8006500:	69ba      	ldr	r2, [r7, #24]
 8006502:	4013      	ands	r3, r2
 8006504:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	691a      	ldr	r2, [r3, #16]
 800650a:	69fb      	ldr	r3, [r7, #28]
 800650c:	f003 0307 	and.w	r3, r3, #7
 8006510:	009b      	lsls	r3, r3, #2
 8006512:	fa02 f303 	lsl.w	r3, r2, r3
 8006516:	69ba      	ldr	r2, [r7, #24]
 8006518:	4313      	orrs	r3, r2
 800651a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800651c:	69fb      	ldr	r3, [r7, #28]
 800651e:	08da      	lsrs	r2, r3, #3
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	3208      	adds	r2, #8
 8006524:	69b9      	ldr	r1, [r7, #24]
 8006526:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006530:	69fb      	ldr	r3, [r7, #28]
 8006532:	005b      	lsls	r3, r3, #1
 8006534:	2203      	movs	r2, #3
 8006536:	fa02 f303 	lsl.w	r3, r2, r3
 800653a:	43db      	mvns	r3, r3
 800653c:	69ba      	ldr	r2, [r7, #24]
 800653e:	4013      	ands	r3, r2
 8006540:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	685b      	ldr	r3, [r3, #4]
 8006546:	f003 0203 	and.w	r2, r3, #3
 800654a:	69fb      	ldr	r3, [r7, #28]
 800654c:	005b      	lsls	r3, r3, #1
 800654e:	fa02 f303 	lsl.w	r3, r2, r3
 8006552:	69ba      	ldr	r2, [r7, #24]
 8006554:	4313      	orrs	r3, r2
 8006556:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	69ba      	ldr	r2, [r7, #24]
 800655c:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	2b01      	cmp	r3, #1
 8006564:	d00b      	beq.n	800657e <HAL_GPIO_Init+0xe6>
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	685b      	ldr	r3, [r3, #4]
 800656a:	2b02      	cmp	r3, #2
 800656c:	d007      	beq.n	800657e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006572:	2b11      	cmp	r3, #17
 8006574:	d003      	beq.n	800657e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	2b12      	cmp	r3, #18
 800657c:	d130      	bne.n	80065e0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	689b      	ldr	r3, [r3, #8]
 8006582:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006584:	69fb      	ldr	r3, [r7, #28]
 8006586:	005b      	lsls	r3, r3, #1
 8006588:	2203      	movs	r2, #3
 800658a:	fa02 f303 	lsl.w	r3, r2, r3
 800658e:	43db      	mvns	r3, r3
 8006590:	69ba      	ldr	r2, [r7, #24]
 8006592:	4013      	ands	r3, r2
 8006594:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	68da      	ldr	r2, [r3, #12]
 800659a:	69fb      	ldr	r3, [r7, #28]
 800659c:	005b      	lsls	r3, r3, #1
 800659e:	fa02 f303 	lsl.w	r3, r2, r3
 80065a2:	69ba      	ldr	r2, [r7, #24]
 80065a4:	4313      	orrs	r3, r2
 80065a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	69ba      	ldr	r2, [r7, #24]
 80065ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80065b4:	2201      	movs	r2, #1
 80065b6:	69fb      	ldr	r3, [r7, #28]
 80065b8:	fa02 f303 	lsl.w	r3, r2, r3
 80065bc:	43db      	mvns	r3, r3
 80065be:	69ba      	ldr	r2, [r7, #24]
 80065c0:	4013      	ands	r3, r2
 80065c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	685b      	ldr	r3, [r3, #4]
 80065c8:	091b      	lsrs	r3, r3, #4
 80065ca:	f003 0201 	and.w	r2, r3, #1
 80065ce:	69fb      	ldr	r3, [r7, #28]
 80065d0:	fa02 f303 	lsl.w	r3, r2, r3
 80065d4:	69ba      	ldr	r2, [r7, #24]
 80065d6:	4313      	orrs	r3, r2
 80065d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	69ba      	ldr	r2, [r7, #24]
 80065de:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	68db      	ldr	r3, [r3, #12]
 80065e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80065e6:	69fb      	ldr	r3, [r7, #28]
 80065e8:	005b      	lsls	r3, r3, #1
 80065ea:	2203      	movs	r2, #3
 80065ec:	fa02 f303 	lsl.w	r3, r2, r3
 80065f0:	43db      	mvns	r3, r3
 80065f2:	69ba      	ldr	r2, [r7, #24]
 80065f4:	4013      	ands	r3, r2
 80065f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	689a      	ldr	r2, [r3, #8]
 80065fc:	69fb      	ldr	r3, [r7, #28]
 80065fe:	005b      	lsls	r3, r3, #1
 8006600:	fa02 f303 	lsl.w	r3, r2, r3
 8006604:	69ba      	ldr	r2, [r7, #24]
 8006606:	4313      	orrs	r3, r2
 8006608:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	69ba      	ldr	r2, [r7, #24]
 800660e:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006618:	2b00      	cmp	r3, #0
 800661a:	f000 80a2 	beq.w	8006762 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800661e:	2300      	movs	r3, #0
 8006620:	60fb      	str	r3, [r7, #12]
 8006622:	4a56      	ldr	r2, [pc, #344]	; (800677c <HAL_GPIO_Init+0x2e4>)
 8006624:	4b55      	ldr	r3, [pc, #340]	; (800677c <HAL_GPIO_Init+0x2e4>)
 8006626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006628:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800662c:	6453      	str	r3, [r2, #68]	; 0x44
 800662e:	4b53      	ldr	r3, [pc, #332]	; (800677c <HAL_GPIO_Init+0x2e4>)
 8006630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006632:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006636:	60fb      	str	r3, [r7, #12]
 8006638:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800663a:	4a51      	ldr	r2, [pc, #324]	; (8006780 <HAL_GPIO_Init+0x2e8>)
 800663c:	69fb      	ldr	r3, [r7, #28]
 800663e:	089b      	lsrs	r3, r3, #2
 8006640:	3302      	adds	r3, #2
 8006642:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006646:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006648:	69fb      	ldr	r3, [r7, #28]
 800664a:	f003 0303 	and.w	r3, r3, #3
 800664e:	009b      	lsls	r3, r3, #2
 8006650:	220f      	movs	r2, #15
 8006652:	fa02 f303 	lsl.w	r3, r2, r3
 8006656:	43db      	mvns	r3, r3
 8006658:	69ba      	ldr	r2, [r7, #24]
 800665a:	4013      	ands	r3, r2
 800665c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	4a48      	ldr	r2, [pc, #288]	; (8006784 <HAL_GPIO_Init+0x2ec>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d019      	beq.n	800669a <HAL_GPIO_Init+0x202>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	4a47      	ldr	r2, [pc, #284]	; (8006788 <HAL_GPIO_Init+0x2f0>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d013      	beq.n	8006696 <HAL_GPIO_Init+0x1fe>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	4a46      	ldr	r2, [pc, #280]	; (800678c <HAL_GPIO_Init+0x2f4>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d00d      	beq.n	8006692 <HAL_GPIO_Init+0x1fa>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	4a45      	ldr	r2, [pc, #276]	; (8006790 <HAL_GPIO_Init+0x2f8>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d007      	beq.n	800668e <HAL_GPIO_Init+0x1f6>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	4a44      	ldr	r2, [pc, #272]	; (8006794 <HAL_GPIO_Init+0x2fc>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d101      	bne.n	800668a <HAL_GPIO_Init+0x1f2>
 8006686:	2304      	movs	r3, #4
 8006688:	e008      	b.n	800669c <HAL_GPIO_Init+0x204>
 800668a:	2307      	movs	r3, #7
 800668c:	e006      	b.n	800669c <HAL_GPIO_Init+0x204>
 800668e:	2303      	movs	r3, #3
 8006690:	e004      	b.n	800669c <HAL_GPIO_Init+0x204>
 8006692:	2302      	movs	r3, #2
 8006694:	e002      	b.n	800669c <HAL_GPIO_Init+0x204>
 8006696:	2301      	movs	r3, #1
 8006698:	e000      	b.n	800669c <HAL_GPIO_Init+0x204>
 800669a:	2300      	movs	r3, #0
 800669c:	69fa      	ldr	r2, [r7, #28]
 800669e:	f002 0203 	and.w	r2, r2, #3
 80066a2:	0092      	lsls	r2, r2, #2
 80066a4:	4093      	lsls	r3, r2
 80066a6:	69ba      	ldr	r2, [r7, #24]
 80066a8:	4313      	orrs	r3, r2
 80066aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80066ac:	4934      	ldr	r1, [pc, #208]	; (8006780 <HAL_GPIO_Init+0x2e8>)
 80066ae:	69fb      	ldr	r3, [r7, #28]
 80066b0:	089b      	lsrs	r3, r3, #2
 80066b2:	3302      	adds	r3, #2
 80066b4:	69ba      	ldr	r2, [r7, #24]
 80066b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80066ba:	4b37      	ldr	r3, [pc, #220]	; (8006798 <HAL_GPIO_Init+0x300>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	43db      	mvns	r3, r3
 80066c4:	69ba      	ldr	r2, [r7, #24]
 80066c6:	4013      	ands	r3, r2
 80066c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d003      	beq.n	80066de <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80066d6:	69ba      	ldr	r2, [r7, #24]
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	4313      	orrs	r3, r2
 80066dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80066de:	4a2e      	ldr	r2, [pc, #184]	; (8006798 <HAL_GPIO_Init+0x300>)
 80066e0:	69bb      	ldr	r3, [r7, #24]
 80066e2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80066e4:	4b2c      	ldr	r3, [pc, #176]	; (8006798 <HAL_GPIO_Init+0x300>)
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	43db      	mvns	r3, r3
 80066ee:	69ba      	ldr	r2, [r7, #24]
 80066f0:	4013      	ands	r3, r2
 80066f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d003      	beq.n	8006708 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8006700:	69ba      	ldr	r2, [r7, #24]
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	4313      	orrs	r3, r2
 8006706:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006708:	4a23      	ldr	r2, [pc, #140]	; (8006798 <HAL_GPIO_Init+0x300>)
 800670a:	69bb      	ldr	r3, [r7, #24]
 800670c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800670e:	4b22      	ldr	r3, [pc, #136]	; (8006798 <HAL_GPIO_Init+0x300>)
 8006710:	689b      	ldr	r3, [r3, #8]
 8006712:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	43db      	mvns	r3, r3
 8006718:	69ba      	ldr	r2, [r7, #24]
 800671a:	4013      	ands	r3, r2
 800671c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006726:	2b00      	cmp	r3, #0
 8006728:	d003      	beq.n	8006732 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800672a:	69ba      	ldr	r2, [r7, #24]
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	4313      	orrs	r3, r2
 8006730:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006732:	4a19      	ldr	r2, [pc, #100]	; (8006798 <HAL_GPIO_Init+0x300>)
 8006734:	69bb      	ldr	r3, [r7, #24]
 8006736:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006738:	4b17      	ldr	r3, [pc, #92]	; (8006798 <HAL_GPIO_Init+0x300>)
 800673a:	68db      	ldr	r3, [r3, #12]
 800673c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	43db      	mvns	r3, r3
 8006742:	69ba      	ldr	r2, [r7, #24]
 8006744:	4013      	ands	r3, r2
 8006746:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006750:	2b00      	cmp	r3, #0
 8006752:	d003      	beq.n	800675c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8006754:	69ba      	ldr	r2, [r7, #24]
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	4313      	orrs	r3, r2
 800675a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800675c:	4a0e      	ldr	r2, [pc, #56]	; (8006798 <HAL_GPIO_Init+0x300>)
 800675e:	69bb      	ldr	r3, [r7, #24]
 8006760:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006762:	69fb      	ldr	r3, [r7, #28]
 8006764:	3301      	adds	r3, #1
 8006766:	61fb      	str	r3, [r7, #28]
 8006768:	69fb      	ldr	r3, [r7, #28]
 800676a:	2b0f      	cmp	r3, #15
 800676c:	f67f aea2 	bls.w	80064b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006770:	bf00      	nop
 8006772:	3724      	adds	r7, #36	; 0x24
 8006774:	46bd      	mov	sp, r7
 8006776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677a:	4770      	bx	lr
 800677c:	40023800 	.word	0x40023800
 8006780:	40013800 	.word	0x40013800
 8006784:	40020000 	.word	0x40020000
 8006788:	40020400 	.word	0x40020400
 800678c:	40020800 	.word	0x40020800
 8006790:	40020c00 	.word	0x40020c00
 8006794:	40021000 	.word	0x40021000
 8006798:	40013c00 	.word	0x40013c00

0800679c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800679c:	b480      	push	{r7}
 800679e:	b083      	sub	sp, #12
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
 80067a4:	460b      	mov	r3, r1
 80067a6:	807b      	strh	r3, [r7, #2]
 80067a8:	4613      	mov	r3, r2
 80067aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80067ac:	787b      	ldrb	r3, [r7, #1]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d003      	beq.n	80067ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80067b2:	887a      	ldrh	r2, [r7, #2]
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80067b8:	e003      	b.n	80067c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80067ba:	887b      	ldrh	r3, [r7, #2]
 80067bc:	041a      	lsls	r2, r3, #16
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	619a      	str	r2, [r3, #24]
}
 80067c2:	bf00      	nop
 80067c4:	370c      	adds	r7, #12
 80067c6:	46bd      	mov	sp, r7
 80067c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067cc:	4770      	bx	lr
	...

080067d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b082      	sub	sp, #8
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	4603      	mov	r3, r0
 80067d8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80067da:	4b08      	ldr	r3, [pc, #32]	; (80067fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80067dc:	695a      	ldr	r2, [r3, #20]
 80067de:	88fb      	ldrh	r3, [r7, #6]
 80067e0:	4013      	ands	r3, r2
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d006      	beq.n	80067f4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80067e6:	4a05      	ldr	r2, [pc, #20]	; (80067fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80067e8:	88fb      	ldrh	r3, [r7, #6]
 80067ea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80067ec:	88fb      	ldrh	r3, [r7, #6]
 80067ee:	4618      	mov	r0, r3
 80067f0:	f000 f806 	bl	8006800 <HAL_GPIO_EXTI_Callback>
  }
}
 80067f4:	bf00      	nop
 80067f6:	3708      	adds	r7, #8
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}
 80067fc:	40013c00 	.word	0x40013c00

08006800 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006800:	b480      	push	{r7}
 8006802:	b083      	sub	sp, #12
 8006804:	af00      	add	r7, sp, #0
 8006806:	4603      	mov	r3, r0
 8006808:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800680a:	bf00      	nop
 800680c:	370c      	adds	r7, #12
 800680e:	46bd      	mov	sp, r7
 8006810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006814:	4770      	bx	lr
	...

08006818 <HAL_I2C_Init>:
  * @param  hi2c pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b084      	sub	sp, #16
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange = 0U;
 8006820:	2300      	movs	r3, #0
 8006822:	60fb      	str	r3, [r7, #12]
  uint32_t pclk1 = 0U;
 8006824:	2300      	movs	r3, #0
 8006826:	60bb      	str	r3, [r7, #8]

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d101      	bne.n	8006832 <HAL_I2C_Init+0x1a>
  {
    return HAL_ERROR;
 800682e:	2301      	movs	r3, #1
 8006830:	e0c8      	b.n	80069c4 <HAL_I2C_Init+0x1ac>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006838:	b2db      	uxtb	r3, r3
 800683a:	2b00      	cmp	r3, #0
 800683c:	d106      	bne.n	800684c <HAL_I2C_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2200      	movs	r2, #0
 8006842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f005 fc86 	bl	800c158 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2224      	movs	r2, #36	; 0x24
 8006850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	687a      	ldr	r2, [r7, #4]
 800685a:	6812      	ldr	r2, [r2, #0]
 800685c:	6812      	ldr	r2, [r2, #0]
 800685e:	f022 0201 	bic.w	r2, r2, #1
 8006862:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006864:	f001 faf6 	bl	8007e54 <HAL_RCC_GetPCLK1Freq>
 8006868:	60b8      	str	r0, [r7, #8]

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	4a57      	ldr	r2, [pc, #348]	; (80069cc <HAL_I2C_Init+0x1b4>)
 800686e:	fba2 2303 	umull	r2, r3, r2, r3
 8006872:	0c9b      	lsrs	r3, r3, #18
 8006874:	60fb      	str	r3, [r7, #12]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	68fa      	ldr	r2, [r7, #12]
 800687c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681a      	ldr	r2, [r3, #0]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	4952      	ldr	r1, [pc, #328]	; (80069d0 <HAL_I2C_Init+0x1b8>)
 8006888:	428b      	cmp	r3, r1
 800688a:	d802      	bhi.n	8006892 <HAL_I2C_Init+0x7a>
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	3301      	adds	r3, #1
 8006890:	e009      	b.n	80068a6 <HAL_I2C_Init+0x8e>
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8006898:	fb01 f303 	mul.w	r3, r1, r3
 800689c:	494d      	ldr	r1, [pc, #308]	; (80069d4 <HAL_I2C_Init+0x1bc>)
 800689e:	fba1 1303 	umull	r1, r3, r1, r3
 80068a2:	099b      	lsrs	r3, r3, #6
 80068a4:	3301      	adds	r3, #1
 80068a6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6819      	ldr	r1, [r3, #0]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	685b      	ldr	r3, [r3, #4]
 80068b0:	4a47      	ldr	r2, [pc, #284]	; (80069d0 <HAL_I2C_Init+0x1b8>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d812      	bhi.n	80068dc <HAL_I2C_Init+0xc4>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	685b      	ldr	r3, [r3, #4]
 80068ba:	005b      	lsls	r3, r3, #1
 80068bc:	68ba      	ldr	r2, [r7, #8]
 80068be:	fbb2 f3f3 	udiv	r3, r2, r3
 80068c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80068c6:	2b03      	cmp	r3, #3
 80068c8:	d906      	bls.n	80068d8 <HAL_I2C_Init+0xc0>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	005b      	lsls	r3, r3, #1
 80068d0:	68ba      	ldr	r2, [r7, #8]
 80068d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80068d6:	e045      	b.n	8006964 <HAL_I2C_Init+0x14c>
 80068d8:	2304      	movs	r3, #4
 80068da:	e043      	b.n	8006964 <HAL_I2C_Init+0x14c>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	689b      	ldr	r3, [r3, #8]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d10f      	bne.n	8006904 <HAL_I2C_Init+0xec>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	685a      	ldr	r2, [r3, #4]
 80068e8:	4613      	mov	r3, r2
 80068ea:	005b      	lsls	r3, r3, #1
 80068ec:	4413      	add	r3, r2
 80068ee:	68ba      	ldr	r2, [r7, #8]
 80068f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80068f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	bf0c      	ite	eq
 80068fc:	2301      	moveq	r3, #1
 80068fe:	2300      	movne	r3, #0
 8006900:	b2db      	uxtb	r3, r3
 8006902:	e010      	b.n	8006926 <HAL_I2C_Init+0x10e>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	685a      	ldr	r2, [r3, #4]
 8006908:	4613      	mov	r3, r2
 800690a:	009b      	lsls	r3, r3, #2
 800690c:	4413      	add	r3, r2
 800690e:	009a      	lsls	r2, r3, #2
 8006910:	4413      	add	r3, r2
 8006912:	68ba      	ldr	r2, [r7, #8]
 8006914:	fbb2 f3f3 	udiv	r3, r2, r3
 8006918:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800691c:	2b00      	cmp	r3, #0
 800691e:	bf0c      	ite	eq
 8006920:	2301      	moveq	r3, #1
 8006922:	2300      	movne	r3, #0
 8006924:	b2db      	uxtb	r3, r3
 8006926:	2b00      	cmp	r3, #0
 8006928:	d001      	beq.n	800692e <HAL_I2C_Init+0x116>
 800692a:	2301      	movs	r3, #1
 800692c:	e01a      	b.n	8006964 <HAL_I2C_Init+0x14c>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	689b      	ldr	r3, [r3, #8]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d10a      	bne.n	800694c <HAL_I2C_Init+0x134>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	685a      	ldr	r2, [r3, #4]
 800693a:	4613      	mov	r3, r2
 800693c:	005b      	lsls	r3, r3, #1
 800693e:	4413      	add	r3, r2
 8006940:	68ba      	ldr	r2, [r7, #8]
 8006942:	fbb2 f3f3 	udiv	r3, r2, r3
 8006946:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800694a:	e00b      	b.n	8006964 <HAL_I2C_Init+0x14c>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	685a      	ldr	r2, [r3, #4]
 8006950:	4613      	mov	r3, r2
 8006952:	009b      	lsls	r3, r3, #2
 8006954:	4413      	add	r3, r2
 8006956:	009a      	lsls	r2, r3, #2
 8006958:	4413      	add	r3, r2
 800695a:	68ba      	ldr	r2, [r7, #8]
 800695c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006960:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006964:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	687a      	ldr	r2, [r7, #4]
 800696c:	69d1      	ldr	r1, [r2, #28]
 800696e:	687a      	ldr	r2, [r7, #4]
 8006970:	6a12      	ldr	r2, [r2, #32]
 8006972:	430a      	orrs	r2, r1
 8006974:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	687a      	ldr	r2, [r7, #4]
 800697c:	6911      	ldr	r1, [r2, #16]
 800697e:	687a      	ldr	r2, [r7, #4]
 8006980:	68d2      	ldr	r2, [r2, #12]
 8006982:	430a      	orrs	r2, r1
 8006984:	609a      	str	r2, [r3, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	687a      	ldr	r2, [r7, #4]
 800698c:	6951      	ldr	r1, [r2, #20]
 800698e:	687a      	ldr	r2, [r7, #4]
 8006990:	6992      	ldr	r2, [r2, #24]
 8006992:	430a      	orrs	r2, r1
 8006994:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	687a      	ldr	r2, [r7, #4]
 800699c:	6812      	ldr	r2, [r2, #0]
 800699e:	6812      	ldr	r2, [r2, #0]
 80069a0:	f042 0201 	orr.w	r2, r2, #1
 80069a4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2200      	movs	r2, #0
 80069aa:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2220      	movs	r2, #32
 80069b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2200      	movs	r2, #0
 80069b8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2200      	movs	r2, #0
 80069be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80069c2:	2300      	movs	r3, #0
}
 80069c4:	4618      	mov	r0, r3
 80069c6:	3710      	adds	r7, #16
 80069c8:	46bd      	mov	sp, r7
 80069ca:	bd80      	pop	{r7, pc}
 80069cc:	431bde83 	.word	0x431bde83
 80069d0:	000186a0 	.word	0x000186a0
 80069d4:	10624dd3 	.word	0x10624dd3

080069d8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b088      	sub	sp, #32
 80069dc:	af02      	add	r7, sp, #8
 80069de:	60f8      	str	r0, [r7, #12]
 80069e0:	607a      	str	r2, [r7, #4]
 80069e2:	461a      	mov	r2, r3
 80069e4:	460b      	mov	r3, r1
 80069e6:	817b      	strh	r3, [r7, #10]
 80069e8:	4613      	mov	r3, r2
 80069ea:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0x00U;
 80069ec:	2300      	movs	r3, #0
 80069ee:	617b      	str	r3, [r7, #20]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80069f0:	f7ff fbfc 	bl	80061ec <HAL_GetTick>
 80069f4:	6178      	str	r0, [r7, #20]

  if(hi2c->State == HAL_I2C_STATE_READY)
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069fc:	b2db      	uxtb	r3, r3
 80069fe:	2b20      	cmp	r3, #32
 8006a00:	f040 80ee 	bne.w	8006be0 <HAL_I2C_Master_Transmit+0x208>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006a04:	697b      	ldr	r3, [r7, #20]
 8006a06:	9300      	str	r3, [sp, #0]
 8006a08:	2319      	movs	r3, #25
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	4977      	ldr	r1, [pc, #476]	; (8006bec <HAL_I2C_Master_Transmit+0x214>)
 8006a0e:	68f8      	ldr	r0, [r7, #12]
 8006a10:	f000 fc6c 	bl	80072ec <I2C_WaitOnFlagUntilTimeout>
 8006a14:	4603      	mov	r3, r0
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d001      	beq.n	8006a1e <HAL_I2C_Master_Transmit+0x46>
    {
      return HAL_BUSY;
 8006a1a:	2302      	movs	r3, #2
 8006a1c:	e0e1      	b.n	8006be2 <HAL_I2C_Master_Transmit+0x20a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a24:	2b01      	cmp	r3, #1
 8006a26:	d101      	bne.n	8006a2c <HAL_I2C_Master_Transmit+0x54>
 8006a28:	2302      	movs	r3, #2
 8006a2a:	e0da      	b.n	8006be2 <HAL_I2C_Master_Transmit+0x20a>
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	2201      	movs	r2, #1
 8006a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f003 0301 	and.w	r3, r3, #1
 8006a3e:	2b01      	cmp	r3, #1
 8006a40:	d007      	beq.n	8006a52 <HAL_I2C_Master_Transmit+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	68fa      	ldr	r2, [r7, #12]
 8006a48:	6812      	ldr	r2, [r2, #0]
 8006a4a:	6812      	ldr	r2, [r2, #0]
 8006a4c:	f042 0201 	orr.w	r2, r2, #1
 8006a50:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	68fa      	ldr	r2, [r7, #12]
 8006a58:	6812      	ldr	r2, [r2, #0]
 8006a5a:	6812      	ldr	r2, [r2, #0]
 8006a5c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006a60:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	2221      	movs	r2, #33	; 0x21
 8006a66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	2210      	movs	r2, #16
 8006a6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2200      	movs	r2, #0
 8006a76:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	687a      	ldr	r2, [r7, #4]
 8006a7c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	893a      	ldrh	r2, [r7, #8]
 8006a82:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	4a5a      	ldr	r2, [pc, #360]	; (8006bf0 <HAL_I2C_Master_Transmit+0x218>)
 8006a88:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a8e:	b29a      	uxth	r2, r3
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Send Slave Address */
    if(I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006a94:	8979      	ldrh	r1, [r7, #10]
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	6a3a      	ldr	r2, [r7, #32]
 8006a9a:	68f8      	ldr	r0, [r7, #12]
 8006a9c:	f000 fadc 	bl	8007058 <I2C_MasterRequestWrite>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d00f      	beq.n	8006ac6 <HAL_I2C_Master_Transmit+0xee>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aaa:	2b04      	cmp	r3, #4
 8006aac:	d105      	bne.n	8006aba <HAL_I2C_Master_Transmit+0xe2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	e093      	b.n	8006be2 <HAL_I2C_Master_Transmit+0x20a>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	2200      	movs	r2, #0
 8006abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 8006ac2:	2303      	movs	r3, #3
 8006ac4:	e08d      	b.n	8006be2 <HAL_I2C_Master_Transmit+0x20a>
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	613b      	str	r3, [r7, #16]
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	695b      	ldr	r3, [r3, #20]
 8006ad0:	613b      	str	r3, [r7, #16]
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	699b      	ldr	r3, [r3, #24]
 8006ad8:	613b      	str	r3, [r7, #16]
 8006ada:	693b      	ldr	r3, [r7, #16]

    while(hi2c->XferSize > 0U)
 8006adc:	e066      	b.n	8006bac <HAL_I2C_Master_Transmit+0x1d4>
    {
      /* Wait until TXE flag is set */
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006ade:	697a      	ldr	r2, [r7, #20]
 8006ae0:	6a39      	ldr	r1, [r7, #32]
 8006ae2:	68f8      	ldr	r0, [r7, #12]
 8006ae4:	f000 fcc1 	bl	800746a <I2C_WaitOnTXEFlagUntilTimeout>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d00f      	beq.n	8006b0e <HAL_I2C_Master_Transmit+0x136>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006af2:	2b04      	cmp	r3, #4
 8006af4:	d109      	bne.n	8006b0a <HAL_I2C_Master_Transmit+0x132>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	68fa      	ldr	r2, [r7, #12]
 8006afc:	6812      	ldr	r2, [r2, #0]
 8006afe:	6812      	ldr	r2, [r2, #0]
 8006b00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b04:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8006b06:	2301      	movs	r3, #1
 8006b08:	e06b      	b.n	8006be2 <HAL_I2C_Master_Transmit+0x20a>
        }
        else
        {
          return HAL_TIMEOUT;
 8006b0a:	2303      	movs	r3, #3
 8006b0c:	e069      	b.n	8006be2 <HAL_I2C_Master_Transmit+0x20a>
        }
      }

      /* Write data to DR */
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681a      	ldr	r2, [r3, #0]
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b16:	1c58      	adds	r0, r3, #1
 8006b18:	68f9      	ldr	r1, [r7, #12]
 8006b1a:	6248      	str	r0, [r1, #36]	; 0x24
 8006b1c:	781b      	ldrb	r3, [r3, #0]
 8006b1e:	6113      	str	r3, [r2, #16]
      hi2c->XferCount--;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b24:	b29b      	uxth	r3, r3
 8006b26:	3b01      	subs	r3, #1
 8006b28:	b29a      	uxth	r2, r3
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b32:	3b01      	subs	r3, #1
 8006b34:	b29a      	uxth	r2, r3
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	851a      	strh	r2, [r3, #40]	; 0x28

      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	695b      	ldr	r3, [r3, #20]
 8006b40:	f003 0304 	and.w	r3, r3, #4
 8006b44:	2b04      	cmp	r3, #4
 8006b46:	d119      	bne.n	8006b7c <HAL_I2C_Master_Transmit+0x1a4>
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d015      	beq.n	8006b7c <HAL_I2C_Master_Transmit+0x1a4>
      {
        /* Write data to DR */
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681a      	ldr	r2, [r3, #0]
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b58:	1c58      	adds	r0, r3, #1
 8006b5a:	68f9      	ldr	r1, [r7, #12]
 8006b5c:	6248      	str	r0, [r1, #36]	; 0x24
 8006b5e:	781b      	ldrb	r3, [r3, #0]
 8006b60:	6113      	str	r3, [r2, #16]
        hi2c->XferCount--;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b66:	b29b      	uxth	r3, r3
 8006b68:	3b01      	subs	r3, #1
 8006b6a:	b29a      	uxth	r2, r3
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b74:	3b01      	subs	r3, #1
 8006b76:	b29a      	uxth	r2, r3
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	851a      	strh	r2, [r3, #40]	; 0x28
      }
      
      /* Wait until BTF flag is set */
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b7c:	697a      	ldr	r2, [r7, #20]
 8006b7e:	6a39      	ldr	r1, [r7, #32]
 8006b80:	68f8      	ldr	r0, [r7, #12]
 8006b82:	f000 fcaf 	bl	80074e4 <I2C_WaitOnBTFFlagUntilTimeout>
 8006b86:	4603      	mov	r3, r0
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d00f      	beq.n	8006bac <HAL_I2C_Master_Transmit+0x1d4>
      {
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b90:	2b04      	cmp	r3, #4
 8006b92:	d109      	bne.n	8006ba8 <HAL_I2C_Master_Transmit+0x1d0>
        {
          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	68fa      	ldr	r2, [r7, #12]
 8006b9a:	6812      	ldr	r2, [r2, #0]
 8006b9c:	6812      	ldr	r2, [r2, #0]
 8006b9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ba2:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	e01c      	b.n	8006be2 <HAL_I2C_Master_Transmit+0x20a>
        }
        else
        {
          return HAL_TIMEOUT;
 8006ba8:	2303      	movs	r3, #3
 8006baa:	e01a      	b.n	8006be2 <HAL_I2C_Master_Transmit+0x20a>
    while(hi2c->XferSize > 0U)
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d194      	bne.n	8006ade <HAL_I2C_Master_Transmit+0x106>
        }
      }
    }

    /* Generate Stop */
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	68fa      	ldr	r2, [r7, #12]
 8006bba:	6812      	ldr	r2, [r2, #0]
 8006bbc:	6812      	ldr	r2, [r2, #0]
 8006bbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006bc2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	2220      	movs	r2, #32
 8006bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006bdc:	2300      	movs	r3, #0
 8006bde:	e000      	b.n	8006be2 <HAL_I2C_Master_Transmit+0x20a>
  }
  else
  {
    return HAL_BUSY;
 8006be0:	2302      	movs	r3, #2
  }
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	3718      	adds	r7, #24
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}
 8006bea:	bf00      	nop
 8006bec:	00100002 	.word	0x00100002
 8006bf0:	ffff0000 	.word	0xffff0000

08006bf4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b08c      	sub	sp, #48	; 0x30
 8006bf8:	af02      	add	r7, sp, #8
 8006bfa:	60f8      	str	r0, [r7, #12]
 8006bfc:	607a      	str	r2, [r7, #4]
 8006bfe:	461a      	mov	r2, r3
 8006c00:	460b      	mov	r3, r1
 8006c02:	817b      	strh	r3, [r7, #10]
 8006c04:	4613      	mov	r3, r2
 8006c06:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0x00U;
 8006c08:	2300      	movs	r3, #0
 8006c0a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006c0c:	f7ff faee 	bl	80061ec <HAL_GetTick>
 8006c10:	6278      	str	r0, [r7, #36]	; 0x24

  if(hi2c->State == HAL_I2C_STATE_READY)
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c18:	b2db      	uxtb	r3, r3
 8006c1a:	2b20      	cmp	r3, #32
 8006c1c:	f040 8215 	bne.w	800704a <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c22:	9300      	str	r3, [sp, #0]
 8006c24:	2319      	movs	r3, #25
 8006c26:	2201      	movs	r2, #1
 8006c28:	4985      	ldr	r1, [pc, #532]	; (8006e40 <HAL_I2C_Master_Receive+0x24c>)
 8006c2a:	68f8      	ldr	r0, [r7, #12]
 8006c2c:	f000 fb5e 	bl	80072ec <I2C_WaitOnFlagUntilTimeout>
 8006c30:	4603      	mov	r3, r0
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d001      	beq.n	8006c3a <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8006c36:	2302      	movs	r3, #2
 8006c38:	e208      	b.n	800704c <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c40:	2b01      	cmp	r3, #1
 8006c42:	d101      	bne.n	8006c48 <HAL_I2C_Master_Receive+0x54>
 8006c44:	2302      	movs	r3, #2
 8006c46:	e201      	b.n	800704c <HAL_I2C_Master_Receive+0x458>
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f003 0301 	and.w	r3, r3, #1
 8006c5a:	2b01      	cmp	r3, #1
 8006c5c:	d007      	beq.n	8006c6e <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	68fa      	ldr	r2, [r7, #12]
 8006c64:	6812      	ldr	r2, [r2, #0]
 8006c66:	6812      	ldr	r2, [r2, #0]
 8006c68:	f042 0201 	orr.w	r2, r2, #1
 8006c6c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	68fa      	ldr	r2, [r7, #12]
 8006c74:	6812      	ldr	r2, [r2, #0]
 8006c76:	6812      	ldr	r2, [r2, #0]
 8006c78:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006c7c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2222      	movs	r2, #34	; 0x22
 8006c82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	2210      	movs	r2, #16
 8006c8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	2200      	movs	r2, #0
 8006c92:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	687a      	ldr	r2, [r7, #4]
 8006c98:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	893a      	ldrh	r2, [r7, #8]
 8006c9e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	4a68      	ldr	r2, [pc, #416]	; (8006e44 <HAL_I2C_Master_Receive+0x250>)
 8006ca4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006caa:	b29a      	uxth	r2, r3
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	851a      	strh	r2, [r3, #40]	; 0x28

    /* Send Slave Address */
    if(I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006cb0:	8979      	ldrh	r1, [r7, #10]
 8006cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cb6:	68f8      	ldr	r0, [r7, #12]
 8006cb8:	f000 fa50 	bl	800715c <I2C_MasterRequestRead>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d00f      	beq.n	8006ce2 <HAL_I2C_Master_Receive+0xee>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cc6:	2b04      	cmp	r3, #4
 8006cc8:	d105      	bne.n	8006cd6 <HAL_I2C_Master_Receive+0xe2>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	e1ba      	b.n	800704c <HAL_I2C_Master_Receive+0x458>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_TIMEOUT;
 8006cde:	2303      	movs	r3, #3
 8006ce0:	e1b4      	b.n	800704c <HAL_I2C_Master_Receive+0x458>
      }
    }

    if(hi2c->XferSize == 0U)
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d113      	bne.n	8006d12 <HAL_I2C_Master_Receive+0x11e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006cea:	2300      	movs	r3, #0
 8006cec:	623b      	str	r3, [r7, #32]
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	695b      	ldr	r3, [r3, #20]
 8006cf4:	623b      	str	r3, [r7, #32]
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	699b      	ldr	r3, [r3, #24]
 8006cfc:	623b      	str	r3, [r7, #32]
 8006cfe:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	68fa      	ldr	r2, [r7, #12]
 8006d06:	6812      	ldr	r2, [r2, #0]
 8006d08:	6812      	ldr	r2, [r2, #0]
 8006d0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d0e:	601a      	str	r2, [r3, #0]
 8006d10:	e188      	b.n	8007024 <HAL_I2C_Master_Receive+0x430>
    }
    else if(hi2c->XferSize == 1U)
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d16:	2b01      	cmp	r3, #1
 8006d18:	d11b      	bne.n	8006d52 <HAL_I2C_Master_Receive+0x15e>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	68fa      	ldr	r2, [r7, #12]
 8006d20:	6812      	ldr	r2, [r2, #0]
 8006d22:	6812      	ldr	r2, [r2, #0]
 8006d24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d28:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	61fb      	str	r3, [r7, #28]
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	695b      	ldr	r3, [r3, #20]
 8006d34:	61fb      	str	r3, [r7, #28]
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	699b      	ldr	r3, [r3, #24]
 8006d3c:	61fb      	str	r3, [r7, #28]
 8006d3e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	68fa      	ldr	r2, [r7, #12]
 8006d46:	6812      	ldr	r2, [r2, #0]
 8006d48:	6812      	ldr	r2, [r2, #0]
 8006d4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d4e:	601a      	str	r2, [r3, #0]
 8006d50:	e168      	b.n	8007024 <HAL_I2C_Master_Receive+0x430>
    }
    else if(hi2c->XferSize == 2U)
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d56:	2b02      	cmp	r3, #2
 8006d58:	d11b      	bne.n	8006d92 <HAL_I2C_Master_Receive+0x19e>
    {
      /* Disable Acknowledge */
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	68fa      	ldr	r2, [r7, #12]
 8006d60:	6812      	ldr	r2, [r2, #0]
 8006d62:	6812      	ldr	r2, [r2, #0]
 8006d64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d68:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	68fa      	ldr	r2, [r7, #12]
 8006d70:	6812      	ldr	r2, [r2, #0]
 8006d72:	6812      	ldr	r2, [r2, #0]
 8006d74:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d78:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	61bb      	str	r3, [r7, #24]
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	695b      	ldr	r3, [r3, #20]
 8006d84:	61bb      	str	r3, [r7, #24]
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	699b      	ldr	r3, [r3, #24]
 8006d8c:	61bb      	str	r3, [r7, #24]
 8006d8e:	69bb      	ldr	r3, [r7, #24]
 8006d90:	e148      	b.n	8007024 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	68fa      	ldr	r2, [r7, #12]
 8006d98:	6812      	ldr	r2, [r2, #0]
 8006d9a:	6812      	ldr	r2, [r2, #0]
 8006d9c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006da0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006da2:	2300      	movs	r3, #0
 8006da4:	617b      	str	r3, [r7, #20]
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	695b      	ldr	r3, [r3, #20]
 8006dac:	617b      	str	r3, [r7, #20]
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	699b      	ldr	r3, [r3, #24]
 8006db4:	617b      	str	r3, [r7, #20]
 8006db6:	697b      	ldr	r3, [r7, #20]
    }

    while(hi2c->XferSize > 0U)
 8006db8:	e134      	b.n	8007024 <HAL_I2C_Master_Receive+0x430>
    {
      if(hi2c->XferSize <= 3U)
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dbe:	2b03      	cmp	r3, #3
 8006dc0:	f200 80eb 	bhi.w	8006f9a <HAL_I2C_Master_Receive+0x3a6>
      {
        /* One byte */
        if(hi2c->XferSize == 1U)
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dc8:	2b01      	cmp	r3, #1
 8006dca:	d127      	bne.n	8006e1c <HAL_I2C_Master_Receive+0x228>
        {
          /* Wait until RXNE flag is set */
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8006dcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006dce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006dd0:	68f8      	ldr	r0, [r7, #12]
 8006dd2:	f000 fbc4 	bl	800755e <I2C_WaitOnRXNEFlagUntilTimeout>
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d007      	beq.n	8006dec <HAL_I2C_Master_Receive+0x1f8>
          {
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006de0:	2b20      	cmp	r3, #32
 8006de2:	d101      	bne.n	8006de8 <HAL_I2C_Master_Receive+0x1f4>
            {
              return HAL_TIMEOUT;
 8006de4:	2303      	movs	r3, #3
 8006de6:	e131      	b.n	800704c <HAL_I2C_Master_Receive+0x458>
            }
            else
            {
              return HAL_ERROR;
 8006de8:	2301      	movs	r3, #1
 8006dea:	e12f      	b.n	800704c <HAL_I2C_Master_Receive+0x458>
            }
          }

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006df0:	1c59      	adds	r1, r3, #1
 8006df2:	68fa      	ldr	r2, [r7, #12]
 8006df4:	6251      	str	r1, [r2, #36]	; 0x24
 8006df6:	68fa      	ldr	r2, [r7, #12]
 8006df8:	6812      	ldr	r2, [r2, #0]
 8006dfa:	6912      	ldr	r2, [r2, #16]
 8006dfc:	b2d2      	uxtb	r2, r2
 8006dfe:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e04:	3b01      	subs	r3, #1
 8006e06:	b29a      	uxth	r2, r3
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e10:	b29b      	uxth	r3, r3
 8006e12:	3b01      	subs	r3, #1
 8006e14:	b29a      	uxth	r2, r3
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006e1a:	e103      	b.n	8007024 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if(hi2c->XferSize == 2U)
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e20:	2b02      	cmp	r3, #2
 8006e22:	d14a      	bne.n	8006eba <HAL_I2C_Master_Receive+0x2c6>
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e26:	9300      	str	r3, [sp, #0]
 8006e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	4906      	ldr	r1, [pc, #24]	; (8006e48 <HAL_I2C_Master_Receive+0x254>)
 8006e2e:	68f8      	ldr	r0, [r7, #12]
 8006e30:	f000 fa5c 	bl	80072ec <I2C_WaitOnFlagUntilTimeout>
 8006e34:	4603      	mov	r3, r0
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d008      	beq.n	8006e4c <HAL_I2C_Master_Receive+0x258>
          {
            return HAL_TIMEOUT;
 8006e3a:	2303      	movs	r3, #3
 8006e3c:	e106      	b.n	800704c <HAL_I2C_Master_Receive+0x458>
 8006e3e:	bf00      	nop
 8006e40:	00100002 	.word	0x00100002
 8006e44:	ffff0000 	.word	0xffff0000
 8006e48:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	68fa      	ldr	r2, [r7, #12]
 8006e52:	6812      	ldr	r2, [r2, #0]
 8006e54:	6812      	ldr	r2, [r2, #0]
 8006e56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e5a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e60:	1c59      	adds	r1, r3, #1
 8006e62:	68fa      	ldr	r2, [r7, #12]
 8006e64:	6251      	str	r1, [r2, #36]	; 0x24
 8006e66:	68fa      	ldr	r2, [r7, #12]
 8006e68:	6812      	ldr	r2, [r2, #0]
 8006e6a:	6912      	ldr	r2, [r2, #16]
 8006e6c:	b2d2      	uxtb	r2, r2
 8006e6e:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e74:	3b01      	subs	r3, #1
 8006e76:	b29a      	uxth	r2, r3
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e80:	b29b      	uxth	r3, r3
 8006e82:	3b01      	subs	r3, #1
 8006e84:	b29a      	uxth	r2, r3
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e8e:	1c59      	adds	r1, r3, #1
 8006e90:	68fa      	ldr	r2, [r7, #12]
 8006e92:	6251      	str	r1, [r2, #36]	; 0x24
 8006e94:	68fa      	ldr	r2, [r7, #12]
 8006e96:	6812      	ldr	r2, [r2, #0]
 8006e98:	6912      	ldr	r2, [r2, #16]
 8006e9a:	b2d2      	uxtb	r2, r2
 8006e9c:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ea2:	3b01      	subs	r3, #1
 8006ea4:	b29a      	uxth	r2, r3
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006eae:	b29b      	uxth	r3, r3
 8006eb0:	3b01      	subs	r3, #1
 8006eb2:	b29a      	uxth	r2, r3
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006eb8:	e0b4      	b.n	8007024 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ebc:	9300      	str	r3, [sp, #0]
 8006ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	4964      	ldr	r1, [pc, #400]	; (8007054 <HAL_I2C_Master_Receive+0x460>)
 8006ec4:	68f8      	ldr	r0, [r7, #12]
 8006ec6:	f000 fa11 	bl	80072ec <I2C_WaitOnFlagUntilTimeout>
 8006eca:	4603      	mov	r3, r0
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d001      	beq.n	8006ed4 <HAL_I2C_Master_Receive+0x2e0>
          {
            return HAL_TIMEOUT;
 8006ed0:	2303      	movs	r3, #3
 8006ed2:	e0bb      	b.n	800704c <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	68fa      	ldr	r2, [r7, #12]
 8006eda:	6812      	ldr	r2, [r2, #0]
 8006edc:	6812      	ldr	r2, [r2, #0]
 8006ede:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ee2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ee8:	1c59      	adds	r1, r3, #1
 8006eea:	68fa      	ldr	r2, [r7, #12]
 8006eec:	6251      	str	r1, [r2, #36]	; 0x24
 8006eee:	68fa      	ldr	r2, [r7, #12]
 8006ef0:	6812      	ldr	r2, [r2, #0]
 8006ef2:	6912      	ldr	r2, [r2, #16]
 8006ef4:	b2d2      	uxtb	r2, r2
 8006ef6:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006efc:	3b01      	subs	r3, #1
 8006efe:	b29a      	uxth	r2, r3
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f08:	b29b      	uxth	r3, r3
 8006f0a:	3b01      	subs	r3, #1
 8006f0c:	b29a      	uxth	r2, r3
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f14:	9300      	str	r3, [sp, #0]
 8006f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f18:	2200      	movs	r2, #0
 8006f1a:	494e      	ldr	r1, [pc, #312]	; (8007054 <HAL_I2C_Master_Receive+0x460>)
 8006f1c:	68f8      	ldr	r0, [r7, #12]
 8006f1e:	f000 f9e5 	bl	80072ec <I2C_WaitOnFlagUntilTimeout>
 8006f22:	4603      	mov	r3, r0
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d001      	beq.n	8006f2c <HAL_I2C_Master_Receive+0x338>
          {
            return HAL_TIMEOUT;
 8006f28:	2303      	movs	r3, #3
 8006f2a:	e08f      	b.n	800704c <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	68fa      	ldr	r2, [r7, #12]
 8006f32:	6812      	ldr	r2, [r2, #0]
 8006f34:	6812      	ldr	r2, [r2, #0]
 8006f36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f3a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f40:	1c59      	adds	r1, r3, #1
 8006f42:	68fa      	ldr	r2, [r7, #12]
 8006f44:	6251      	str	r1, [r2, #36]	; 0x24
 8006f46:	68fa      	ldr	r2, [r7, #12]
 8006f48:	6812      	ldr	r2, [r2, #0]
 8006f4a:	6912      	ldr	r2, [r2, #16]
 8006f4c:	b2d2      	uxtb	r2, r2
 8006f4e:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f54:	3b01      	subs	r3, #1
 8006f56:	b29a      	uxth	r2, r3
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f60:	b29b      	uxth	r3, r3
 8006f62:	3b01      	subs	r3, #1
 8006f64:	b29a      	uxth	r2, r3
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f6e:	1c59      	adds	r1, r3, #1
 8006f70:	68fa      	ldr	r2, [r7, #12]
 8006f72:	6251      	str	r1, [r2, #36]	; 0x24
 8006f74:	68fa      	ldr	r2, [r7, #12]
 8006f76:	6812      	ldr	r2, [r2, #0]
 8006f78:	6912      	ldr	r2, [r2, #16]
 8006f7a:	b2d2      	uxtb	r2, r2
 8006f7c:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f82:	3b01      	subs	r3, #1
 8006f84:	b29a      	uxth	r2, r3
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f8e:	b29b      	uxth	r3, r3
 8006f90:	3b01      	subs	r3, #1
 8006f92:	b29a      	uxth	r2, r3
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006f98:	e044      	b.n	8007024 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8006f9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f9c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006f9e:	68f8      	ldr	r0, [r7, #12]
 8006fa0:	f000 fadd 	bl	800755e <I2C_WaitOnRXNEFlagUntilTimeout>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d007      	beq.n	8006fba <HAL_I2C_Master_Receive+0x3c6>
        {
          if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fae:	2b20      	cmp	r3, #32
 8006fb0:	d101      	bne.n	8006fb6 <HAL_I2C_Master_Receive+0x3c2>
          {
            return HAL_TIMEOUT;
 8006fb2:	2303      	movs	r3, #3
 8006fb4:	e04a      	b.n	800704c <HAL_I2C_Master_Receive+0x458>
          }
          else
          {
            return HAL_ERROR;
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	e048      	b.n	800704c <HAL_I2C_Master_Receive+0x458>
          }
        }

        /* Read data from DR */
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fbe:	1c59      	adds	r1, r3, #1
 8006fc0:	68fa      	ldr	r2, [r7, #12]
 8006fc2:	6251      	str	r1, [r2, #36]	; 0x24
 8006fc4:	68fa      	ldr	r2, [r7, #12]
 8006fc6:	6812      	ldr	r2, [r2, #0]
 8006fc8:	6912      	ldr	r2, [r2, #16]
 8006fca:	b2d2      	uxtb	r2, r2
 8006fcc:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fd2:	3b01      	subs	r3, #1
 8006fd4:	b29a      	uxth	r2, r3
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fde:	b29b      	uxth	r3, r3
 8006fe0:	3b01      	subs	r3, #1
 8006fe2:	b29a      	uxth	r2, r3
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	695b      	ldr	r3, [r3, #20]
 8006fee:	f003 0304 	and.w	r3, r3, #4
 8006ff2:	2b04      	cmp	r3, #4
 8006ff4:	d116      	bne.n	8007024 <HAL_I2C_Master_Receive+0x430>
        {
          /* Read data from DR */
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ffa:	1c59      	adds	r1, r3, #1
 8006ffc:	68fa      	ldr	r2, [r7, #12]
 8006ffe:	6251      	str	r1, [r2, #36]	; 0x24
 8007000:	68fa      	ldr	r2, [r7, #12]
 8007002:	6812      	ldr	r2, [r2, #0]
 8007004:	6912      	ldr	r2, [r2, #16]
 8007006:	b2d2      	uxtb	r2, r2
 8007008:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800700e:	3b01      	subs	r3, #1
 8007010:	b29a      	uxth	r2, r3
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800701a:	b29b      	uxth	r3, r3
 800701c:	3b01      	subs	r3, #1
 800701e:	b29a      	uxth	r2, r3
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	855a      	strh	r2, [r3, #42]	; 0x2a
    while(hi2c->XferSize > 0U)
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007028:	2b00      	cmp	r3, #0
 800702a:	f47f aec6 	bne.w	8006dba <HAL_I2C_Master_Receive+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	2220      	movs	r2, #32
 8007032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	2200      	movs	r2, #0
 800703a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	2200      	movs	r2, #0
 8007042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007046:	2300      	movs	r3, #0
 8007048:	e000      	b.n	800704c <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800704a:	2302      	movs	r3, #2
  }
}
 800704c:	4618      	mov	r0, r3
 800704e:	3728      	adds	r7, #40	; 0x28
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}
 8007054:	00010004 	.word	0x00010004

08007058 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b088      	sub	sp, #32
 800705c:	af02      	add	r7, sp, #8
 800705e:	60f8      	str	r0, [r7, #12]
 8007060:	607a      	str	r2, [r7, #4]
 8007062:	603b      	str	r3, [r7, #0]
 8007064:	460b      	mov	r3, r1
 8007066:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800706c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	2b04      	cmp	r3, #4
 8007072:	d006      	beq.n	8007082 <I2C_MasterRequestWrite+0x2a>
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	2b01      	cmp	r3, #1
 8007078:	d003      	beq.n	8007082 <I2C_MasterRequestWrite+0x2a>
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007080:	d108      	bne.n	8007094 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	68fa      	ldr	r2, [r7, #12]
 8007088:	6812      	ldr	r2, [r2, #0]
 800708a:	6812      	ldr	r2, [r2, #0]
 800708c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007090:	601a      	str	r2, [r3, #0]
 8007092:	e00b      	b.n	80070ac <I2C_MasterRequestWrite+0x54>
  }
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007098:	2b12      	cmp	r3, #18
 800709a:	d107      	bne.n	80070ac <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	68fa      	ldr	r2, [r7, #12]
 80070a2:	6812      	ldr	r2, [r2, #0]
 80070a4:	6812      	ldr	r2, [r2, #0]
 80070a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80070aa:	601a      	str	r2, [r3, #0]
  }

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	9300      	str	r3, [sp, #0]
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2200      	movs	r2, #0
 80070b4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80070b8:	68f8      	ldr	r0, [r7, #12]
 80070ba:	f000 f917 	bl	80072ec <I2C_WaitOnFlagUntilTimeout>
 80070be:	4603      	mov	r3, r0
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d001      	beq.n	80070c8 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_TIMEOUT;
 80070c4:	2303      	movs	r3, #3
 80070c6:	e040      	b.n	800714a <I2C_MasterRequestWrite+0xf2>
  }

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	691b      	ldr	r3, [r3, #16]
 80070cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80070d0:	d107      	bne.n	80070e2 <I2C_MasterRequestWrite+0x8a>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	897a      	ldrh	r2, [r7, #10]
 80070d8:	b2d2      	uxtb	r2, r2
 80070da:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80070de:	611a      	str	r2, [r3, #16]
 80070e0:	e021      	b.n	8007126 <I2C_MasterRequestWrite+0xce>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	897a      	ldrh	r2, [r7, #10]
 80070e8:	11d2      	asrs	r2, r2, #7
 80070ea:	b2d2      	uxtb	r2, r2
 80070ec:	f002 0206 	and.w	r2, r2, #6
 80070f0:	b2d2      	uxtb	r2, r2
 80070f2:	f062 020f 	orn	r2, r2, #15
 80070f6:	b2d2      	uxtb	r2, r2
 80070f8:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	687a      	ldr	r2, [r7, #4]
 80070fe:	4915      	ldr	r1, [pc, #84]	; (8007154 <I2C_MasterRequestWrite+0xfc>)
 8007100:	68f8      	ldr	r0, [r7, #12]
 8007102:	f000 f944 	bl	800738e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007106:	4603      	mov	r3, r0
 8007108:	2b00      	cmp	r3, #0
 800710a:	d007      	beq.n	800711c <I2C_MasterRequestWrite+0xc4>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007110:	2b04      	cmp	r3, #4
 8007112:	d101      	bne.n	8007118 <I2C_MasterRequestWrite+0xc0>
      {
        return HAL_ERROR;
 8007114:	2301      	movs	r3, #1
 8007116:	e018      	b.n	800714a <I2C_MasterRequestWrite+0xf2>
      }
      else
      {
        return HAL_TIMEOUT;
 8007118:	2303      	movs	r3, #3
 800711a:	e016      	b.n	800714a <I2C_MasterRequestWrite+0xf2>
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	897a      	ldrh	r2, [r7, #10]
 8007122:	b2d2      	uxtb	r2, r2
 8007124:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	687a      	ldr	r2, [r7, #4]
 800712a:	490b      	ldr	r1, [pc, #44]	; (8007158 <I2C_MasterRequestWrite+0x100>)
 800712c:	68f8      	ldr	r0, [r7, #12]
 800712e:	f000 f92e 	bl	800738e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007132:	4603      	mov	r3, r0
 8007134:	2b00      	cmp	r3, #0
 8007136:	d007      	beq.n	8007148 <I2C_MasterRequestWrite+0xf0>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800713c:	2b04      	cmp	r3, #4
 800713e:	d101      	bne.n	8007144 <I2C_MasterRequestWrite+0xec>
    {
      return HAL_ERROR;
 8007140:	2301      	movs	r3, #1
 8007142:	e002      	b.n	800714a <I2C_MasterRequestWrite+0xf2>
    }
    else
    {
      return HAL_TIMEOUT;
 8007144:	2303      	movs	r3, #3
 8007146:	e000      	b.n	800714a <I2C_MasterRequestWrite+0xf2>
    }
  }

  return HAL_OK;
 8007148:	2300      	movs	r3, #0
}
 800714a:	4618      	mov	r0, r3
 800714c:	3718      	adds	r7, #24
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}
 8007152:	bf00      	nop
 8007154:	00010008 	.word	0x00010008
 8007158:	00010002 	.word	0x00010002

0800715c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b088      	sub	sp, #32
 8007160:	af02      	add	r7, sp, #8
 8007162:	60f8      	str	r0, [r7, #12]
 8007164:	607a      	str	r2, [r7, #4]
 8007166:	603b      	str	r3, [r7, #0]
 8007168:	460b      	mov	r3, r1
 800716a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007170:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	68fa      	ldr	r2, [r7, #12]
 8007178:	6812      	ldr	r2, [r2, #0]
 800717a:	6812      	ldr	r2, [r2, #0]
 800717c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007180:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	2b04      	cmp	r3, #4
 8007186:	d006      	beq.n	8007196 <I2C_MasterRequestRead+0x3a>
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	2b01      	cmp	r3, #1
 800718c:	d003      	beq.n	8007196 <I2C_MasterRequestRead+0x3a>
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007194:	d108      	bne.n	80071a8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	68fa      	ldr	r2, [r7, #12]
 800719c:	6812      	ldr	r2, [r2, #0]
 800719e:	6812      	ldr	r2, [r2, #0]
 80071a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80071a4:	601a      	str	r2, [r3, #0]
 80071a6:	e00b      	b.n	80071c0 <I2C_MasterRequestRead+0x64>
  }
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071ac:	2b11      	cmp	r3, #17
 80071ae:	d107      	bne.n	80071c0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	68fa      	ldr	r2, [r7, #12]
 80071b6:	6812      	ldr	r2, [r2, #0]
 80071b8:	6812      	ldr	r2, [r2, #0]
 80071ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80071be:	601a      	str	r2, [r3, #0]
  }

  /* Wait until SB flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	9300      	str	r3, [sp, #0]
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2200      	movs	r2, #0
 80071c8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80071cc:	68f8      	ldr	r0, [r7, #12]
 80071ce:	f000 f88d 	bl	80072ec <I2C_WaitOnFlagUntilTimeout>
 80071d2:	4603      	mov	r3, r0
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d001      	beq.n	80071dc <I2C_MasterRequestRead+0x80>
  {
    return HAL_TIMEOUT;
 80071d8:	2303      	movs	r3, #3
 80071da:	e07f      	b.n	80072dc <I2C_MasterRequestRead+0x180>
  }

  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	691b      	ldr	r3, [r3, #16]
 80071e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80071e4:	d108      	bne.n	80071f8 <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	897a      	ldrh	r2, [r7, #10]
 80071ec:	b2d2      	uxtb	r2, r2
 80071ee:	f042 0201 	orr.w	r2, r2, #1
 80071f2:	b2d2      	uxtb	r2, r2
 80071f4:	611a      	str	r2, [r3, #16]
 80071f6:	e05f      	b.n	80072b8 <I2C_MasterRequestRead+0x15c>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	897a      	ldrh	r2, [r7, #10]
 80071fe:	11d2      	asrs	r2, r2, #7
 8007200:	b2d2      	uxtb	r2, r2
 8007202:	f002 0206 	and.w	r2, r2, #6
 8007206:	b2d2      	uxtb	r2, r2
 8007208:	f062 020f 	orn	r2, r2, #15
 800720c:	b2d2      	uxtb	r2, r2
 800720e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	687a      	ldr	r2, [r7, #4]
 8007214:	4933      	ldr	r1, [pc, #204]	; (80072e4 <I2C_MasterRequestRead+0x188>)
 8007216:	68f8      	ldr	r0, [r7, #12]
 8007218:	f000 f8b9 	bl	800738e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800721c:	4603      	mov	r3, r0
 800721e:	2b00      	cmp	r3, #0
 8007220:	d007      	beq.n	8007232 <I2C_MasterRequestRead+0xd6>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007226:	2b04      	cmp	r3, #4
 8007228:	d101      	bne.n	800722e <I2C_MasterRequestRead+0xd2>
      {
        return HAL_ERROR;
 800722a:	2301      	movs	r3, #1
 800722c:	e056      	b.n	80072dc <I2C_MasterRequestRead+0x180>
      }
      else
      {
        return HAL_TIMEOUT;
 800722e:	2303      	movs	r3, #3
 8007230:	e054      	b.n	80072dc <I2C_MasterRequestRead+0x180>
      }
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	897a      	ldrh	r2, [r7, #10]
 8007238:	b2d2      	uxtb	r2, r2
 800723a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	687a      	ldr	r2, [r7, #4]
 8007240:	4929      	ldr	r1, [pc, #164]	; (80072e8 <I2C_MasterRequestRead+0x18c>)
 8007242:	68f8      	ldr	r0, [r7, #12]
 8007244:	f000 f8a3 	bl	800738e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007248:	4603      	mov	r3, r0
 800724a:	2b00      	cmp	r3, #0
 800724c:	d007      	beq.n	800725e <I2C_MasterRequestRead+0x102>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007252:	2b04      	cmp	r3, #4
 8007254:	d101      	bne.n	800725a <I2C_MasterRequestRead+0xfe>
      {
        return HAL_ERROR;
 8007256:	2301      	movs	r3, #1
 8007258:	e040      	b.n	80072dc <I2C_MasterRequestRead+0x180>
      }
      else
      {
        return HAL_TIMEOUT;
 800725a:	2303      	movs	r3, #3
 800725c:	e03e      	b.n	80072dc <I2C_MasterRequestRead+0x180>
      }
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800725e:	2300      	movs	r3, #0
 8007260:	613b      	str	r3, [r7, #16]
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	695b      	ldr	r3, [r3, #20]
 8007268:	613b      	str	r3, [r7, #16]
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	699b      	ldr	r3, [r3, #24]
 8007270:	613b      	str	r3, [r7, #16]
 8007272:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	68fa      	ldr	r2, [r7, #12]
 800727a:	6812      	ldr	r2, [r2, #0]
 800727c:	6812      	ldr	r2, [r2, #0]
 800727e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007282:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	9300      	str	r3, [sp, #0]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2200      	movs	r2, #0
 800728c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007290:	68f8      	ldr	r0, [r7, #12]
 8007292:	f000 f82b 	bl	80072ec <I2C_WaitOnFlagUntilTimeout>
 8007296:	4603      	mov	r3, r0
 8007298:	2b00      	cmp	r3, #0
 800729a:	d001      	beq.n	80072a0 <I2C_MasterRequestRead+0x144>
    {
      return HAL_TIMEOUT;
 800729c:	2303      	movs	r3, #3
 800729e:	e01d      	b.n	80072dc <I2C_MasterRequestRead+0x180>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	897a      	ldrh	r2, [r7, #10]
 80072a6:	11d2      	asrs	r2, r2, #7
 80072a8:	b2d2      	uxtb	r2, r2
 80072aa:	f002 0206 	and.w	r2, r2, #6
 80072ae:	b2d2      	uxtb	r2, r2
 80072b0:	f062 020e 	orn	r2, r2, #14
 80072b4:	b2d2      	uxtb	r2, r2
 80072b6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	687a      	ldr	r2, [r7, #4]
 80072bc:	490a      	ldr	r1, [pc, #40]	; (80072e8 <I2C_MasterRequestRead+0x18c>)
 80072be:	68f8      	ldr	r0, [r7, #12]
 80072c0:	f000 f865 	bl	800738e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80072c4:	4603      	mov	r3, r0
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d007      	beq.n	80072da <I2C_MasterRequestRead+0x17e>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ce:	2b04      	cmp	r3, #4
 80072d0:	d101      	bne.n	80072d6 <I2C_MasterRequestRead+0x17a>
    {
      return HAL_ERROR;
 80072d2:	2301      	movs	r3, #1
 80072d4:	e002      	b.n	80072dc <I2C_MasterRequestRead+0x180>
    }
    else
    {
      return HAL_TIMEOUT;
 80072d6:	2303      	movs	r3, #3
 80072d8:	e000      	b.n	80072dc <I2C_MasterRequestRead+0x180>
    }
  }

  return HAL_OK;
 80072da:	2300      	movs	r3, #0
}
 80072dc:	4618      	mov	r0, r3
 80072de:	3718      	adds	r7, #24
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bd80      	pop	{r7, pc}
 80072e4:	00010008 	.word	0x00010008
 80072e8:	00010002 	.word	0x00010002

080072ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b084      	sub	sp, #16
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	60f8      	str	r0, [r7, #12]
 80072f4:	60b9      	str	r1, [r7, #8]
 80072f6:	603b      	str	r3, [r7, #0]
 80072f8:	4613      	mov	r3, r2
 80072fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 80072fc:	e01f      	b.n	800733e <I2C_WaitOnFlagUntilTimeout+0x52>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007304:	d01b      	beq.n	800733e <I2C_WaitOnFlagUntilTimeout+0x52>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d007      	beq.n	800731c <I2C_WaitOnFlagUntilTimeout+0x30>
 800730c:	f7fe ff6e 	bl	80061ec <HAL_GetTick>
 8007310:	4602      	mov	r2, r0
 8007312:	69bb      	ldr	r3, [r7, #24]
 8007314:	1ad2      	subs	r2, r2, r3
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	429a      	cmp	r2, r3
 800731a:	d910      	bls.n	800733e <I2C_WaitOnFlagUntilTimeout+0x52>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	2200      	movs	r2, #0
 8007320:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	2220      	movs	r2, #32
 8007326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	2200      	movs	r2, #0
 800732e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	2200      	movs	r2, #0
 8007336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 800733a:	2303      	movs	r3, #3
 800733c:	e023      	b.n	8007386 <I2C_WaitOnFlagUntilTimeout+0x9a>
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	0c1b      	lsrs	r3, r3, #16
 8007342:	b2db      	uxtb	r3, r3
 8007344:	2b01      	cmp	r3, #1
 8007346:	d10d      	bne.n	8007364 <I2C_WaitOnFlagUntilTimeout+0x78>
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	695b      	ldr	r3, [r3, #20]
 800734e:	43da      	mvns	r2, r3
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	4013      	ands	r3, r2
 8007354:	b29b      	uxth	r3, r3
 8007356:	2b00      	cmp	r3, #0
 8007358:	bf0c      	ite	eq
 800735a:	2301      	moveq	r3, #1
 800735c:	2300      	movne	r3, #0
 800735e:	b2db      	uxtb	r3, r3
 8007360:	461a      	mov	r2, r3
 8007362:	e00c      	b.n	800737e <I2C_WaitOnFlagUntilTimeout+0x92>
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	699b      	ldr	r3, [r3, #24]
 800736a:	43da      	mvns	r2, r3
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	4013      	ands	r3, r2
 8007370:	b29b      	uxth	r3, r3
 8007372:	2b00      	cmp	r3, #0
 8007374:	bf0c      	ite	eq
 8007376:	2301      	moveq	r3, #1
 8007378:	2300      	movne	r3, #0
 800737a:	b2db      	uxtb	r3, r3
 800737c:	461a      	mov	r2, r3
 800737e:	79fb      	ldrb	r3, [r7, #7]
 8007380:	429a      	cmp	r2, r3
 8007382:	d0bc      	beq.n	80072fe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 8007384:	2300      	movs	r3, #0
}
 8007386:	4618      	mov	r0, r3
 8007388:	3710      	adds	r7, #16
 800738a:	46bd      	mov	sp, r7
 800738c:	bd80      	pop	{r7, pc}

0800738e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800738e:	b580      	push	{r7, lr}
 8007390:	b084      	sub	sp, #16
 8007392:	af00      	add	r7, sp, #0
 8007394:	60f8      	str	r0, [r7, #12]
 8007396:	60b9      	str	r1, [r7, #8]
 8007398:	607a      	str	r2, [r7, #4]
 800739a:	603b      	str	r3, [r7, #0]
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800739c:	e040      	b.n	8007420 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
  {
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	695b      	ldr	r3, [r3, #20]
 80073a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80073a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073ac:	d11c      	bne.n	80073e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5a>
    {
      /* Generate Stop */
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	68fa      	ldr	r2, [r7, #12]
 80073b4:	6812      	ldr	r2, [r2, #0]
 80073b6:	6812      	ldr	r2, [r2, #0]
 80073b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80073bc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80073c6:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	2204      	movs	r2, #4
 80073cc:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	2200      	movs	r2, #0
 80073d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	2220      	movs	r2, #32
 80073d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	2200      	movs	r2, #0
 80073e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80073e4:	2301      	movs	r3, #1
 80073e6:	e03c      	b.n	8007462 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073ee:	d017      	beq.n	8007420 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d007      	beq.n	8007406 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x78>
 80073f6:	f7fe fef9 	bl	80061ec <HAL_GetTick>
 80073fa:	4602      	mov	r2, r0
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	1ad2      	subs	r2, r2, r3
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	429a      	cmp	r2, r3
 8007404:	d90c      	bls.n	8007420 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x92>
      {
        hi2c->PreviousState = I2C_STATE_NONE;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	2200      	movs	r2, #0
 800740a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	2220      	movs	r2, #32
 8007410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	2200      	movs	r2, #0
 8007418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800741c:	2303      	movs	r3, #3
 800741e:	e020      	b.n	8007462 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd4>
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	0c1b      	lsrs	r3, r3, #16
 8007424:	b2db      	uxtb	r3, r3
 8007426:	2b01      	cmp	r3, #1
 8007428:	d10c      	bne.n	8007444 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb6>
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	695b      	ldr	r3, [r3, #20]
 8007430:	43da      	mvns	r2, r3
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	4013      	ands	r3, r2
 8007436:	b29b      	uxth	r3, r3
 8007438:	2b00      	cmp	r3, #0
 800743a:	bf14      	ite	ne
 800743c:	2301      	movne	r3, #1
 800743e:	2300      	moveq	r3, #0
 8007440:	b2db      	uxtb	r3, r3
 8007442:	e00b      	b.n	800745c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xce>
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	699b      	ldr	r3, [r3, #24]
 800744a:	43da      	mvns	r2, r3
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	4013      	ands	r3, r2
 8007450:	b29b      	uxth	r3, r3
 8007452:	2b00      	cmp	r3, #0
 8007454:	bf14      	ite	ne
 8007456:	2301      	movne	r3, #1
 8007458:	2300      	moveq	r3, #0
 800745a:	b2db      	uxtb	r3, r3
 800745c:	2b00      	cmp	r3, #0
 800745e:	d19e      	bne.n	800739e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007460:	2300      	movs	r3, #0
}
 8007462:	4618      	mov	r0, r3
 8007464:	3710      	adds	r7, #16
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}

0800746a <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{    
 800746a:	b580      	push	{r7, lr}
 800746c:	b084      	sub	sp, #16
 800746e:	af00      	add	r7, sp, #0
 8007470:	60f8      	str	r0, [r7, #12]
 8007472:	60b9      	str	r1, [r7, #8]
 8007474:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007476:	e029      	b.n	80074cc <I2C_WaitOnTXEFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007478:	68f8      	ldr	r0, [r7, #12]
 800747a:	f000 f8ba 	bl	80075f2 <I2C_IsAcknowledgeFailed>
 800747e:	4603      	mov	r3, r0
 8007480:	2b00      	cmp	r3, #0
 8007482:	d001      	beq.n	8007488 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007484:	2301      	movs	r3, #1
 8007486:	e029      	b.n	80074dc <I2C_WaitOnTXEFlagUntilTimeout+0x72>
    }
		
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800748e:	d01d      	beq.n	80074cc <I2C_WaitOnTXEFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d007      	beq.n	80074a6 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007496:	f7fe fea9 	bl	80061ec <HAL_GetTick>
 800749a:	4602      	mov	r2, r0
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	1ad2      	subs	r2, r2, r3
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	429a      	cmp	r2, r3
 80074a4:	d912      	bls.n	80074cc <I2C_WaitOnTXEFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074aa:	f043 0220 	orr.w	r2, r3, #32
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	2200      	movs	r2, #0
 80074b6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	2220      	movs	r2, #32
 80074bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	2200      	movs	r2, #0
 80074c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80074c8:	2303      	movs	r3, #3
 80074ca:	e007      	b.n	80074dc <I2C_WaitOnTXEFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	695b      	ldr	r3, [r3, #20]
 80074d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074d6:	2b80      	cmp	r3, #128	; 0x80
 80074d8:	d1ce      	bne.n	8007478 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;      
 80074da:	2300      	movs	r3, #0
}
 80074dc:	4618      	mov	r0, r3
 80074de:	3710      	adds	r7, #16
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}

080074e4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b084      	sub	sp, #16
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	60f8      	str	r0, [r7, #12]
 80074ec:	60b9      	str	r1, [r7, #8]
 80074ee:	607a      	str	r2, [r7, #4]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80074f0:	e029      	b.n	8007546 <I2C_WaitOnBTFFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80074f2:	68f8      	ldr	r0, [r7, #12]
 80074f4:	f000 f87d 	bl	80075f2 <I2C_IsAcknowledgeFailed>
 80074f8:	4603      	mov	r3, r0
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d001      	beq.n	8007502 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80074fe:	2301      	movs	r3, #1
 8007500:	e029      	b.n	8007556 <I2C_WaitOnBTFFlagUntilTimeout+0x72>
    }

    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007508:	d01d      	beq.n	8007546 <I2C_WaitOnBTFFlagUntilTimeout+0x62>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d007      	beq.n	8007520 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007510:	f7fe fe6c 	bl	80061ec <HAL_GetTick>
 8007514:	4602      	mov	r2, r0
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	1ad2      	subs	r2, r2, r3
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	429a      	cmp	r2, r3
 800751e:	d912      	bls.n	8007546 <I2C_WaitOnBTFFlagUntilTimeout+0x62>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007524:	f043 0220 	orr.w	r2, r3, #32
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	2200      	movs	r2, #0
 8007530:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	2220      	movs	r2, #32
 8007536:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	2200      	movs	r2, #0
 800753e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007542:	2303      	movs	r3, #3
 8007544:	e007      	b.n	8007556 <I2C_WaitOnBTFFlagUntilTimeout+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	695b      	ldr	r3, [r3, #20]
 800754c:	f003 0304 	and.w	r3, r3, #4
 8007550:	2b04      	cmp	r3, #4
 8007552:	d1ce      	bne.n	80074f2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007554:	2300      	movs	r3, #0
}
 8007556:	4618      	mov	r0, r3
 8007558:	3710      	adds	r7, #16
 800755a:	46bd      	mov	sp, r7
 800755c:	bd80      	pop	{r7, pc}

0800755e <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{  
 800755e:	b580      	push	{r7, lr}
 8007560:	b084      	sub	sp, #16
 8007562:	af00      	add	r7, sp, #0
 8007564:	60f8      	str	r0, [r7, #12]
 8007566:	60b9      	str	r1, [r7, #8]
 8007568:	607a      	str	r2, [r7, #4]

  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800756a:	e036      	b.n	80075da <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>
  {
    /* Check if a STOPF is detected */
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	695b      	ldr	r3, [r3, #20]
 8007572:	f003 0310 	and.w	r3, r3, #16
 8007576:	2b10      	cmp	r3, #16
 8007578:	d114      	bne.n	80075a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x46>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f06f 0210 	mvn.w	r2, #16
 8007582:	615a      	str	r2, [r3, #20]

      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	2200      	movs	r2, #0
 8007588:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	2200      	movs	r2, #0
 800758e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	2220      	movs	r2, #32
 8007594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	2200      	movs	r2, #0
 800759c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80075a0:	2301      	movs	r3, #1
 80075a2:	e022      	b.n	80075ea <I2C_WaitOnRXNEFlagUntilTimeout+0x8c>
    }

    /* Check for the Timeout */
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d007      	beq.n	80075ba <I2C_WaitOnRXNEFlagUntilTimeout+0x5c>
 80075aa:	f7fe fe1f 	bl	80061ec <HAL_GetTick>
 80075ae:	4602      	mov	r2, r0
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	1ad2      	subs	r2, r2, r3
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	429a      	cmp	r2, r3
 80075b8:	d90f      	bls.n	80075da <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075be:	f043 0220 	orr.w	r2, r3, #32
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	641a      	str	r2, [r3, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	2220      	movs	r2, #32
 80075ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	2200      	movs	r2, #0
 80075d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_TIMEOUT;
 80075d6:	2303      	movs	r3, #3
 80075d8:	e007      	b.n	80075ea <I2C_WaitOnRXNEFlagUntilTimeout+0x8c>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	695b      	ldr	r3, [r3, #20]
 80075e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075e4:	2b40      	cmp	r3, #64	; 0x40
 80075e6:	d1c1      	bne.n	800756c <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80075e8:	2300      	movs	r3, #0
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	3710      	adds	r7, #16
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}

080075f2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80075f2:	b480      	push	{r7}
 80075f4:	b083      	sub	sp, #12
 80075f6:	af00      	add	r7, sp, #0
 80075f8:	6078      	str	r0, [r7, #4]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	695b      	ldr	r3, [r3, #20]
 8007600:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007604:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007608:	d114      	bne.n	8007634 <I2C_IsAcknowledgeFailed+0x42>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007612:	615a      	str	r2, [r3, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2204      	movs	r2, #4
 8007618:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2200      	movs	r2, #0
 800761e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State= HAL_I2C_STATE_READY;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2220      	movs	r2, #32
 8007624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2200      	movs	r2, #0
 800762c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007630:	2301      	movs	r3, #1
 8007632:	e000      	b.n	8007636 <I2C_IsAcknowledgeFailed+0x44>
  }
  return HAL_OK;
 8007634:	2300      	movs	r3, #0
}
 8007636:	4618      	mov	r0, r3
 8007638:	370c      	adds	r7, #12
 800763a:	46bd      	mov	sp, r7
 800763c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007640:	4770      	bx	lr
	...

08007644 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b086      	sub	sp, #24
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d101      	bne.n	8007656 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007652:	2301      	movs	r3, #1
 8007654:	e22d      	b.n	8007ab2 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f003 0301 	and.w	r3, r3, #1
 800765e:	2b00      	cmp	r3, #0
 8007660:	d075      	beq.n	800774e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007662:	4ba3      	ldr	r3, [pc, #652]	; (80078f0 <HAL_RCC_OscConfig+0x2ac>)
 8007664:	689b      	ldr	r3, [r3, #8]
 8007666:	f003 030c 	and.w	r3, r3, #12
 800766a:	2b04      	cmp	r3, #4
 800766c:	d00c      	beq.n	8007688 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800766e:	4ba0      	ldr	r3, [pc, #640]	; (80078f0 <HAL_RCC_OscConfig+0x2ac>)
 8007670:	689b      	ldr	r3, [r3, #8]
 8007672:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007676:	2b08      	cmp	r3, #8
 8007678:	d112      	bne.n	80076a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800767a:	4b9d      	ldr	r3, [pc, #628]	; (80078f0 <HAL_RCC_OscConfig+0x2ac>)
 800767c:	685b      	ldr	r3, [r3, #4]
 800767e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007682:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007686:	d10b      	bne.n	80076a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007688:	4b99      	ldr	r3, [pc, #612]	; (80078f0 <HAL_RCC_OscConfig+0x2ac>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007690:	2b00      	cmp	r3, #0
 8007692:	d05b      	beq.n	800774c <HAL_RCC_OscConfig+0x108>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	685b      	ldr	r3, [r3, #4]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d157      	bne.n	800774c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800769c:	2301      	movs	r3, #1
 800769e:	e208      	b.n	8007ab2 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	685b      	ldr	r3, [r3, #4]
 80076a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076a8:	d106      	bne.n	80076b8 <HAL_RCC_OscConfig+0x74>
 80076aa:	4a91      	ldr	r2, [pc, #580]	; (80078f0 <HAL_RCC_OscConfig+0x2ac>)
 80076ac:	4b90      	ldr	r3, [pc, #576]	; (80078f0 <HAL_RCC_OscConfig+0x2ac>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80076b4:	6013      	str	r3, [r2, #0]
 80076b6:	e01d      	b.n	80076f4 <HAL_RCC_OscConfig+0xb0>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	685b      	ldr	r3, [r3, #4]
 80076bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80076c0:	d10c      	bne.n	80076dc <HAL_RCC_OscConfig+0x98>
 80076c2:	4a8b      	ldr	r2, [pc, #556]	; (80078f0 <HAL_RCC_OscConfig+0x2ac>)
 80076c4:	4b8a      	ldr	r3, [pc, #552]	; (80078f0 <HAL_RCC_OscConfig+0x2ac>)
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80076cc:	6013      	str	r3, [r2, #0]
 80076ce:	4a88      	ldr	r2, [pc, #544]	; (80078f0 <HAL_RCC_OscConfig+0x2ac>)
 80076d0:	4b87      	ldr	r3, [pc, #540]	; (80078f0 <HAL_RCC_OscConfig+0x2ac>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80076d8:	6013      	str	r3, [r2, #0]
 80076da:	e00b      	b.n	80076f4 <HAL_RCC_OscConfig+0xb0>
 80076dc:	4a84      	ldr	r2, [pc, #528]	; (80078f0 <HAL_RCC_OscConfig+0x2ac>)
 80076de:	4b84      	ldr	r3, [pc, #528]	; (80078f0 <HAL_RCC_OscConfig+0x2ac>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80076e6:	6013      	str	r3, [r2, #0]
 80076e8:	4a81      	ldr	r2, [pc, #516]	; (80078f0 <HAL_RCC_OscConfig+0x2ac>)
 80076ea:	4b81      	ldr	r3, [pc, #516]	; (80078f0 <HAL_RCC_OscConfig+0x2ac>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80076f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	685b      	ldr	r3, [r3, #4]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d013      	beq.n	8007724 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076fc:	f7fe fd76 	bl	80061ec <HAL_GetTick>
 8007700:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007702:	e008      	b.n	8007716 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007704:	f7fe fd72 	bl	80061ec <HAL_GetTick>
 8007708:	4602      	mov	r2, r0
 800770a:	693b      	ldr	r3, [r7, #16]
 800770c:	1ad3      	subs	r3, r2, r3
 800770e:	2b64      	cmp	r3, #100	; 0x64
 8007710:	d901      	bls.n	8007716 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007712:	2303      	movs	r3, #3
 8007714:	e1cd      	b.n	8007ab2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007716:	4b76      	ldr	r3, [pc, #472]	; (80078f0 <HAL_RCC_OscConfig+0x2ac>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800771e:	2b00      	cmp	r3, #0
 8007720:	d0f0      	beq.n	8007704 <HAL_RCC_OscConfig+0xc0>
 8007722:	e014      	b.n	800774e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007724:	f7fe fd62 	bl	80061ec <HAL_GetTick>
 8007728:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800772a:	e008      	b.n	800773e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800772c:	f7fe fd5e 	bl	80061ec <HAL_GetTick>
 8007730:	4602      	mov	r2, r0
 8007732:	693b      	ldr	r3, [r7, #16]
 8007734:	1ad3      	subs	r3, r2, r3
 8007736:	2b64      	cmp	r3, #100	; 0x64
 8007738:	d901      	bls.n	800773e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800773a:	2303      	movs	r3, #3
 800773c:	e1b9      	b.n	8007ab2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800773e:	4b6c      	ldr	r3, [pc, #432]	; (80078f0 <HAL_RCC_OscConfig+0x2ac>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007746:	2b00      	cmp	r3, #0
 8007748:	d1f0      	bne.n	800772c <HAL_RCC_OscConfig+0xe8>
 800774a:	e000      	b.n	800774e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800774c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f003 0302 	and.w	r3, r3, #2
 8007756:	2b00      	cmp	r3, #0
 8007758:	d063      	beq.n	8007822 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800775a:	4b65      	ldr	r3, [pc, #404]	; (80078f0 <HAL_RCC_OscConfig+0x2ac>)
 800775c:	689b      	ldr	r3, [r3, #8]
 800775e:	f003 030c 	and.w	r3, r3, #12
 8007762:	2b00      	cmp	r3, #0
 8007764:	d00b      	beq.n	800777e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007766:	4b62      	ldr	r3, [pc, #392]	; (80078f0 <HAL_RCC_OscConfig+0x2ac>)
 8007768:	689b      	ldr	r3, [r3, #8]
 800776a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800776e:	2b08      	cmp	r3, #8
 8007770:	d11c      	bne.n	80077ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007772:	4b5f      	ldr	r3, [pc, #380]	; (80078f0 <HAL_RCC_OscConfig+0x2ac>)
 8007774:	685b      	ldr	r3, [r3, #4]
 8007776:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800777a:	2b00      	cmp	r3, #0
 800777c:	d116      	bne.n	80077ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800777e:	4b5c      	ldr	r3, [pc, #368]	; (80078f0 <HAL_RCC_OscConfig+0x2ac>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f003 0302 	and.w	r3, r3, #2
 8007786:	2b00      	cmp	r3, #0
 8007788:	d005      	beq.n	8007796 <HAL_RCC_OscConfig+0x152>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	68db      	ldr	r3, [r3, #12]
 800778e:	2b01      	cmp	r3, #1
 8007790:	d001      	beq.n	8007796 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007792:	2301      	movs	r3, #1
 8007794:	e18d      	b.n	8007ab2 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007796:	4956      	ldr	r1, [pc, #344]	; (80078f0 <HAL_RCC_OscConfig+0x2ac>)
 8007798:	4b55      	ldr	r3, [pc, #340]	; (80078f0 <HAL_RCC_OscConfig+0x2ac>)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	691b      	ldr	r3, [r3, #16]
 80077a4:	00db      	lsls	r3, r3, #3
 80077a6:	4313      	orrs	r3, r2
 80077a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80077aa:	e03a      	b.n	8007822 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	68db      	ldr	r3, [r3, #12]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d020      	beq.n	80077f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80077b4:	4b4f      	ldr	r3, [pc, #316]	; (80078f4 <HAL_RCC_OscConfig+0x2b0>)
 80077b6:	2201      	movs	r2, #1
 80077b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077ba:	f7fe fd17 	bl	80061ec <HAL_GetTick>
 80077be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80077c0:	e008      	b.n	80077d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80077c2:	f7fe fd13 	bl	80061ec <HAL_GetTick>
 80077c6:	4602      	mov	r2, r0
 80077c8:	693b      	ldr	r3, [r7, #16]
 80077ca:	1ad3      	subs	r3, r2, r3
 80077cc:	2b02      	cmp	r3, #2
 80077ce:	d901      	bls.n	80077d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80077d0:	2303      	movs	r3, #3
 80077d2:	e16e      	b.n	8007ab2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80077d4:	4b46      	ldr	r3, [pc, #280]	; (80078f0 <HAL_RCC_OscConfig+0x2ac>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f003 0302 	and.w	r3, r3, #2
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d0f0      	beq.n	80077c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80077e0:	4943      	ldr	r1, [pc, #268]	; (80078f0 <HAL_RCC_OscConfig+0x2ac>)
 80077e2:	4b43      	ldr	r3, [pc, #268]	; (80078f0 <HAL_RCC_OscConfig+0x2ac>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	691b      	ldr	r3, [r3, #16]
 80077ee:	00db      	lsls	r3, r3, #3
 80077f0:	4313      	orrs	r3, r2
 80077f2:	600b      	str	r3, [r1, #0]
 80077f4:	e015      	b.n	8007822 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80077f6:	4b3f      	ldr	r3, [pc, #252]	; (80078f4 <HAL_RCC_OscConfig+0x2b0>)
 80077f8:	2200      	movs	r2, #0
 80077fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077fc:	f7fe fcf6 	bl	80061ec <HAL_GetTick>
 8007800:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007802:	e008      	b.n	8007816 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007804:	f7fe fcf2 	bl	80061ec <HAL_GetTick>
 8007808:	4602      	mov	r2, r0
 800780a:	693b      	ldr	r3, [r7, #16]
 800780c:	1ad3      	subs	r3, r2, r3
 800780e:	2b02      	cmp	r3, #2
 8007810:	d901      	bls.n	8007816 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007812:	2303      	movs	r3, #3
 8007814:	e14d      	b.n	8007ab2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007816:	4b36      	ldr	r3, [pc, #216]	; (80078f0 <HAL_RCC_OscConfig+0x2ac>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f003 0302 	and.w	r3, r3, #2
 800781e:	2b00      	cmp	r3, #0
 8007820:	d1f0      	bne.n	8007804 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f003 0308 	and.w	r3, r3, #8
 800782a:	2b00      	cmp	r3, #0
 800782c:	d030      	beq.n	8007890 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	695b      	ldr	r3, [r3, #20]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d016      	beq.n	8007864 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007836:	4b30      	ldr	r3, [pc, #192]	; (80078f8 <HAL_RCC_OscConfig+0x2b4>)
 8007838:	2201      	movs	r2, #1
 800783a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800783c:	f7fe fcd6 	bl	80061ec <HAL_GetTick>
 8007840:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007842:	e008      	b.n	8007856 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007844:	f7fe fcd2 	bl	80061ec <HAL_GetTick>
 8007848:	4602      	mov	r2, r0
 800784a:	693b      	ldr	r3, [r7, #16]
 800784c:	1ad3      	subs	r3, r2, r3
 800784e:	2b02      	cmp	r3, #2
 8007850:	d901      	bls.n	8007856 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007852:	2303      	movs	r3, #3
 8007854:	e12d      	b.n	8007ab2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007856:	4b26      	ldr	r3, [pc, #152]	; (80078f0 <HAL_RCC_OscConfig+0x2ac>)
 8007858:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800785a:	f003 0302 	and.w	r3, r3, #2
 800785e:	2b00      	cmp	r3, #0
 8007860:	d0f0      	beq.n	8007844 <HAL_RCC_OscConfig+0x200>
 8007862:	e015      	b.n	8007890 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007864:	4b24      	ldr	r3, [pc, #144]	; (80078f8 <HAL_RCC_OscConfig+0x2b4>)
 8007866:	2200      	movs	r2, #0
 8007868:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800786a:	f7fe fcbf 	bl	80061ec <HAL_GetTick>
 800786e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007870:	e008      	b.n	8007884 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007872:	f7fe fcbb 	bl	80061ec <HAL_GetTick>
 8007876:	4602      	mov	r2, r0
 8007878:	693b      	ldr	r3, [r7, #16]
 800787a:	1ad3      	subs	r3, r2, r3
 800787c:	2b02      	cmp	r3, #2
 800787e:	d901      	bls.n	8007884 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007880:	2303      	movs	r3, #3
 8007882:	e116      	b.n	8007ab2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007884:	4b1a      	ldr	r3, [pc, #104]	; (80078f0 <HAL_RCC_OscConfig+0x2ac>)
 8007886:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007888:	f003 0302 	and.w	r3, r3, #2
 800788c:	2b00      	cmp	r3, #0
 800788e:	d1f0      	bne.n	8007872 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f003 0304 	and.w	r3, r3, #4
 8007898:	2b00      	cmp	r3, #0
 800789a:	f000 80a0 	beq.w	80079de <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800789e:	2300      	movs	r3, #0
 80078a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80078a2:	4b13      	ldr	r3, [pc, #76]	; (80078f0 <HAL_RCC_OscConfig+0x2ac>)
 80078a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d10f      	bne.n	80078ce <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80078ae:	2300      	movs	r3, #0
 80078b0:	60fb      	str	r3, [r7, #12]
 80078b2:	4a0f      	ldr	r2, [pc, #60]	; (80078f0 <HAL_RCC_OscConfig+0x2ac>)
 80078b4:	4b0e      	ldr	r3, [pc, #56]	; (80078f0 <HAL_RCC_OscConfig+0x2ac>)
 80078b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078bc:	6413      	str	r3, [r2, #64]	; 0x40
 80078be:	4b0c      	ldr	r3, [pc, #48]	; (80078f0 <HAL_RCC_OscConfig+0x2ac>)
 80078c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078c6:	60fb      	str	r3, [r7, #12]
 80078c8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80078ca:	2301      	movs	r3, #1
 80078cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80078ce:	4b0b      	ldr	r3, [pc, #44]	; (80078fc <HAL_RCC_OscConfig+0x2b8>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d121      	bne.n	800791e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80078da:	4a08      	ldr	r2, [pc, #32]	; (80078fc <HAL_RCC_OscConfig+0x2b8>)
 80078dc:	4b07      	ldr	r3, [pc, #28]	; (80078fc <HAL_RCC_OscConfig+0x2b8>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80078e6:	f7fe fc81 	bl	80061ec <HAL_GetTick>
 80078ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80078ec:	e011      	b.n	8007912 <HAL_RCC_OscConfig+0x2ce>
 80078ee:	bf00      	nop
 80078f0:	40023800 	.word	0x40023800
 80078f4:	42470000 	.word	0x42470000
 80078f8:	42470e80 	.word	0x42470e80
 80078fc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007900:	f7fe fc74 	bl	80061ec <HAL_GetTick>
 8007904:	4602      	mov	r2, r0
 8007906:	693b      	ldr	r3, [r7, #16]
 8007908:	1ad3      	subs	r3, r2, r3
 800790a:	2b02      	cmp	r3, #2
 800790c:	d901      	bls.n	8007912 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800790e:	2303      	movs	r3, #3
 8007910:	e0cf      	b.n	8007ab2 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007912:	4b6a      	ldr	r3, [pc, #424]	; (8007abc <HAL_RCC_OscConfig+0x478>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800791a:	2b00      	cmp	r3, #0
 800791c:	d0f0      	beq.n	8007900 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	689b      	ldr	r3, [r3, #8]
 8007922:	2b01      	cmp	r3, #1
 8007924:	d106      	bne.n	8007934 <HAL_RCC_OscConfig+0x2f0>
 8007926:	4a66      	ldr	r2, [pc, #408]	; (8007ac0 <HAL_RCC_OscConfig+0x47c>)
 8007928:	4b65      	ldr	r3, [pc, #404]	; (8007ac0 <HAL_RCC_OscConfig+0x47c>)
 800792a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800792c:	f043 0301 	orr.w	r3, r3, #1
 8007930:	6713      	str	r3, [r2, #112]	; 0x70
 8007932:	e01c      	b.n	800796e <HAL_RCC_OscConfig+0x32a>
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	689b      	ldr	r3, [r3, #8]
 8007938:	2b05      	cmp	r3, #5
 800793a:	d10c      	bne.n	8007956 <HAL_RCC_OscConfig+0x312>
 800793c:	4a60      	ldr	r2, [pc, #384]	; (8007ac0 <HAL_RCC_OscConfig+0x47c>)
 800793e:	4b60      	ldr	r3, [pc, #384]	; (8007ac0 <HAL_RCC_OscConfig+0x47c>)
 8007940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007942:	f043 0304 	orr.w	r3, r3, #4
 8007946:	6713      	str	r3, [r2, #112]	; 0x70
 8007948:	4a5d      	ldr	r2, [pc, #372]	; (8007ac0 <HAL_RCC_OscConfig+0x47c>)
 800794a:	4b5d      	ldr	r3, [pc, #372]	; (8007ac0 <HAL_RCC_OscConfig+0x47c>)
 800794c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800794e:	f043 0301 	orr.w	r3, r3, #1
 8007952:	6713      	str	r3, [r2, #112]	; 0x70
 8007954:	e00b      	b.n	800796e <HAL_RCC_OscConfig+0x32a>
 8007956:	4a5a      	ldr	r2, [pc, #360]	; (8007ac0 <HAL_RCC_OscConfig+0x47c>)
 8007958:	4b59      	ldr	r3, [pc, #356]	; (8007ac0 <HAL_RCC_OscConfig+0x47c>)
 800795a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800795c:	f023 0301 	bic.w	r3, r3, #1
 8007960:	6713      	str	r3, [r2, #112]	; 0x70
 8007962:	4a57      	ldr	r2, [pc, #348]	; (8007ac0 <HAL_RCC_OscConfig+0x47c>)
 8007964:	4b56      	ldr	r3, [pc, #344]	; (8007ac0 <HAL_RCC_OscConfig+0x47c>)
 8007966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007968:	f023 0304 	bic.w	r3, r3, #4
 800796c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	689b      	ldr	r3, [r3, #8]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d015      	beq.n	80079a2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007976:	f7fe fc39 	bl	80061ec <HAL_GetTick>
 800797a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800797c:	e00a      	b.n	8007994 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800797e:	f7fe fc35 	bl	80061ec <HAL_GetTick>
 8007982:	4602      	mov	r2, r0
 8007984:	693b      	ldr	r3, [r7, #16]
 8007986:	1ad3      	subs	r3, r2, r3
 8007988:	f241 3288 	movw	r2, #5000	; 0x1388
 800798c:	4293      	cmp	r3, r2
 800798e:	d901      	bls.n	8007994 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8007990:	2303      	movs	r3, #3
 8007992:	e08e      	b.n	8007ab2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007994:	4b4a      	ldr	r3, [pc, #296]	; (8007ac0 <HAL_RCC_OscConfig+0x47c>)
 8007996:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007998:	f003 0302 	and.w	r3, r3, #2
 800799c:	2b00      	cmp	r3, #0
 800799e:	d0ee      	beq.n	800797e <HAL_RCC_OscConfig+0x33a>
 80079a0:	e014      	b.n	80079cc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80079a2:	f7fe fc23 	bl	80061ec <HAL_GetTick>
 80079a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80079a8:	e00a      	b.n	80079c0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80079aa:	f7fe fc1f 	bl	80061ec <HAL_GetTick>
 80079ae:	4602      	mov	r2, r0
 80079b0:	693b      	ldr	r3, [r7, #16]
 80079b2:	1ad3      	subs	r3, r2, r3
 80079b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d901      	bls.n	80079c0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80079bc:	2303      	movs	r3, #3
 80079be:	e078      	b.n	8007ab2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80079c0:	4b3f      	ldr	r3, [pc, #252]	; (8007ac0 <HAL_RCC_OscConfig+0x47c>)
 80079c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079c4:	f003 0302 	and.w	r3, r3, #2
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d1ee      	bne.n	80079aa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80079cc:	7dfb      	ldrb	r3, [r7, #23]
 80079ce:	2b01      	cmp	r3, #1
 80079d0:	d105      	bne.n	80079de <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80079d2:	4a3b      	ldr	r2, [pc, #236]	; (8007ac0 <HAL_RCC_OscConfig+0x47c>)
 80079d4:	4b3a      	ldr	r3, [pc, #232]	; (8007ac0 <HAL_RCC_OscConfig+0x47c>)
 80079d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80079dc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	699b      	ldr	r3, [r3, #24]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d064      	beq.n	8007ab0 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80079e6:	4b36      	ldr	r3, [pc, #216]	; (8007ac0 <HAL_RCC_OscConfig+0x47c>)
 80079e8:	689b      	ldr	r3, [r3, #8]
 80079ea:	f003 030c 	and.w	r3, r3, #12
 80079ee:	2b08      	cmp	r3, #8
 80079f0:	d05c      	beq.n	8007aac <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	699b      	ldr	r3, [r3, #24]
 80079f6:	2b02      	cmp	r3, #2
 80079f8:	d141      	bne.n	8007a7e <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80079fa:	4b32      	ldr	r3, [pc, #200]	; (8007ac4 <HAL_RCC_OscConfig+0x480>)
 80079fc:	2200      	movs	r2, #0
 80079fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a00:	f7fe fbf4 	bl	80061ec <HAL_GetTick>
 8007a04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a06:	e008      	b.n	8007a1a <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007a08:	f7fe fbf0 	bl	80061ec <HAL_GetTick>
 8007a0c:	4602      	mov	r2, r0
 8007a0e:	693b      	ldr	r3, [r7, #16]
 8007a10:	1ad3      	subs	r3, r2, r3
 8007a12:	2b02      	cmp	r3, #2
 8007a14:	d901      	bls.n	8007a1a <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8007a16:	2303      	movs	r3, #3
 8007a18:	e04b      	b.n	8007ab2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a1a:	4b29      	ldr	r3, [pc, #164]	; (8007ac0 <HAL_RCC_OscConfig+0x47c>)
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d1f0      	bne.n	8007a08 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007a26:	4926      	ldr	r1, [pc, #152]	; (8007ac0 <HAL_RCC_OscConfig+0x47c>)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	69da      	ldr	r2, [r3, #28]
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6a1b      	ldr	r3, [r3, #32]
 8007a30:	431a      	orrs	r2, r3
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a36:	019b      	lsls	r3, r3, #6
 8007a38:	431a      	orrs	r2, r3
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a3e:	085b      	lsrs	r3, r3, #1
 8007a40:	3b01      	subs	r3, #1
 8007a42:	041b      	lsls	r3, r3, #16
 8007a44:	431a      	orrs	r2, r3
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a4a:	061b      	lsls	r3, r3, #24
 8007a4c:	4313      	orrs	r3, r2
 8007a4e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007a50:	4b1c      	ldr	r3, [pc, #112]	; (8007ac4 <HAL_RCC_OscConfig+0x480>)
 8007a52:	2201      	movs	r2, #1
 8007a54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a56:	f7fe fbc9 	bl	80061ec <HAL_GetTick>
 8007a5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a5c:	e008      	b.n	8007a70 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007a5e:	f7fe fbc5 	bl	80061ec <HAL_GetTick>
 8007a62:	4602      	mov	r2, r0
 8007a64:	693b      	ldr	r3, [r7, #16]
 8007a66:	1ad3      	subs	r3, r2, r3
 8007a68:	2b02      	cmp	r3, #2
 8007a6a:	d901      	bls.n	8007a70 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8007a6c:	2303      	movs	r3, #3
 8007a6e:	e020      	b.n	8007ab2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a70:	4b13      	ldr	r3, [pc, #76]	; (8007ac0 <HAL_RCC_OscConfig+0x47c>)
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d0f0      	beq.n	8007a5e <HAL_RCC_OscConfig+0x41a>
 8007a7c:	e018      	b.n	8007ab0 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a7e:	4b11      	ldr	r3, [pc, #68]	; (8007ac4 <HAL_RCC_OscConfig+0x480>)
 8007a80:	2200      	movs	r2, #0
 8007a82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a84:	f7fe fbb2 	bl	80061ec <HAL_GetTick>
 8007a88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a8a:	e008      	b.n	8007a9e <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007a8c:	f7fe fbae 	bl	80061ec <HAL_GetTick>
 8007a90:	4602      	mov	r2, r0
 8007a92:	693b      	ldr	r3, [r7, #16]
 8007a94:	1ad3      	subs	r3, r2, r3
 8007a96:	2b02      	cmp	r3, #2
 8007a98:	d901      	bls.n	8007a9e <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8007a9a:	2303      	movs	r3, #3
 8007a9c:	e009      	b.n	8007ab2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a9e:	4b08      	ldr	r3, [pc, #32]	; (8007ac0 <HAL_RCC_OscConfig+0x47c>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d1f0      	bne.n	8007a8c <HAL_RCC_OscConfig+0x448>
 8007aaa:	e001      	b.n	8007ab0 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8007aac:	2301      	movs	r3, #1
 8007aae:	e000      	b.n	8007ab2 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8007ab0:	2300      	movs	r3, #0
}
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	3718      	adds	r7, #24
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bd80      	pop	{r7, pc}
 8007aba:	bf00      	nop
 8007abc:	40007000 	.word	0x40007000
 8007ac0:	40023800 	.word	0x40023800
 8007ac4:	42470060 	.word	0x42470060

08007ac8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b084      	sub	sp, #16
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
 8007ad0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d101      	bne.n	8007adc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007ad8:	2301      	movs	r3, #1
 8007ada:	e0ca      	b.n	8007c72 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007adc:	4b67      	ldr	r3, [pc, #412]	; (8007c7c <HAL_RCC_ClockConfig+0x1b4>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f003 020f 	and.w	r2, r3, #15
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	429a      	cmp	r2, r3
 8007ae8:	d20c      	bcs.n	8007b04 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007aea:	4b64      	ldr	r3, [pc, #400]	; (8007c7c <HAL_RCC_ClockConfig+0x1b4>)
 8007aec:	683a      	ldr	r2, [r7, #0]
 8007aee:	b2d2      	uxtb	r2, r2
 8007af0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007af2:	4b62      	ldr	r3, [pc, #392]	; (8007c7c <HAL_RCC_ClockConfig+0x1b4>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f003 020f 	and.w	r2, r3, #15
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	429a      	cmp	r2, r3
 8007afe:	d001      	beq.n	8007b04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007b00:	2301      	movs	r3, #1
 8007b02:	e0b6      	b.n	8007c72 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f003 0302 	and.w	r3, r3, #2
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d020      	beq.n	8007b52 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f003 0304 	and.w	r3, r3, #4
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d005      	beq.n	8007b28 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007b1c:	4a58      	ldr	r2, [pc, #352]	; (8007c80 <HAL_RCC_ClockConfig+0x1b8>)
 8007b1e:	4b58      	ldr	r3, [pc, #352]	; (8007c80 <HAL_RCC_ClockConfig+0x1b8>)
 8007b20:	689b      	ldr	r3, [r3, #8]
 8007b22:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007b26:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f003 0308 	and.w	r3, r3, #8
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d005      	beq.n	8007b40 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007b34:	4a52      	ldr	r2, [pc, #328]	; (8007c80 <HAL_RCC_ClockConfig+0x1b8>)
 8007b36:	4b52      	ldr	r3, [pc, #328]	; (8007c80 <HAL_RCC_ClockConfig+0x1b8>)
 8007b38:	689b      	ldr	r3, [r3, #8]
 8007b3a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007b3e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007b40:	494f      	ldr	r1, [pc, #316]	; (8007c80 <HAL_RCC_ClockConfig+0x1b8>)
 8007b42:	4b4f      	ldr	r3, [pc, #316]	; (8007c80 <HAL_RCC_ClockConfig+0x1b8>)
 8007b44:	689b      	ldr	r3, [r3, #8]
 8007b46:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	689b      	ldr	r3, [r3, #8]
 8007b4e:	4313      	orrs	r3, r2
 8007b50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f003 0301 	and.w	r3, r3, #1
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d044      	beq.n	8007be8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	685b      	ldr	r3, [r3, #4]
 8007b62:	2b01      	cmp	r3, #1
 8007b64:	d107      	bne.n	8007b76 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007b66:	4b46      	ldr	r3, [pc, #280]	; (8007c80 <HAL_RCC_ClockConfig+0x1b8>)
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d119      	bne.n	8007ba6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007b72:	2301      	movs	r3, #1
 8007b74:	e07d      	b.n	8007c72 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	685b      	ldr	r3, [r3, #4]
 8007b7a:	2b02      	cmp	r3, #2
 8007b7c:	d003      	beq.n	8007b86 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007b82:	2b03      	cmp	r3, #3
 8007b84:	d107      	bne.n	8007b96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b86:	4b3e      	ldr	r3, [pc, #248]	; (8007c80 <HAL_RCC_ClockConfig+0x1b8>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d109      	bne.n	8007ba6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007b92:	2301      	movs	r3, #1
 8007b94:	e06d      	b.n	8007c72 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b96:	4b3a      	ldr	r3, [pc, #232]	; (8007c80 <HAL_RCC_ClockConfig+0x1b8>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f003 0302 	and.w	r3, r3, #2
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d101      	bne.n	8007ba6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	e065      	b.n	8007c72 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007ba6:	4936      	ldr	r1, [pc, #216]	; (8007c80 <HAL_RCC_ClockConfig+0x1b8>)
 8007ba8:	4b35      	ldr	r3, [pc, #212]	; (8007c80 <HAL_RCC_ClockConfig+0x1b8>)
 8007baa:	689b      	ldr	r3, [r3, #8]
 8007bac:	f023 0203 	bic.w	r2, r3, #3
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	685b      	ldr	r3, [r3, #4]
 8007bb4:	4313      	orrs	r3, r2
 8007bb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007bb8:	f7fe fb18 	bl	80061ec <HAL_GetTick>
 8007bbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007bbe:	e00a      	b.n	8007bd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007bc0:	f7fe fb14 	bl	80061ec <HAL_GetTick>
 8007bc4:	4602      	mov	r2, r0
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	1ad3      	subs	r3, r2, r3
 8007bca:	f241 3288 	movw	r2, #5000	; 0x1388
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d901      	bls.n	8007bd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007bd2:	2303      	movs	r3, #3
 8007bd4:	e04d      	b.n	8007c72 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007bd6:	4b2a      	ldr	r3, [pc, #168]	; (8007c80 <HAL_RCC_ClockConfig+0x1b8>)
 8007bd8:	689b      	ldr	r3, [r3, #8]
 8007bda:	f003 020c 	and.w	r2, r3, #12
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	685b      	ldr	r3, [r3, #4]
 8007be2:	009b      	lsls	r3, r3, #2
 8007be4:	429a      	cmp	r2, r3
 8007be6:	d1eb      	bne.n	8007bc0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007be8:	4b24      	ldr	r3, [pc, #144]	; (8007c7c <HAL_RCC_ClockConfig+0x1b4>)
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f003 020f 	and.w	r2, r3, #15
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	429a      	cmp	r2, r3
 8007bf4:	d90c      	bls.n	8007c10 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007bf6:	4b21      	ldr	r3, [pc, #132]	; (8007c7c <HAL_RCC_ClockConfig+0x1b4>)
 8007bf8:	683a      	ldr	r2, [r7, #0]
 8007bfa:	b2d2      	uxtb	r2, r2
 8007bfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007bfe:	4b1f      	ldr	r3, [pc, #124]	; (8007c7c <HAL_RCC_ClockConfig+0x1b4>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f003 020f 	and.w	r2, r3, #15
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	429a      	cmp	r2, r3
 8007c0a:	d001      	beq.n	8007c10 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	e030      	b.n	8007c72 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f003 0304 	and.w	r3, r3, #4
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d008      	beq.n	8007c2e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007c1c:	4918      	ldr	r1, [pc, #96]	; (8007c80 <HAL_RCC_ClockConfig+0x1b8>)
 8007c1e:	4b18      	ldr	r3, [pc, #96]	; (8007c80 <HAL_RCC_ClockConfig+0x1b8>)
 8007c20:	689b      	ldr	r3, [r3, #8]
 8007c22:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	68db      	ldr	r3, [r3, #12]
 8007c2a:	4313      	orrs	r3, r2
 8007c2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f003 0308 	and.w	r3, r3, #8
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d009      	beq.n	8007c4e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007c3a:	4911      	ldr	r1, [pc, #68]	; (8007c80 <HAL_RCC_ClockConfig+0x1b8>)
 8007c3c:	4b10      	ldr	r3, [pc, #64]	; (8007c80 <HAL_RCC_ClockConfig+0x1b8>)
 8007c3e:	689b      	ldr	r3, [r3, #8]
 8007c40:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	691b      	ldr	r3, [r3, #16]
 8007c48:	00db      	lsls	r3, r3, #3
 8007c4a:	4313      	orrs	r3, r2
 8007c4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007c4e:	f000 f81d 	bl	8007c8c <HAL_RCC_GetSysClockFreq>
 8007c52:	4601      	mov	r1, r0
 8007c54:	4b0a      	ldr	r3, [pc, #40]	; (8007c80 <HAL_RCC_ClockConfig+0x1b8>)
 8007c56:	689b      	ldr	r3, [r3, #8]
 8007c58:	091b      	lsrs	r3, r3, #4
 8007c5a:	f003 030f 	and.w	r3, r3, #15
 8007c5e:	4a09      	ldr	r2, [pc, #36]	; (8007c84 <HAL_RCC_ClockConfig+0x1bc>)
 8007c60:	5cd3      	ldrb	r3, [r2, r3]
 8007c62:	fa21 f303 	lsr.w	r3, r1, r3
 8007c66:	4a08      	ldr	r2, [pc, #32]	; (8007c88 <HAL_RCC_ClockConfig+0x1c0>)
 8007c68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8007c6a:	2000      	movs	r0, #0
 8007c6c:	f004 fb82 	bl	800c374 <HAL_InitTick>

  return HAL_OK;
 8007c70:	2300      	movs	r3, #0
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	3710      	adds	r7, #16
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bd80      	pop	{r7, pc}
 8007c7a:	bf00      	nop
 8007c7c:	40023c00 	.word	0x40023c00
 8007c80:	40023800 	.word	0x40023800
 8007c84:	0800d130 	.word	0x0800d130
 8007c88:	20000038 	.word	0x20000038

08007c8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c90:	b08f      	sub	sp, #60	; 0x3c
 8007c92:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007c94:	2300      	movs	r3, #0
 8007c96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c98:	2300      	movs	r3, #0
 8007c9a:	637b      	str	r3, [r7, #52]	; 0x34
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t sysclockfreq = 0U;
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	633b      	str	r3, [r7, #48]	; 0x30

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007ca4:	4b62      	ldr	r3, [pc, #392]	; (8007e30 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007ca6:	689b      	ldr	r3, [r3, #8]
 8007ca8:	f003 030c 	and.w	r3, r3, #12
 8007cac:	2b04      	cmp	r3, #4
 8007cae:	d007      	beq.n	8007cc0 <HAL_RCC_GetSysClockFreq+0x34>
 8007cb0:	2b08      	cmp	r3, #8
 8007cb2:	d008      	beq.n	8007cc6 <HAL_RCC_GetSysClockFreq+0x3a>
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	f040 80b2 	bne.w	8007e1e <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007cba:	4b5e      	ldr	r3, [pc, #376]	; (8007e34 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8007cbc:	633b      	str	r3, [r7, #48]	; 0x30
       break;
 8007cbe:	e0b1      	b.n	8007e24 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007cc0:	4b5d      	ldr	r3, [pc, #372]	; (8007e38 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8007cc2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8007cc4:	e0ae      	b.n	8007e24 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007cc6:	4b5a      	ldr	r3, [pc, #360]	; (8007e30 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007cc8:	685b      	ldr	r3, [r3, #4]
 8007cca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007cce:	62fb      	str	r3, [r7, #44]	; 0x2c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007cd0:	4b57      	ldr	r3, [pc, #348]	; (8007e30 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007cd2:	685b      	ldr	r3, [r3, #4]
 8007cd4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d04e      	beq.n	8007d7a <HAL_RCC_GetSysClockFreq+0xee>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007cdc:	4b54      	ldr	r3, [pc, #336]	; (8007e30 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007cde:	685b      	ldr	r3, [r3, #4]
 8007ce0:	099b      	lsrs	r3, r3, #6
 8007ce2:	f04f 0400 	mov.w	r4, #0
 8007ce6:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007cea:	f04f 0200 	mov.w	r2, #0
 8007cee:	ea01 0103 	and.w	r1, r1, r3
 8007cf2:	ea02 0204 	and.w	r2, r2, r4
 8007cf6:	460b      	mov	r3, r1
 8007cf8:	4614      	mov	r4, r2
 8007cfa:	0160      	lsls	r0, r4, #5
 8007cfc:	6278      	str	r0, [r7, #36]	; 0x24
 8007cfe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007d00:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8007d04:	6278      	str	r0, [r7, #36]	; 0x24
 8007d06:	015b      	lsls	r3, r3, #5
 8007d08:	623b      	str	r3, [r7, #32]
 8007d0a:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8007d0e:	1a5b      	subs	r3, r3, r1
 8007d10:	eb64 0402 	sbc.w	r4, r4, r2
 8007d14:	ea4f 1984 	mov.w	r9, r4, lsl #6
 8007d18:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 8007d1c:	ea4f 1883 	mov.w	r8, r3, lsl #6
 8007d20:	ebb8 0803 	subs.w	r8, r8, r3
 8007d24:	eb69 0904 	sbc.w	r9, r9, r4
 8007d28:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007d2c:	61fb      	str	r3, [r7, #28]
 8007d2e:	69fb      	ldr	r3, [r7, #28]
 8007d30:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007d34:	61fb      	str	r3, [r7, #28]
 8007d36:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8007d3a:	61bb      	str	r3, [r7, #24]
 8007d3c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8007d40:	eb18 0801 	adds.w	r8, r8, r1
 8007d44:	eb49 0902 	adc.w	r9, r9, r2
 8007d48:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8007d4c:	617b      	str	r3, [r7, #20]
 8007d4e:	697b      	ldr	r3, [r7, #20]
 8007d50:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8007d54:	617b      	str	r3, [r7, #20]
 8007d56:	ea4f 2348 	mov.w	r3, r8, lsl #9
 8007d5a:	613b      	str	r3, [r7, #16]
 8007d5c:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8007d60:	4640      	mov	r0, r8
 8007d62:	4649      	mov	r1, r9
 8007d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d66:	f04f 0400 	mov.w	r4, #0
 8007d6a:	461a      	mov	r2, r3
 8007d6c:	4623      	mov	r3, r4
 8007d6e:	f7f8 fa8f 	bl	8000290 <__aeabi_uldivmod>
 8007d72:	4603      	mov	r3, r0
 8007d74:	460c      	mov	r4, r1
 8007d76:	637b      	str	r3, [r7, #52]	; 0x34
 8007d78:	e043      	b.n	8007e02 <HAL_RCC_GetSysClockFreq+0x176>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007d7a:	4b2d      	ldr	r3, [pc, #180]	; (8007e30 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007d7c:	685b      	ldr	r3, [r3, #4]
 8007d7e:	099b      	lsrs	r3, r3, #6
 8007d80:	f04f 0400 	mov.w	r4, #0
 8007d84:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007d88:	f04f 0200 	mov.w	r2, #0
 8007d8c:	ea01 0103 	and.w	r1, r1, r3
 8007d90:	ea02 0204 	and.w	r2, r2, r4
 8007d94:	460b      	mov	r3, r1
 8007d96:	4614      	mov	r4, r2
 8007d98:	0160      	lsls	r0, r4, #5
 8007d9a:	60f8      	str	r0, [r7, #12]
 8007d9c:	68f8      	ldr	r0, [r7, #12]
 8007d9e:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8007da2:	60f8      	str	r0, [r7, #12]
 8007da4:	015b      	lsls	r3, r3, #5
 8007da6:	60bb      	str	r3, [r7, #8]
 8007da8:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8007dac:	1a5b      	subs	r3, r3, r1
 8007dae:	eb64 0402 	sbc.w	r4, r4, r2
 8007db2:	01a6      	lsls	r6, r4, #6
 8007db4:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 8007db8:	019d      	lsls	r5, r3, #6
 8007dba:	1aed      	subs	r5, r5, r3
 8007dbc:	eb66 0604 	sbc.w	r6, r6, r4
 8007dc0:	00f3      	lsls	r3, r6, #3
 8007dc2:	607b      	str	r3, [r7, #4]
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8007dca:	607b      	str	r3, [r7, #4]
 8007dcc:	00eb      	lsls	r3, r5, #3
 8007dce:	603b      	str	r3, [r7, #0]
 8007dd0:	e897 0060 	ldmia.w	r7, {r5, r6}
 8007dd4:	186d      	adds	r5, r5, r1
 8007dd6:	eb46 0602 	adc.w	r6, r6, r2
 8007dda:	ea4f 2b86 	mov.w	fp, r6, lsl #10
 8007dde:	ea4b 5b95 	orr.w	fp, fp, r5, lsr #22
 8007de2:	ea4f 2a85 	mov.w	sl, r5, lsl #10
 8007de6:	4655      	mov	r5, sl
 8007de8:	465e      	mov	r6, fp
 8007dea:	4628      	mov	r0, r5
 8007dec:	4631      	mov	r1, r6
 8007dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007df0:	f04f 0400 	mov.w	r4, #0
 8007df4:	461a      	mov	r2, r3
 8007df6:	4623      	mov	r3, r4
 8007df8:	f7f8 fa4a 	bl	8000290 <__aeabi_uldivmod>
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	460c      	mov	r4, r1
 8007e00:	637b      	str	r3, [r7, #52]	; 0x34
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007e02:	4b0b      	ldr	r3, [pc, #44]	; (8007e30 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007e04:	685b      	ldr	r3, [r3, #4]
 8007e06:	0c1b      	lsrs	r3, r3, #16
 8007e08:	f003 0303 	and.w	r3, r3, #3
 8007e0c:	3301      	adds	r3, #1
 8007e0e:	005b      	lsls	r3, r3, #1
 8007e10:	62bb      	str	r3, [r7, #40]	; 0x28

      sysclockfreq = pllvco/pllp;
 8007e12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e1a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8007e1c:	e002      	b.n	8007e24 <HAL_RCC_GetSysClockFreq+0x198>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007e1e:	4b05      	ldr	r3, [pc, #20]	; (8007e34 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8007e20:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8007e22:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8007e26:	4618      	mov	r0, r3
 8007e28:	373c      	adds	r7, #60	; 0x3c
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e30:	40023800 	.word	0x40023800
 8007e34:	00f42400 	.word	0x00f42400
 8007e38:	007a1200 	.word	0x007a1200

08007e3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007e40:	4b03      	ldr	r3, [pc, #12]	; (8007e50 <HAL_RCC_GetHCLKFreq+0x14>)
 8007e42:	681b      	ldr	r3, [r3, #0]
}
 8007e44:	4618      	mov	r0, r3
 8007e46:	46bd      	mov	sp, r7
 8007e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4c:	4770      	bx	lr
 8007e4e:	bf00      	nop
 8007e50:	20000038 	.word	0x20000038

08007e54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007e58:	f7ff fff0 	bl	8007e3c <HAL_RCC_GetHCLKFreq>
 8007e5c:	4601      	mov	r1, r0
 8007e5e:	4b05      	ldr	r3, [pc, #20]	; (8007e74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007e60:	689b      	ldr	r3, [r3, #8]
 8007e62:	0a9b      	lsrs	r3, r3, #10
 8007e64:	f003 0307 	and.w	r3, r3, #7
 8007e68:	4a03      	ldr	r2, [pc, #12]	; (8007e78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007e6a:	5cd3      	ldrb	r3, [r2, r3]
 8007e6c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	bd80      	pop	{r7, pc}
 8007e74:	40023800 	.word	0x40023800
 8007e78:	0800d140 	.word	0x0800d140

08007e7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007e80:	f7ff ffdc 	bl	8007e3c <HAL_RCC_GetHCLKFreq>
 8007e84:	4601      	mov	r1, r0
 8007e86:	4b05      	ldr	r3, [pc, #20]	; (8007e9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007e88:	689b      	ldr	r3, [r3, #8]
 8007e8a:	0b5b      	lsrs	r3, r3, #13
 8007e8c:	f003 0307 	and.w	r3, r3, #7
 8007e90:	4a03      	ldr	r2, [pc, #12]	; (8007ea0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007e92:	5cd3      	ldrb	r3, [r2, r3]
 8007e94:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007e98:	4618      	mov	r0, r3
 8007e9a:	bd80      	pop	{r7, pc}
 8007e9c:	40023800 	.word	0x40023800
 8007ea0:	0800d140 	.word	0x0800d140

08007ea4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b083      	sub	sp, #12
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
 8007eac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	220f      	movs	r2, #15
 8007eb2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007eb4:	4b12      	ldr	r3, [pc, #72]	; (8007f00 <HAL_RCC_GetClockConfig+0x5c>)
 8007eb6:	689b      	ldr	r3, [r3, #8]
 8007eb8:	f003 0203 	and.w	r2, r3, #3
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007ec0:	4b0f      	ldr	r3, [pc, #60]	; (8007f00 <HAL_RCC_GetClockConfig+0x5c>)
 8007ec2:	689b      	ldr	r3, [r3, #8]
 8007ec4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007ecc:	4b0c      	ldr	r3, [pc, #48]	; (8007f00 <HAL_RCC_GetClockConfig+0x5c>)
 8007ece:	689b      	ldr	r3, [r3, #8]
 8007ed0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007ed8:	4b09      	ldr	r3, [pc, #36]	; (8007f00 <HAL_RCC_GetClockConfig+0x5c>)
 8007eda:	689b      	ldr	r3, [r3, #8]
 8007edc:	08db      	lsrs	r3, r3, #3
 8007ede:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007ee6:	4b07      	ldr	r3, [pc, #28]	; (8007f04 <HAL_RCC_GetClockConfig+0x60>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f003 020f 	and.w	r2, r3, #15
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	601a      	str	r2, [r3, #0]
}
 8007ef2:	bf00      	nop
 8007ef4:	370c      	adds	r7, #12
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efc:	4770      	bx	lr
 8007efe:	bf00      	nop
 8007f00:	40023800 	.word	0x40023800
 8007f04:	40023c00 	.word	0x40023c00

08007f08 <HAL_TIM_Base_Init>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b082      	sub	sp, #8
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d101      	bne.n	8007f1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007f16:	2301      	movs	r3, #1
 8007f18:	e01d      	b.n	8007f56 <HAL_TIM_Base_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007f20:	b2db      	uxtb	r3, r3
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d106      	bne.n	8007f34 <HAL_TIM_Base_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2200      	movs	r2, #0
 8007f2a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	f000 f815 	bl	8007f5e <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2202      	movs	r2, #2
 8007f38:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681a      	ldr	r2, [r3, #0]
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	3304      	adds	r3, #4
 8007f44:	4619      	mov	r1, r3
 8007f46:	4610      	mov	r0, r2
 8007f48:	f000 fb60 	bl	800860c <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2201      	movs	r2, #1
 8007f50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 8007f54:	2300      	movs	r3, #0
}
 8007f56:	4618      	mov	r0, r3
 8007f58:	3708      	adds	r7, #8
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}

08007f5e <HAL_TIM_Base_MspInit>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007f5e:	b480      	push	{r7}
 8007f60:	b083      	sub	sp, #12
 8007f62:	af00      	add	r7, sp, #0
 8007f64:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007f66:	bf00      	nop
 8007f68:	370c      	adds	r7, #12
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f70:	4770      	bx	lr

08007f72 <HAL_TIM_Base_Start>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007f72:	b480      	push	{r7}
 8007f74:	b083      	sub	sp, #12
 8007f76:	af00      	add	r7, sp, #0
 8007f78:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2202      	movs	r2, #2
 8007f7e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	687a      	ldr	r2, [r7, #4]
 8007f88:	6812      	ldr	r2, [r2, #0]
 8007f8a:	6812      	ldr	r2, [r2, #0]
 8007f8c:	f042 0201 	orr.w	r2, r2, #1
 8007f90:	601a      	str	r2, [r3, #0]
  
  /* Change the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2201      	movs	r2, #1
 8007f96:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Return function status */
  return HAL_OK;
 8007f9a:	2300      	movs	r3, #0
}
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	370c      	adds	r7, #12
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa6:	4770      	bx	lr

08007fa8 <HAL_TIM_Base_Start_IT>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007fa8:	b480      	push	{r7}
 8007faa:	b083      	sub	sp, #12
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	687a      	ldr	r2, [r7, #4]
 8007fb6:	6812      	ldr	r2, [r2, #0]
 8007fb8:	68d2      	ldr	r2, [r2, #12]
 8007fba:	f042 0201 	orr.w	r2, r2, #1
 8007fbe:	60da      	str	r2, [r3, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	687a      	ldr	r2, [r7, #4]
 8007fc6:	6812      	ldr	r2, [r2, #0]
 8007fc8:	6812      	ldr	r2, [r2, #0]
 8007fca:	f042 0201 	orr.w	r2, r2, #1
 8007fce:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
 8007fd0:	2300      	movs	r3, #0
}
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	370c      	adds	r7, #12
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fdc:	4770      	bx	lr

08007fde <HAL_TIM_PWM_Init>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007fde:	b580      	push	{r7, lr}
 8007fe0:	b082      	sub	sp, #8
 8007fe2:	af00      	add	r7, sp, #0
 8007fe4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d101      	bne.n	8007ff0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007fec:	2301      	movs	r3, #1
 8007fee:	e01d      	b.n	800802c <HAL_TIM_PWM_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));

  if(htim->State == HAL_TIM_STATE_RESET)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007ff6:	b2db      	uxtb	r3, r3
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d106      	bne.n	800800a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2200      	movs	r2, #0
 8008000:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	f004 f92f 	bl	800c268 <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;  
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2202      	movs	r2, #2
 800800e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Init the base time for the PWM */  
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681a      	ldr	r2, [r3, #0]
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	3304      	adds	r3, #4
 800801a:	4619      	mov	r1, r3
 800801c:	4610      	mov	r0, r2
 800801e:	f000 faf5 	bl	800860c <TIM_Base_SetConfig>
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2201      	movs	r2, #1
 8008026:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 800802a:	2300      	movs	r3, #0
}  
 800802c:	4618      	mov	r0, r3
 800802e:	3708      	adds	r7, #8
 8008030:	46bd      	mov	sp, r7
 8008032:	bd80      	pop	{r7, pc}

08008034 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b082      	sub	sp, #8
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
 800803c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	2201      	movs	r2, #1
 8008044:	6839      	ldr	r1, [r7, #0]
 8008046:	4618      	mov	r0, r3
 8008048:	f000 fbd2 	bl	80087f0 <TIM_CCxChannelCmd>
  
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	4a0b      	ldr	r2, [pc, #44]	; (8008080 <HAL_TIM_PWM_Start+0x4c>)
 8008052:	4293      	cmp	r3, r2
 8008054:	d107      	bne.n	8008066 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	687a      	ldr	r2, [r7, #4]
 800805c:	6812      	ldr	r2, [r2, #0]
 800805e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8008060:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008064:	645a      	str	r2, [r3, #68]	; 0x44
  }
    
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	687a      	ldr	r2, [r7, #4]
 800806c:	6812      	ldr	r2, [r2, #0]
 800806e:	6812      	ldr	r2, [r2, #0]
 8008070:	f042 0201 	orr.w	r2, r2, #1
 8008074:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 8008076:	2300      	movs	r3, #0
} 
 8008078:	4618      	mov	r0, r3
 800807a:	3708      	adds	r7, #8
 800807c:	46bd      	mov	sp, r7
 800807e:	bd80      	pop	{r7, pc}
 8008080:	40010000 	.word	0x40010000

08008084 <HAL_TIM_Encoder_Init>:
  *                the configuration information for TIM module.
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef* sConfig)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b086      	sub	sp, #24
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
 800808c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 800808e:	2300      	movs	r3, #0
 8008090:	617b      	str	r3, [r7, #20]
  uint32_t tmpccmr1 = 0U;
 8008092:	2300      	movs	r3, #0
 8008094:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 8008096:	2300      	movs	r3, #0
 8008098:	60fb      	str	r3, [r7, #12]
  
  /* Check the TIM handle allocation */
  if(htim == NULL)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d101      	bne.n	80080a4 <HAL_TIM_Encoder_Init+0x20>
  {
    return HAL_ERROR;
 80080a0:	2301      	movs	r3, #1
 80080a2:	e081      	b.n	80081a8 <HAL_TIM_Encoder_Init+0x124>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if(htim->State == HAL_TIM_STATE_RESET)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80080aa:	b2db      	uxtb	r3, r3
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d106      	bne.n	80080be <HAL_TIM_Encoder_Init+0x3a>
  { 
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2200      	movs	r2, #0
 80080b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	f004 f87f 	bl	800c1bc <HAL_TIM_Encoder_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;   
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2202      	movs	r2, #2
 80080c2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  /* Reset the SMS bits */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	687a      	ldr	r2, [r7, #4]
 80080cc:	6812      	ldr	r2, [r2, #0]
 80080ce:	6892      	ldr	r2, [r2, #8]
 80080d0:	f022 0207 	bic.w	r2, r2, #7
 80080d4:	609a      	str	r2, [r3, #8]
  
  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);  
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681a      	ldr	r2, [r3, #0]
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	3304      	adds	r3, #4
 80080de:	4619      	mov	r1, r3
 80080e0:	4610      	mov	r0, r2
 80080e2:	f000 fa93 	bl	800860c <TIM_Base_SetConfig>
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	689b      	ldr	r3, [r3, #8]
 80080ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	699b      	ldr	r3, [r3, #24]
 80080f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	6a1b      	ldr	r3, [r3, #32]
 80080fc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	697a      	ldr	r2, [r7, #20]
 8008104:	4313      	orrs	r3, r2
 8008106:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008108:	693b      	ldr	r3, [r7, #16]
 800810a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800810e:	f023 0303 	bic.w	r3, r3, #3
 8008112:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	689a      	ldr	r2, [r3, #8]
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	699b      	ldr	r3, [r3, #24]
 800811c:	021b      	lsls	r3, r3, #8
 800811e:	4313      	orrs	r3, r2
 8008120:	693a      	ldr	r2, [r7, #16]
 8008122:	4313      	orrs	r3, r2
 8008124:	613b      	str	r3, [r7, #16]
  
  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008126:	693b      	ldr	r3, [r7, #16]
 8008128:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800812c:	f023 030c 	bic.w	r3, r3, #12
 8008130:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008132:	693b      	ldr	r3, [r7, #16]
 8008134:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008138:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800813c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	68da      	ldr	r2, [r3, #12]
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	69db      	ldr	r3, [r3, #28]
 8008146:	021b      	lsls	r3, r3, #8
 8008148:	4313      	orrs	r3, r2
 800814a:	693a      	ldr	r2, [r7, #16]
 800814c:	4313      	orrs	r3, r2
 800814e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	691b      	ldr	r3, [r3, #16]
 8008154:	011a      	lsls	r2, r3, #4
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	6a1b      	ldr	r3, [r3, #32]
 800815a:	031b      	lsls	r3, r3, #12
 800815c:	4313      	orrs	r3, r2
 800815e:	693a      	ldr	r2, [r7, #16]
 8008160:	4313      	orrs	r3, r2
 8008162:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800816a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8008172:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	685a      	ldr	r2, [r3, #4]
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	695b      	ldr	r3, [r3, #20]
 800817c:	011b      	lsls	r3, r3, #4
 800817e:	4313      	orrs	r3, r2
 8008180:	68fa      	ldr	r2, [r7, #12]
 8008182:	4313      	orrs	r3, r2
 8008184:	60fb      	str	r3, [r7, #12]
  
  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	697a      	ldr	r2, [r7, #20]
 800818c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	693a      	ldr	r2, [r7, #16]
 8008194:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	68fa      	ldr	r2, [r7, #12]
 800819c:	621a      	str	r2, [r3, #32]
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2201      	movs	r2, #1
 80081a2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 80081a6:	2300      	movs	r3, #0
}
 80081a8:	4618      	mov	r0, r3
 80081aa:	3718      	adds	r7, #24
 80081ac:	46bd      	mov	sp, r7
 80081ae:	bd80      	pop	{r7, pc}

080081b0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b082      	sub	sp, #8
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
 80081b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
  
  /* Enable the encoder interface channels */
  switch (Channel)
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d002      	beq.n	80081c6 <HAL_TIM_Encoder_Start+0x16>
 80081c0:	2b04      	cmp	r3, #4
 80081c2:	d008      	beq.n	80081d6 <HAL_TIM_Encoder_Start+0x26>
 80081c4:	e00f      	b.n	80081e6 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	2201      	movs	r2, #1
 80081cc:	2100      	movs	r1, #0
 80081ce:	4618      	mov	r0, r3
 80081d0:	f000 fb0e 	bl	80087f0 <TIM_CCxChannelCmd>
      break; 
 80081d4:	e016      	b.n	8008204 <HAL_TIM_Encoder_Start+0x54>
    }
    case TIM_CHANNEL_2:
    { 
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE); 
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	2201      	movs	r2, #1
 80081dc:	2104      	movs	r1, #4
 80081de:	4618      	mov	r0, r3
 80081e0:	f000 fb06 	bl	80087f0 <TIM_CCxChannelCmd>
      break;
 80081e4:	e00e      	b.n	8008204 <HAL_TIM_Encoder_Start+0x54>
    }  
    default :
    {
     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	2201      	movs	r2, #1
 80081ec:	2100      	movs	r1, #0
 80081ee:	4618      	mov	r0, r3
 80081f0:	f000 fafe 	bl	80087f0 <TIM_CCxChannelCmd>
     TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	2201      	movs	r2, #1
 80081fa:	2104      	movs	r1, #4
 80081fc:	4618      	mov	r0, r3
 80081fe:	f000 faf7 	bl	80087f0 <TIM_CCxChannelCmd>
     break; 
 8008202:	bf00      	nop
    }
  }  
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	687a      	ldr	r2, [r7, #4]
 800820a:	6812      	ldr	r2, [r2, #0]
 800820c:	6812      	ldr	r2, [r2, #0]
 800820e:	f042 0201 	orr.w	r2, r2, #1
 8008212:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 8008214:	2300      	movs	r3, #0
}
 8008216:	4618      	mov	r0, r3
 8008218:	3708      	adds	r7, #8
 800821a:	46bd      	mov	sp, r7
 800821c:	bd80      	pop	{r7, pc}

0800821e <HAL_TIM_IRQHandler>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800821e:	b580      	push	{r7, lr}
 8008220:	b082      	sub	sp, #8
 8008222:	af00      	add	r7, sp, #0
 8008224:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	691b      	ldr	r3, [r3, #16]
 800822c:	f003 0302 	and.w	r3, r3, #2
 8008230:	2b02      	cmp	r3, #2
 8008232:	d122      	bne.n	800827a <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	68db      	ldr	r3, [r3, #12]
 800823a:	f003 0302 	and.w	r3, r3, #2
 800823e:	2b02      	cmp	r3, #2
 8008240:	d11b      	bne.n	800827a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f06f 0202 	mvn.w	r2, #2
 800824a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2201      	movs	r2, #1
 8008250:	761a      	strb	r2, [r3, #24]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	699b      	ldr	r3, [r3, #24]
 8008258:	f003 0303 	and.w	r3, r3, #3
 800825c:	2b00      	cmp	r3, #0
 800825e:	d003      	beq.n	8008268 <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	f000 f9b5 	bl	80085d0 <HAL_TIM_IC_CaptureCallback>
 8008266:	e005      	b.n	8008274 <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008268:	6878      	ldr	r0, [r7, #4]
 800826a:	f000 f9a7 	bl	80085bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f000 f9b8 	bl	80085e4 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2200      	movs	r2, #0
 8008278:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	691b      	ldr	r3, [r3, #16]
 8008280:	f003 0304 	and.w	r3, r3, #4
 8008284:	2b04      	cmp	r3, #4
 8008286:	d122      	bne.n	80082ce <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	68db      	ldr	r3, [r3, #12]
 800828e:	f003 0304 	and.w	r3, r3, #4
 8008292:	2b04      	cmp	r3, #4
 8008294:	d11b      	bne.n	80082ce <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f06f 0204 	mvn.w	r2, #4
 800829e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2202      	movs	r2, #2
 80082a4:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	699b      	ldr	r3, [r3, #24]
 80082ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d003      	beq.n	80082bc <HAL_TIM_IRQHandler+0x9e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	f000 f98b 	bl	80085d0 <HAL_TIM_IC_CaptureCallback>
 80082ba:	e005      	b.n	80082c8 <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	f000 f97d 	bl	80085bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f000 f98e 	bl	80085e4 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2200      	movs	r2, #0
 80082cc:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	691b      	ldr	r3, [r3, #16]
 80082d4:	f003 0308 	and.w	r3, r3, #8
 80082d8:	2b08      	cmp	r3, #8
 80082da:	d122      	bne.n	8008322 <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	68db      	ldr	r3, [r3, #12]
 80082e2:	f003 0308 	and.w	r3, r3, #8
 80082e6:	2b08      	cmp	r3, #8
 80082e8:	d11b      	bne.n	8008322 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f06f 0208 	mvn.w	r2, #8
 80082f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2204      	movs	r2, #4
 80082f8:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	69db      	ldr	r3, [r3, #28]
 8008300:	f003 0303 	and.w	r3, r3, #3
 8008304:	2b00      	cmp	r3, #0
 8008306:	d003      	beq.n	8008310 <HAL_TIM_IRQHandler+0xf2>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8008308:	6878      	ldr	r0, [r7, #4]
 800830a:	f000 f961 	bl	80085d0 <HAL_TIM_IC_CaptureCallback>
 800830e:	e005      	b.n	800831c <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008310:	6878      	ldr	r0, [r7, #4]
 8008312:	f000 f953 	bl	80085bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f000 f964 	bl	80085e4 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2200      	movs	r2, #0
 8008320:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	691b      	ldr	r3, [r3, #16]
 8008328:	f003 0310 	and.w	r3, r3, #16
 800832c:	2b10      	cmp	r3, #16
 800832e:	d122      	bne.n	8008376 <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	68db      	ldr	r3, [r3, #12]
 8008336:	f003 0310 	and.w	r3, r3, #16
 800833a:	2b10      	cmp	r3, #16
 800833c:	d11b      	bne.n	8008376 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f06f 0210 	mvn.w	r2, #16
 8008346:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2208      	movs	r2, #8
 800834c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	69db      	ldr	r3, [r3, #28]
 8008354:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008358:	2b00      	cmp	r3, #0
 800835a:	d003      	beq.n	8008364 <HAL_TIM_IRQHandler+0x146>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 800835c:	6878      	ldr	r0, [r7, #4]
 800835e:	f000 f937 	bl	80085d0 <HAL_TIM_IC_CaptureCallback>
 8008362:	e005      	b.n	8008370 <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f000 f929 	bl	80085bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f000 f93a 	bl	80085e4 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2200      	movs	r2, #0
 8008374:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	691b      	ldr	r3, [r3, #16]
 800837c:	f003 0301 	and.w	r3, r3, #1
 8008380:	2b01      	cmp	r3, #1
 8008382:	d10e      	bne.n	80083a2 <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	68db      	ldr	r3, [r3, #12]
 800838a:	f003 0301 	and.w	r3, r3, #1
 800838e:	2b01      	cmp	r3, #1
 8008390:	d107      	bne.n	80083a2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f06f 0201 	mvn.w	r2, #1
 800839a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f003 fe71 	bl	800c084 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	691b      	ldr	r3, [r3, #16]
 80083a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083ac:	2b80      	cmp	r3, #128	; 0x80
 80083ae:	d10e      	bne.n	80083ce <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	68db      	ldr	r3, [r3, #12]
 80083b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083ba:	2b80      	cmp	r3, #128	; 0x80
 80083bc:	d107      	bne.n	80083ce <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80083c6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80083c8:	6878      	ldr	r0, [r7, #4]
 80083ca:	f000 fbae 	bl	8008b2a <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	691b      	ldr	r3, [r3, #16]
 80083d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083d8:	2b40      	cmp	r3, #64	; 0x40
 80083da:	d10e      	bne.n	80083fa <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	68db      	ldr	r3, [r3, #12]
 80083e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083e6:	2b40      	cmp	r3, #64	; 0x40
 80083e8:	d107      	bne.n	80083fa <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80083f2:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	f000 f8ff 	bl	80085f8 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	691b      	ldr	r3, [r3, #16]
 8008400:	f003 0320 	and.w	r3, r3, #32
 8008404:	2b20      	cmp	r3, #32
 8008406:	d10e      	bne.n	8008426 <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	68db      	ldr	r3, [r3, #12]
 800840e:	f003 0320 	and.w	r3, r3, #32
 8008412:	2b20      	cmp	r3, #32
 8008414:	d107      	bne.n	8008426 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	f06f 0220 	mvn.w	r2, #32
 800841e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	f000 fb78 	bl	8008b16 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 8008426:	bf00      	nop
 8008428:	3708      	adds	r7, #8
 800842a:	46bd      	mov	sp, r7
 800842c:	bd80      	pop	{r7, pc}
	...

08008430 <HAL_TIM_PWM_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b084      	sub	sp, #16
 8008434:	af00      	add	r7, sp, #0
 8008436:	60f8      	str	r0, [r7, #12]
 8008438:	60b9      	str	r1, [r7, #8]
 800843a:	607a      	str	r2, [r7, #4]
  __HAL_LOCK(htim);
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008442:	2b01      	cmp	r3, #1
 8008444:	d101      	bne.n	800844a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8008446:	2302      	movs	r3, #2
 8008448:	e0b4      	b.n	80085b4 <HAL_TIM_PWM_ConfigChannel+0x184>
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	2201      	movs	r2, #1
 800844e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  assert_param(IS_TIM_CHANNELS(Channel)); 
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  htim->State = HAL_TIM_STATE_BUSY;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	2202      	movs	r2, #2
 8008456:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  switch (Channel)
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2b0c      	cmp	r3, #12
 800845e:	f200 809f 	bhi.w	80085a0 <HAL_TIM_PWM_ConfigChannel+0x170>
 8008462:	a201      	add	r2, pc, #4	; (adr r2, 8008468 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8008464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008468:	0800849d 	.word	0x0800849d
 800846c:	080085a1 	.word	0x080085a1
 8008470:	080085a1 	.word	0x080085a1
 8008474:	080085a1 	.word	0x080085a1
 8008478:	080084dd 	.word	0x080084dd
 800847c:	080085a1 	.word	0x080085a1
 8008480:	080085a1 	.word	0x080085a1
 8008484:	080085a1 	.word	0x080085a1
 8008488:	0800851f 	.word	0x0800851f
 800848c:	080085a1 	.word	0x080085a1
 8008490:	080085a1 	.word	0x080085a1
 8008494:	080085a1 	.word	0x080085a1
 8008498:	0800855f 	.word	0x0800855f
  {
    case TIM_CHANNEL_1:
    {
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	68b9      	ldr	r1, [r7, #8]
 80084a2:	4618      	mov	r0, r3
 80084a4:	f000 f9c8 	bl	8008838 <TIM_OC1_SetConfig>
      
      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	68fa      	ldr	r2, [r7, #12]
 80084ae:	6812      	ldr	r2, [r2, #0]
 80084b0:	6992      	ldr	r2, [r2, #24]
 80084b2:	f042 0208 	orr.w	r2, r2, #8
 80084b6:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	68fa      	ldr	r2, [r7, #12]
 80084be:	6812      	ldr	r2, [r2, #0]
 80084c0:	6992      	ldr	r2, [r2, #24]
 80084c2:	f022 0204 	bic.w	r2, r2, #4
 80084c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	68fa      	ldr	r2, [r7, #12]
 80084ce:	6812      	ldr	r2, [r2, #0]
 80084d0:	6991      	ldr	r1, [r2, #24]
 80084d2:	68ba      	ldr	r2, [r7, #8]
 80084d4:	6912      	ldr	r2, [r2, #16]
 80084d6:	430a      	orrs	r2, r1
 80084d8:	619a      	str	r2, [r3, #24]
    }
    break;
 80084da:	e062      	b.n	80085a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    
    case TIM_CHANNEL_2:
    {
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	68b9      	ldr	r1, [r7, #8]
 80084e2:	4618      	mov	r0, r3
 80084e4:	f000 f916 	bl	8008714 <TIM_OC2_SetConfig>
      
      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	68fa      	ldr	r2, [r7, #12]
 80084ee:	6812      	ldr	r2, [r2, #0]
 80084f0:	6992      	ldr	r2, [r2, #24]
 80084f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80084f6:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	68fa      	ldr	r2, [r7, #12]
 80084fe:	6812      	ldr	r2, [r2, #0]
 8008500:	6992      	ldr	r2, [r2, #24]
 8008502:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008506:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	68fa      	ldr	r2, [r7, #12]
 800850e:	6812      	ldr	r2, [r2, #0]
 8008510:	6991      	ldr	r1, [r2, #24]
 8008512:	68ba      	ldr	r2, [r7, #8]
 8008514:	6912      	ldr	r2, [r2, #16]
 8008516:	0212      	lsls	r2, r2, #8
 8008518:	430a      	orrs	r2, r1
 800851a:	619a      	str	r2, [r3, #24]
    }
    break;
 800851c:	e041      	b.n	80085a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    
    case TIM_CHANNEL_3:
    {
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	68b9      	ldr	r1, [r7, #8]
 8008524:	4618      	mov	r0, r3
 8008526:	f000 f9ef 	bl	8008908 <TIM_OC3_SetConfig>
      
      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	68fa      	ldr	r2, [r7, #12]
 8008530:	6812      	ldr	r2, [r2, #0]
 8008532:	69d2      	ldr	r2, [r2, #28]
 8008534:	f042 0208 	orr.w	r2, r2, #8
 8008538:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	68fa      	ldr	r2, [r7, #12]
 8008540:	6812      	ldr	r2, [r2, #0]
 8008542:	69d2      	ldr	r2, [r2, #28]
 8008544:	f022 0204 	bic.w	r2, r2, #4
 8008548:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	68fa      	ldr	r2, [r7, #12]
 8008550:	6812      	ldr	r2, [r2, #0]
 8008552:	69d1      	ldr	r1, [r2, #28]
 8008554:	68ba      	ldr	r2, [r7, #8]
 8008556:	6912      	ldr	r2, [r2, #16]
 8008558:	430a      	orrs	r2, r1
 800855a:	61da      	str	r2, [r3, #28]
    }
    break;
 800855c:	e021      	b.n	80085a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    
    case TIM_CHANNEL_4:
    {
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	68b9      	ldr	r1, [r7, #8]
 8008564:	4618      	mov	r0, r3
 8008566:	f000 fa3b 	bl	80089e0 <TIM_OC4_SetConfig>
      
      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	68fa      	ldr	r2, [r7, #12]
 8008570:	6812      	ldr	r2, [r2, #0]
 8008572:	69d2      	ldr	r2, [r2, #28]
 8008574:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008578:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	68fa      	ldr	r2, [r7, #12]
 8008580:	6812      	ldr	r2, [r2, #0]
 8008582:	69d2      	ldr	r2, [r2, #28]
 8008584:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008588:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	68fa      	ldr	r2, [r7, #12]
 8008590:	6812      	ldr	r2, [r2, #0]
 8008592:	69d1      	ldr	r1, [r2, #28]
 8008594:	68ba      	ldr	r2, [r7, #8]
 8008596:	6912      	ldr	r2, [r2, #16]
 8008598:	0212      	lsls	r2, r2, #8
 800859a:	430a      	orrs	r2, r1
 800859c:	61da      	str	r2, [r3, #28]
    }
    break;
 800859e:	e000      	b.n	80085a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    
    default:
    break;    
 80085a0:	bf00      	nop
  }
  
  htim->State = HAL_TIM_STATE_READY;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	2201      	movs	r2, #1
 80085a6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
  __HAL_UNLOCK(htim);
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	2200      	movs	r2, #0
 80085ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 80085b2:	2300      	movs	r3, #0
}
 80085b4:	4618      	mov	r0, r3
 80085b6:	3710      	adds	r7, #16
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bd80      	pop	{r7, pc}

080085bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80085bc:	b480      	push	{r7}
 80085be:	b083      	sub	sp, #12
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80085c4:	bf00      	nop
 80085c6:	370c      	adds	r7, #12
 80085c8:	46bd      	mov	sp, r7
 80085ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ce:	4770      	bx	lr

080085d0 <HAL_TIM_IC_CaptureCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80085d0:	b480      	push	{r7}
 80085d2:	b083      	sub	sp, #12
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80085d8:	bf00      	nop
 80085da:	370c      	adds	r7, #12
 80085dc:	46bd      	mov	sp, r7
 80085de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e2:	4770      	bx	lr

080085e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80085e4:	b480      	push	{r7}
 80085e6:	b083      	sub	sp, #12
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80085ec:	bf00      	nop
 80085ee:	370c      	adds	r7, #12
 80085f0:	46bd      	mov	sp, r7
 80085f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f6:	4770      	bx	lr

080085f8 <HAL_TIM_TriggerCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80085f8:	b480      	push	{r7}
 80085fa:	b083      	sub	sp, #12
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008600:	bf00      	nop
 8008602:	370c      	adds	r7, #12
 8008604:	46bd      	mov	sp, r7
 8008606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860a:	4770      	bx	lr

0800860c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure pointer on TIM Time Base required parameters  
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800860c:	b480      	push	{r7}
 800860e:	b085      	sub	sp, #20
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
 8008614:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8008616:	2300      	movs	r3, #0
 8008618:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	4a35      	ldr	r2, [pc, #212]	; (80086f8 <TIM_Base_SetConfig+0xec>)
 8008624:	4293      	cmp	r3, r2
 8008626:	d00f      	beq.n	8008648 <TIM_Base_SetConfig+0x3c>
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800862e:	d00b      	beq.n	8008648 <TIM_Base_SetConfig+0x3c>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	4a32      	ldr	r2, [pc, #200]	; (80086fc <TIM_Base_SetConfig+0xf0>)
 8008634:	4293      	cmp	r3, r2
 8008636:	d007      	beq.n	8008648 <TIM_Base_SetConfig+0x3c>
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	4a31      	ldr	r2, [pc, #196]	; (8008700 <TIM_Base_SetConfig+0xf4>)
 800863c:	4293      	cmp	r3, r2
 800863e:	d003      	beq.n	8008648 <TIM_Base_SetConfig+0x3c>
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	4a30      	ldr	r2, [pc, #192]	; (8008704 <TIM_Base_SetConfig+0xf8>)
 8008644:	4293      	cmp	r3, r2
 8008646:	d101      	bne.n	800864c <TIM_Base_SetConfig+0x40>
 8008648:	2301      	movs	r3, #1
 800864a:	e000      	b.n	800864e <TIM_Base_SetConfig+0x42>
 800864c:	2300      	movs	r3, #0
 800864e:	2b00      	cmp	r3, #0
 8008650:	d008      	beq.n	8008664 <TIM_Base_SetConfig+0x58>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008658:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	685b      	ldr	r3, [r3, #4]
 800865e:	68fa      	ldr	r2, [r7, #12]
 8008660:	4313      	orrs	r3, r2
 8008662:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	4a24      	ldr	r2, [pc, #144]	; (80086f8 <TIM_Base_SetConfig+0xec>)
 8008668:	4293      	cmp	r3, r2
 800866a:	d01b      	beq.n	80086a4 <TIM_Base_SetConfig+0x98>
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008672:	d017      	beq.n	80086a4 <TIM_Base_SetConfig+0x98>
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	4a21      	ldr	r2, [pc, #132]	; (80086fc <TIM_Base_SetConfig+0xf0>)
 8008678:	4293      	cmp	r3, r2
 800867a:	d013      	beq.n	80086a4 <TIM_Base_SetConfig+0x98>
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	4a20      	ldr	r2, [pc, #128]	; (8008700 <TIM_Base_SetConfig+0xf4>)
 8008680:	4293      	cmp	r3, r2
 8008682:	d00f      	beq.n	80086a4 <TIM_Base_SetConfig+0x98>
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	4a1f      	ldr	r2, [pc, #124]	; (8008704 <TIM_Base_SetConfig+0xf8>)
 8008688:	4293      	cmp	r3, r2
 800868a:	d00b      	beq.n	80086a4 <TIM_Base_SetConfig+0x98>
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	4a1e      	ldr	r2, [pc, #120]	; (8008708 <TIM_Base_SetConfig+0xfc>)
 8008690:	4293      	cmp	r3, r2
 8008692:	d007      	beq.n	80086a4 <TIM_Base_SetConfig+0x98>
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	4a1d      	ldr	r2, [pc, #116]	; (800870c <TIM_Base_SetConfig+0x100>)
 8008698:	4293      	cmp	r3, r2
 800869a:	d003      	beq.n	80086a4 <TIM_Base_SetConfig+0x98>
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	4a1c      	ldr	r2, [pc, #112]	; (8008710 <TIM_Base_SetConfig+0x104>)
 80086a0:	4293      	cmp	r3, r2
 80086a2:	d101      	bne.n	80086a8 <TIM_Base_SetConfig+0x9c>
 80086a4:	2301      	movs	r3, #1
 80086a6:	e000      	b.n	80086aa <TIM_Base_SetConfig+0x9e>
 80086a8:	2300      	movs	r3, #0
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d008      	beq.n	80086c0 <TIM_Base_SetConfig+0xb4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80086b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	68db      	ldr	r3, [r3, #12]
 80086ba:	68fa      	ldr	r2, [r7, #12]
 80086bc:	4313      	orrs	r3, r2
 80086be:	60fb      	str	r3, [r7, #12]
  }

  TIMx->CR1 = tmpcr1;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	68fa      	ldr	r2, [r7, #12]
 80086c4:	601a      	str	r2, [r3, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	689a      	ldr	r2, [r3, #8]
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	681a      	ldr	r2, [r3, #0]
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	629a      	str	r2, [r3, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	4a07      	ldr	r2, [pc, #28]	; (80086f8 <TIM_Base_SetConfig+0xec>)
 80086da:	4293      	cmp	r3, r2
 80086dc:	d103      	bne.n	80086e6 <TIM_Base_SetConfig+0xda>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	691a      	ldr	r2, [r3, #16]
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	2201      	movs	r2, #1
 80086ea:	615a      	str	r2, [r3, #20]
}
 80086ec:	bf00      	nop
 80086ee:	3714      	adds	r7, #20
 80086f0:	46bd      	mov	sp, r7
 80086f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f6:	4770      	bx	lr
 80086f8:	40010000 	.word	0x40010000
 80086fc:	40000400 	.word	0x40000400
 8008700:	40000800 	.word	0x40000800
 8008704:	40000c00 	.word	0x40000c00
 8008708:	40014000 	.word	0x40014000
 800870c:	40014400 	.word	0x40014400
 8008710:	40014800 	.word	0x40014800

08008714 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008714:	b480      	push	{r7}
 8008716:	b087      	sub	sp, #28
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
 800871c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800871e:	2300      	movs	r3, #0
 8008720:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8008722:	2300      	movs	r3, #0
 8008724:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8008726:	2300      	movs	r3, #0
 8008728:	613b      	str	r3, [r7, #16]
   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6a1b      	ldr	r3, [r3, #32]
 800872e:	f023 0210 	bic.w	r2, r3, #16
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6a1b      	ldr	r3, [r3, #32]
 800873a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	685b      	ldr	r3, [r3, #4]
 8008740:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	699b      	ldr	r3, [r3, #24]
 8008746:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800874e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008756:	60fb      	str	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	021b      	lsls	r3, r3, #8
 800875e:	68fa      	ldr	r2, [r7, #12]
 8008760:	4313      	orrs	r3, r2
 8008762:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008764:	697b      	ldr	r3, [r7, #20]
 8008766:	f023 0320 	bic.w	r3, r3, #32
 800876a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	689b      	ldr	r3, [r3, #8]
 8008770:	011b      	lsls	r3, r3, #4
 8008772:	697a      	ldr	r2, [r7, #20]
 8008774:	4313      	orrs	r3, r2
 8008776:	617b      	str	r3, [r7, #20]
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	4a1c      	ldr	r2, [pc, #112]	; (80087ec <TIM_OC2_SetConfig+0xd8>)
 800877c:	4293      	cmp	r3, r2
 800877e:	d121      	bne.n	80087c4 <TIM_OC2_SetConfig+0xb0>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008780:	697b      	ldr	r3, [r7, #20]
 8008782:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008786:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	68db      	ldr	r3, [r3, #12]
 800878c:	011b      	lsls	r3, r3, #4
 800878e:	697a      	ldr	r2, [r7, #20]
 8008790:	4313      	orrs	r3, r2
 8008792:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008794:	697b      	ldr	r3, [r7, #20]
 8008796:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800879a:	617b      	str	r3, [r7, #20]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800879c:	693b      	ldr	r3, [r7, #16]
 800879e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80087a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80087a4:	693b      	ldr	r3, [r7, #16]
 80087a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80087aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	695b      	ldr	r3, [r3, #20]
 80087b0:	009b      	lsls	r3, r3, #2
 80087b2:	693a      	ldr	r2, [r7, #16]
 80087b4:	4313      	orrs	r3, r2
 80087b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	699b      	ldr	r3, [r3, #24]
 80087bc:	009b      	lsls	r3, r3, #2
 80087be:	693a      	ldr	r2, [r7, #16]
 80087c0:	4313      	orrs	r3, r2
 80087c2:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	693a      	ldr	r2, [r7, #16]
 80087c8:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	68fa      	ldr	r2, [r7, #12]
 80087ce:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	685a      	ldr	r2, [r3, #4]
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	697a      	ldr	r2, [r7, #20]
 80087dc:	621a      	str	r2, [r3, #32]
}
 80087de:	bf00      	nop
 80087e0:	371c      	adds	r7, #28
 80087e2:	46bd      	mov	sp, r7
 80087e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e8:	4770      	bx	lr
 80087ea:	bf00      	nop
 80087ec:	40010000 	.word	0x40010000

080087f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80087f0:	b480      	push	{r7}
 80087f2:	b087      	sub	sp, #28
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	60f8      	str	r0, [r7, #12]
 80087f8:	60b9      	str	r1, [r7, #8]
 80087fa:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 80087fc:	2300      	movs	r3, #0
 80087fe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx)); 
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8008800:	2201      	movs	r2, #1
 8008802:	68bb      	ldr	r3, [r7, #8]
 8008804:	fa02 f303 	lsl.w	r3, r2, r3
 8008808:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	6a1a      	ldr	r2, [r3, #32]
 800880e:	697b      	ldr	r3, [r7, #20]
 8008810:	43db      	mvns	r3, r3
 8008812:	401a      	ands	r2, r3
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	6a1a      	ldr	r2, [r3, #32]
 800881c:	6879      	ldr	r1, [r7, #4]
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	fa01 f303 	lsl.w	r3, r1, r3
 8008824:	431a      	orrs	r2, r3
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	621a      	str	r2, [r3, #32]
}
 800882a:	bf00      	nop
 800882c:	371c      	adds	r7, #28
 800882e:	46bd      	mov	sp, r7
 8008830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008834:	4770      	bx	lr
	...

08008838 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008838:	b480      	push	{r7}
 800883a:	b087      	sub	sp, #28
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
 8008840:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8008842:	2300      	movs	r3, #0
 8008844:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8008846:	2300      	movs	r3, #0
 8008848:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;  
 800884a:	2300      	movs	r3, #0
 800884c:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6a1b      	ldr	r3, [r3, #32]
 8008852:	f023 0201 	bic.w	r2, r3, #1
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6a1b      	ldr	r3, [r3, #32]
 800885e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	685b      	ldr	r3, [r3, #4]
 8008864:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	699b      	ldr	r3, [r3, #24]
 800886a:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008872:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	f023 0303 	bic.w	r3, r3, #3
 800887a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	68fa      	ldr	r2, [r7, #12]
 8008882:	4313      	orrs	r3, r2
 8008884:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008886:	697b      	ldr	r3, [r7, #20]
 8008888:	f023 0302 	bic.w	r3, r3, #2
 800888c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	689b      	ldr	r3, [r3, #8]
 8008892:	697a      	ldr	r2, [r7, #20]
 8008894:	4313      	orrs	r3, r2
 8008896:	617b      	str	r3, [r7, #20]

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	4a1a      	ldr	r2, [pc, #104]	; (8008904 <TIM_OC1_SetConfig+0xcc>)
 800889c:	4293      	cmp	r3, r2
 800889e:	d11e      	bne.n	80088de <TIM_OC1_SetConfig+0xa6>
  {   
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80088a0:	697b      	ldr	r3, [r7, #20]
 80088a2:	f023 0308 	bic.w	r3, r3, #8
 80088a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	68db      	ldr	r3, [r3, #12]
 80088ac:	697a      	ldr	r2, [r7, #20]
 80088ae:	4313      	orrs	r3, r2
 80088b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80088b2:	697b      	ldr	r3, [r7, #20]
 80088b4:	f023 0304 	bic.w	r3, r3, #4
 80088b8:	617b      	str	r3, [r7, #20]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80088ba:	693b      	ldr	r3, [r7, #16]
 80088bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80088c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80088c2:	693b      	ldr	r3, [r7, #16]
 80088c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80088c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	695b      	ldr	r3, [r3, #20]
 80088ce:	693a      	ldr	r2, [r7, #16]
 80088d0:	4313      	orrs	r3, r2
 80088d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	699b      	ldr	r3, [r3, #24]
 80088d8:	693a      	ldr	r2, [r7, #16]
 80088da:	4313      	orrs	r3, r2
 80088dc:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	693a      	ldr	r2, [r7, #16]
 80088e2:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	68fa      	ldr	r2, [r7, #12]
 80088e8:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	685a      	ldr	r2, [r3, #4]
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	697a      	ldr	r2, [r7, #20]
 80088f6:	621a      	str	r2, [r3, #32]
} 
 80088f8:	bf00      	nop
 80088fa:	371c      	adds	r7, #28
 80088fc:	46bd      	mov	sp, r7
 80088fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008902:	4770      	bx	lr
 8008904:	40010000 	.word	0x40010000

08008908 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008908:	b480      	push	{r7}
 800890a:	b087      	sub	sp, #28
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
 8008910:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8008912:	2300      	movs	r3, #0
 8008914:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8008916:	2300      	movs	r3, #0
 8008918:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;   
 800891a:	2300      	movs	r3, #0
 800891c:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6a1b      	ldr	r3, [r3, #32]
 8008922:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6a1b      	ldr	r3, [r3, #32]
 800892e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	685b      	ldr	r3, [r3, #4]
 8008934:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	69db      	ldr	r3, [r3, #28]
 800893a:	60fb      	str	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008942:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	f023 0303 	bic.w	r3, r3, #3
 800894a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	68fa      	ldr	r2, [r7, #12]
 8008952:	4313      	orrs	r3, r2
 8008954:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008956:	697b      	ldr	r3, [r7, #20]
 8008958:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800895c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	689b      	ldr	r3, [r3, #8]
 8008962:	021b      	lsls	r3, r3, #8
 8008964:	697a      	ldr	r2, [r7, #20]
 8008966:	4313      	orrs	r3, r2
 8008968:	617b      	str	r3, [r7, #20]
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	4a1b      	ldr	r2, [pc, #108]	; (80089dc <TIM_OC3_SetConfig+0xd4>)
 800896e:	4293      	cmp	r3, r2
 8008970:	d121      	bne.n	80089b6 <TIM_OC3_SetConfig+0xae>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008972:	697b      	ldr	r3, [r7, #20]
 8008974:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008978:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	68db      	ldr	r3, [r3, #12]
 800897e:	021b      	lsls	r3, r3, #8
 8008980:	697a      	ldr	r2, [r7, #20]
 8008982:	4313      	orrs	r3, r2
 8008984:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008986:	697b      	ldr	r3, [r7, #20]
 8008988:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800898c:	617b      	str	r3, [r7, #20]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800898e:	693b      	ldr	r3, [r7, #16]
 8008990:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008994:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008996:	693b      	ldr	r3, [r7, #16]
 8008998:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800899c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	695b      	ldr	r3, [r3, #20]
 80089a2:	011b      	lsls	r3, r3, #4
 80089a4:	693a      	ldr	r2, [r7, #16]
 80089a6:	4313      	orrs	r3, r2
 80089a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	699b      	ldr	r3, [r3, #24]
 80089ae:	011b      	lsls	r3, r3, #4
 80089b0:	693a      	ldr	r2, [r7, #16]
 80089b2:	4313      	orrs	r3, r2
 80089b4:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	693a      	ldr	r2, [r7, #16]
 80089ba:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	68fa      	ldr	r2, [r7, #12]
 80089c0:	61da      	str	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	685a      	ldr	r2, [r3, #4]
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	697a      	ldr	r2, [r7, #20]
 80089ce:	621a      	str	r2, [r3, #32]
}
 80089d0:	bf00      	nop
 80089d2:	371c      	adds	r7, #28
 80089d4:	46bd      	mov	sp, r7
 80089d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089da:	4770      	bx	lr
 80089dc:	40010000 	.word	0x40010000

080089e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80089e0:	b480      	push	{r7}
 80089e2:	b087      	sub	sp, #28
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
 80089e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 80089ea:	2300      	movs	r3, #0
 80089ec:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 80089ee:	2300      	movs	r3, #0
 80089f0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 80089f2:	2300      	movs	r3, #0
 80089f4:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6a1b      	ldr	r3, [r3, #32]
 80089fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6a1b      	ldr	r3, [r3, #32]
 8008a06:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	685b      	ldr	r3, [r3, #4]
 8008a0c:	617b      	str	r3, [r7, #20]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	69db      	ldr	r3, [r3, #28]
 8008a12:	613b      	str	r3, [r7, #16]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008a14:	693b      	ldr	r3, [r7, #16]
 8008a16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a1a:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008a1c:	693b      	ldr	r3, [r7, #16]
 8008a1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a22:	613b      	str	r3, [r7, #16]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	021b      	lsls	r3, r3, #8
 8008a2a:	693a      	ldr	r2, [r7, #16]
 8008a2c:	4313      	orrs	r3, r2
 8008a2e:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008a36:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	689b      	ldr	r3, [r3, #8]
 8008a3c:	031b      	lsls	r3, r3, #12
 8008a3e:	68fa      	ldr	r2, [r7, #12]
 8008a40:	4313      	orrs	r3, r2
 8008a42:	60fb      	str	r3, [r7, #12]
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	4a10      	ldr	r2, [pc, #64]	; (8008a88 <TIM_OC4_SetConfig+0xa8>)
 8008a48:	4293      	cmp	r3, r2
 8008a4a:	d109      	bne.n	8008a60 <TIM_OC4_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008a4c:	697b      	ldr	r3, [r7, #20]
 8008a4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008a52:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	695b      	ldr	r3, [r3, #20]
 8008a58:	019b      	lsls	r3, r3, #6
 8008a5a:	697a      	ldr	r2, [r7, #20]
 8008a5c:	4313      	orrs	r3, r2
 8008a5e:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	697a      	ldr	r2, [r7, #20]
 8008a64:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	693a      	ldr	r2, [r7, #16]
 8008a6a:	61da      	str	r2, [r3, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	685a      	ldr	r2, [r3, #4]
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	68fa      	ldr	r2, [r7, #12]
 8008a78:	621a      	str	r2, [r3, #32]
}
 8008a7a:	bf00      	nop
 8008a7c:	371c      	adds	r7, #28
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a84:	4770      	bx	lr
 8008a86:	bf00      	nop
 8008a88:	40010000 	.word	0x40010000

08008a8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8008a8c:	b480      	push	{r7}
 8008a8e:	b083      	sub	sp, #12
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
 8008a94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008a9c:	2b01      	cmp	r3, #1
 8008a9e:	d101      	bne.n	8008aa4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008aa0:	2302      	movs	r3, #2
 8008aa2:	e032      	b.n	8008b0a <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2201      	movs	r2, #1
 8008aa8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  htim->State = HAL_TIM_STATE_BUSY;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2202      	movs	r2, #2
 8008ab0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	687a      	ldr	r2, [r7, #4]
 8008aba:	6812      	ldr	r2, [r2, #0]
 8008abc:	6852      	ldr	r2, [r2, #4]
 8008abe:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008ac2:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	687a      	ldr	r2, [r7, #4]
 8008aca:	6812      	ldr	r2, [r2, #0]
 8008acc:	6851      	ldr	r1, [r2, #4]
 8008ace:	683a      	ldr	r2, [r7, #0]
 8008ad0:	6812      	ldr	r2, [r2, #0]
 8008ad2:	430a      	orrs	r2, r1
 8008ad4:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	687a      	ldr	r2, [r7, #4]
 8008adc:	6812      	ldr	r2, [r2, #0]
 8008ade:	6892      	ldr	r2, [r2, #8]
 8008ae0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008ae4:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	687a      	ldr	r2, [r7, #4]
 8008aec:	6812      	ldr	r2, [r2, #0]
 8008aee:	6891      	ldr	r1, [r2, #8]
 8008af0:	683a      	ldr	r2, [r7, #0]
 8008af2:	6852      	ldr	r2, [r2, #4]
 8008af4:	430a      	orrs	r2, r1
 8008af6:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2201      	movs	r2, #1
 8008afc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2200      	movs	r2, #0
 8008b04:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  return HAL_OK;
 8008b08:	2300      	movs	r3, #0
} 
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	370c      	adds	r7, #12
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b14:	4770      	bx	lr

08008b16 <HAL_TIMEx_CommutationCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8008b16:	b480      	push	{r7}
 8008b18:	b083      	sub	sp, #12
 8008b1a:	af00      	add	r7, sp, #0
 8008b1c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8008b1e:	bf00      	nop
 8008b20:	370c      	adds	r7, #12
 8008b22:	46bd      	mov	sp, r7
 8008b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b28:	4770      	bx	lr

08008b2a <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008b2a:	b480      	push	{r7}
 8008b2c:	b083      	sub	sp, #12
 8008b2e:	af00      	add	r7, sp, #0
 8008b30:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008b32:	bf00      	nop
 8008b34:	370c      	adds	r7, #12
 8008b36:	46bd      	mov	sp, r7
 8008b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3c:	4770      	bx	lr

08008b3e <HAL_UART_Init>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008b3e:	b580      	push	{r7, lr}
 8008b40:	b082      	sub	sp, #8
 8008b42:	af00      	add	r7, sp, #0
 8008b44:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d101      	bne.n	8008b50 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008b4c:	2301      	movs	r3, #1
 8008b4e:	e03f      	b.n	8008bd0 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008b56:	b2db      	uxtb	r3, r3
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d106      	bne.n	8008b6a <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2200      	movs	r2, #0
 8008b60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8008b64:	6878      	ldr	r0, [r7, #4]
 8008b66:	f003 fbd3 	bl	800c310 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	2224      	movs	r2, #36	; 0x24
 8008b6e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	687a      	ldr	r2, [r7, #4]
 8008b78:	6812      	ldr	r2, [r2, #0]
 8008b7a:	68d2      	ldr	r2, [r2, #12]
 8008b7c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008b80:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008b82:	6878      	ldr	r0, [r7, #4]
 8008b84:	f000 f90a 	bl	8008d9c <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	687a      	ldr	r2, [r7, #4]
 8008b8e:	6812      	ldr	r2, [r2, #0]
 8008b90:	6912      	ldr	r2, [r2, #16]
 8008b92:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008b96:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	687a      	ldr	r2, [r7, #4]
 8008b9e:	6812      	ldr	r2, [r2, #0]
 8008ba0:	6952      	ldr	r2, [r2, #20]
 8008ba2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008ba6:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	687a      	ldr	r2, [r7, #4]
 8008bae:	6812      	ldr	r2, [r2, #0]
 8008bb0:	68d2      	ldr	r2, [r2, #12]
 8008bb2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008bb6:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2200      	movs	r2, #0
 8008bbc:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	2220      	movs	r2, #32
 8008bc2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	2220      	movs	r2, #32
 8008bca:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 8008bce:	2300      	movs	r3, #0
}
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	3708      	adds	r7, #8
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	bd80      	pop	{r7, pc}

08008bd8 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b088      	sub	sp, #32
 8008bdc:	af02      	add	r7, sp, #8
 8008bde:	60f8      	str	r0, [r7, #12]
 8008be0:	60b9      	str	r1, [r7, #8]
 8008be2:	603b      	str	r3, [r7, #0]
 8008be4:	4613      	mov	r3, r2
 8008be6:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8008be8:	2300      	movs	r3, #0
 8008bea:	617b      	str	r3, [r7, #20]
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY) 
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008bf2:	b2db      	uxtb	r3, r3
 8008bf4:	2b20      	cmp	r3, #32
 8008bf6:	f040 8082 	bne.w	8008cfe <HAL_UART_Transmit+0x126>
  {
    if((pData == NULL ) || (Size == 0)) 
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d002      	beq.n	8008c06 <HAL_UART_Transmit+0x2e>
 8008c00:	88fb      	ldrh	r3, [r7, #6]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d101      	bne.n	8008c0a <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8008c06:	2301      	movs	r3, #1
 8008c08:	e07a      	b.n	8008d00 <HAL_UART_Transmit+0x128>
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008c10:	2b01      	cmp	r3, #1
 8008c12:	d101      	bne.n	8008c18 <HAL_UART_Transmit+0x40>
 8008c14:	2302      	movs	r3, #2
 8008c16:	e073      	b.n	8008d00 <HAL_UART_Transmit+0x128>
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	2201      	movs	r2, #1
 8008c1c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	2200      	movs	r2, #0
 8008c24:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	2221      	movs	r2, #33	; 0x21
 8008c2a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	
    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8008c2e:	f7fd fadd 	bl	80061ec <HAL_GetTick>
 8008c32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	88fa      	ldrh	r2, [r7, #6]
 8008c38:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	88fa      	ldrh	r2, [r7, #6]
 8008c3e:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8008c40:	e041      	b.n	8008cc6 <HAL_UART_Transmit+0xee>
    {
      huart->TxXferCount--;
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008c46:	b29b      	uxth	r3, r3
 8008c48:	3b01      	subs	r3, #1
 8008c4a:	b29a      	uxth	r2, r3
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	689b      	ldr	r3, [r3, #8]
 8008c54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c58:	d121      	bne.n	8008c9e <HAL_UART_Transmit+0xc6>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	9300      	str	r3, [sp, #0]
 8008c5e:	697b      	ldr	r3, [r7, #20]
 8008c60:	2200      	movs	r2, #0
 8008c62:	2180      	movs	r1, #128	; 0x80
 8008c64:	68f8      	ldr	r0, [r7, #12]
 8008c66:	f000 f84f 	bl	8008d08 <UART_WaitOnFlagUntilTimeout>
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d001      	beq.n	8008c74 <HAL_UART_Transmit+0x9c>
        { 
          return HAL_TIMEOUT;
 8008c70:	2303      	movs	r3, #3
 8008c72:	e045      	b.n	8008d00 <HAL_UART_Transmit+0x128>
        }
        tmp = (uint16_t*) pData;
 8008c74:	68bb      	ldr	r3, [r7, #8]
 8008c76:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	693a      	ldr	r2, [r7, #16]
 8008c7e:	8812      	ldrh	r2, [r2, #0]
 8008c80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008c84:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	691b      	ldr	r3, [r3, #16]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d103      	bne.n	8008c96 <HAL_UART_Transmit+0xbe>
        {
          pData +=2U;
 8008c8e:	68bb      	ldr	r3, [r7, #8]
 8008c90:	3302      	adds	r3, #2
 8008c92:	60bb      	str	r3, [r7, #8]
 8008c94:	e017      	b.n	8008cc6 <HAL_UART_Transmit+0xee>
        }
        else
        { 
          pData +=1U;
 8008c96:	68bb      	ldr	r3, [r7, #8]
 8008c98:	3301      	adds	r3, #1
 8008c9a:	60bb      	str	r3, [r7, #8]
 8008c9c:	e013      	b.n	8008cc6 <HAL_UART_Transmit+0xee>
        }
      } 
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	9300      	str	r3, [sp, #0]
 8008ca2:	697b      	ldr	r3, [r7, #20]
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	2180      	movs	r1, #128	; 0x80
 8008ca8:	68f8      	ldr	r0, [r7, #12]
 8008caa:	f000 f82d 	bl	8008d08 <UART_WaitOnFlagUntilTimeout>
 8008cae:	4603      	mov	r3, r0
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d001      	beq.n	8008cb8 <HAL_UART_Transmit+0xe0>
        {
          return HAL_TIMEOUT;
 8008cb4:	2303      	movs	r3, #3
 8008cb6:	e023      	b.n	8008d00 <HAL_UART_Transmit+0x128>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	681a      	ldr	r2, [r3, #0]
 8008cbc:	68bb      	ldr	r3, [r7, #8]
 8008cbe:	1c59      	adds	r1, r3, #1
 8008cc0:	60b9      	str	r1, [r7, #8]
 8008cc2:	781b      	ldrb	r3, [r3, #0]
 8008cc4:	6053      	str	r3, [r2, #4]
    while(huart->TxXferCount > 0U)
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008cca:	b29b      	uxth	r3, r3
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d1b8      	bne.n	8008c42 <HAL_UART_Transmit+0x6a>
      } 
    }
    
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	9300      	str	r3, [sp, #0]
 8008cd4:	697b      	ldr	r3, [r7, #20]
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	2140      	movs	r1, #64	; 0x40
 8008cda:	68f8      	ldr	r0, [r7, #12]
 8008cdc:	f000 f814 	bl	8008d08 <UART_WaitOnFlagUntilTimeout>
 8008ce0:	4603      	mov	r3, r0
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d001      	beq.n	8008cea <HAL_UART_Transmit+0x112>
    { 
      return HAL_TIMEOUT;
 8008ce6:	2303      	movs	r3, #3
 8008ce8:	e00a      	b.n	8008d00 <HAL_UART_Transmit+0x128>
    }
    
    /* At end of Tx process, restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	2220      	movs	r2, #32
 8008cee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    return HAL_OK;
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	e000      	b.n	8008d00 <HAL_UART_Transmit+0x128>
  }
  else
  {
    return HAL_BUSY;
 8008cfe:	2302      	movs	r3, #2
  }
}
 8008d00:	4618      	mov	r0, r3
 8008d02:	3718      	adds	r7, #24
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd80      	pop	{r7, pc}

08008d08 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b084      	sub	sp, #16
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	60f8      	str	r0, [r7, #12]
 8008d10:	60b9      	str	r1, [r7, #8]
 8008d12:	603b      	str	r3, [r7, #0]
 8008d14:	4613      	mov	r3, r2
 8008d16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8008d18:	e02c      	b.n	8008d74 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8008d1a:	69bb      	ldr	r3, [r7, #24]
 8008d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d20:	d028      	beq.n	8008d74 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8008d22:	69bb      	ldr	r3, [r7, #24]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d007      	beq.n	8008d38 <UART_WaitOnFlagUntilTimeout+0x30>
 8008d28:	f7fd fa60 	bl	80061ec <HAL_GetTick>
 8008d2c:	4602      	mov	r2, r0
 8008d2e:	683b      	ldr	r3, [r7, #0]
 8008d30:	1ad2      	subs	r2, r2, r3
 8008d32:	69bb      	ldr	r3, [r7, #24]
 8008d34:	429a      	cmp	r2, r3
 8008d36:	d91d      	bls.n	8008d74 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	68fa      	ldr	r2, [r7, #12]
 8008d3e:	6812      	ldr	r2, [r2, #0]
 8008d40:	68d2      	ldr	r2, [r2, #12]
 8008d42:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008d46:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	68fa      	ldr	r2, [r7, #12]
 8008d4e:	6812      	ldr	r2, [r2, #0]
 8008d50:	6952      	ldr	r2, [r2, #20]
 8008d52:	f022 0201 	bic.w	r2, r2, #1
 8008d56:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	2220      	movs	r2, #32
 8008d5c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	2220      	movs	r2, #32
 8008d64:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_TIMEOUT;
 8008d70:	2303      	movs	r3, #3
 8008d72:	e00f      	b.n	8008d94 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	681a      	ldr	r2, [r3, #0]
 8008d7a:	68bb      	ldr	r3, [r7, #8]
 8008d7c:	401a      	ands	r2, r3
 8008d7e:	68bb      	ldr	r3, [r7, #8]
 8008d80:	429a      	cmp	r2, r3
 8008d82:	bf0c      	ite	eq
 8008d84:	2301      	moveq	r3, #1
 8008d86:	2300      	movne	r3, #0
 8008d88:	b2db      	uxtb	r3, r3
 8008d8a:	461a      	mov	r2, r3
 8008d8c:	79fb      	ldrb	r3, [r7, #7]
 8008d8e:	429a      	cmp	r2, r3
 8008d90:	d0c3      	beq.n	8008d1a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 8008d92:	2300      	movs	r3, #0
}
 8008d94:	4618      	mov	r0, r3
 8008d96:	3710      	adds	r7, #16
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	bd80      	pop	{r7, pc}

08008d9c <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d9e:	b085      	sub	sp, #20
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8008da4:	2300      	movs	r3, #0
 8008da6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	691b      	ldr	r3, [r3, #16]
 8008dae:	60fb      	str	r3, [r7, #12]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8008db6:	60fb      	str	r3, [r7, #12]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	68db      	ldr	r3, [r3, #12]
 8008dbc:	68fa      	ldr	r2, [r7, #12]
 8008dbe:	4313      	orrs	r3, r2
 8008dc0:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	68fa      	ldr	r2, [r7, #12]
 8008dc8:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	68db      	ldr	r3, [r3, #12]
 8008dd0:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8008dd8:	f023 030c 	bic.w	r3, r3, #12
 8008ddc:	60fb      	str	r3, [r7, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	689a      	ldr	r2, [r3, #8]
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	691b      	ldr	r3, [r3, #16]
 8008de6:	431a      	orrs	r2, r3
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	695b      	ldr	r3, [r3, #20]
 8008dec:	431a      	orrs	r2, r3
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	69db      	ldr	r3, [r3, #28]
 8008df2:	4313      	orrs	r3, r2
 8008df4:	68fa      	ldr	r2, [r7, #12]
 8008df6:	4313      	orrs	r3, r2
 8008df8:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	68fa      	ldr	r2, [r7, #12]
 8008e00:	60da      	str	r2, [r3, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	695b      	ldr	r3, [r3, #20]
 8008e08:	60fb      	str	r3, [r7, #12]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e10:	60fb      	str	r3, [r7, #12]
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	699b      	ldr	r3, [r3, #24]
 8008e16:	68fa      	ldr	r2, [r7, #12]
 8008e18:	4313      	orrs	r3, r2
 8008e1a:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	68fa      	ldr	r2, [r7, #12]
 8008e22:	615a      	str	r2, [r3, #20]
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	69db      	ldr	r3, [r3, #28]
 8008e28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e2c:	f040 80e4 	bne.w	8008ff8 <UART_SetConfig+0x25c>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	4aab      	ldr	r2, [pc, #684]	; (80090e4 <UART_SetConfig+0x348>)
 8008e36:	4293      	cmp	r3, r2
 8008e38:	d004      	beq.n	8008e44 <UART_SetConfig+0xa8>
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	4aaa      	ldr	r2, [pc, #680]	; (80090e8 <UART_SetConfig+0x34c>)
 8008e40:	4293      	cmp	r3, r2
 8008e42:	d16c      	bne.n	8008f1e <UART_SetConfig+0x182>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681c      	ldr	r4, [r3, #0]
 8008e48:	f7ff f818 	bl	8007e7c <HAL_RCC_GetPCLK2Freq>
 8008e4c:	4602      	mov	r2, r0
 8008e4e:	4613      	mov	r3, r2
 8008e50:	009b      	lsls	r3, r3, #2
 8008e52:	4413      	add	r3, r2
 8008e54:	009a      	lsls	r2, r3, #2
 8008e56:	441a      	add	r2, r3
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	685b      	ldr	r3, [r3, #4]
 8008e5c:	005b      	lsls	r3, r3, #1
 8008e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e62:	4aa2      	ldr	r2, [pc, #648]	; (80090ec <UART_SetConfig+0x350>)
 8008e64:	fba2 2303 	umull	r2, r3, r2, r3
 8008e68:	095b      	lsrs	r3, r3, #5
 8008e6a:	011d      	lsls	r5, r3, #4
 8008e6c:	f7ff f806 	bl	8007e7c <HAL_RCC_GetPCLK2Freq>
 8008e70:	4602      	mov	r2, r0
 8008e72:	4613      	mov	r3, r2
 8008e74:	009b      	lsls	r3, r3, #2
 8008e76:	4413      	add	r3, r2
 8008e78:	009a      	lsls	r2, r3, #2
 8008e7a:	441a      	add	r2, r3
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	685b      	ldr	r3, [r3, #4]
 8008e80:	005b      	lsls	r3, r3, #1
 8008e82:	fbb2 f6f3 	udiv	r6, r2, r3
 8008e86:	f7fe fff9 	bl	8007e7c <HAL_RCC_GetPCLK2Freq>
 8008e8a:	4602      	mov	r2, r0
 8008e8c:	4613      	mov	r3, r2
 8008e8e:	009b      	lsls	r3, r3, #2
 8008e90:	4413      	add	r3, r2
 8008e92:	009a      	lsls	r2, r3, #2
 8008e94:	441a      	add	r2, r3
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	685b      	ldr	r3, [r3, #4]
 8008e9a:	005b      	lsls	r3, r3, #1
 8008e9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ea0:	4a92      	ldr	r2, [pc, #584]	; (80090ec <UART_SetConfig+0x350>)
 8008ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8008ea6:	095b      	lsrs	r3, r3, #5
 8008ea8:	2264      	movs	r2, #100	; 0x64
 8008eaa:	fb02 f303 	mul.w	r3, r2, r3
 8008eae:	1af3      	subs	r3, r6, r3
 8008eb0:	00db      	lsls	r3, r3, #3
 8008eb2:	3332      	adds	r3, #50	; 0x32
 8008eb4:	4a8d      	ldr	r2, [pc, #564]	; (80090ec <UART_SetConfig+0x350>)
 8008eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8008eba:	095b      	lsrs	r3, r3, #5
 8008ebc:	005b      	lsls	r3, r3, #1
 8008ebe:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008ec2:	441d      	add	r5, r3
 8008ec4:	f7fe ffda 	bl	8007e7c <HAL_RCC_GetPCLK2Freq>
 8008ec8:	4602      	mov	r2, r0
 8008eca:	4613      	mov	r3, r2
 8008ecc:	009b      	lsls	r3, r3, #2
 8008ece:	4413      	add	r3, r2
 8008ed0:	009a      	lsls	r2, r3, #2
 8008ed2:	441a      	add	r2, r3
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	685b      	ldr	r3, [r3, #4]
 8008ed8:	005b      	lsls	r3, r3, #1
 8008eda:	fbb2 f6f3 	udiv	r6, r2, r3
 8008ede:	f7fe ffcd 	bl	8007e7c <HAL_RCC_GetPCLK2Freq>
 8008ee2:	4602      	mov	r2, r0
 8008ee4:	4613      	mov	r3, r2
 8008ee6:	009b      	lsls	r3, r3, #2
 8008ee8:	4413      	add	r3, r2
 8008eea:	009a      	lsls	r2, r3, #2
 8008eec:	441a      	add	r2, r3
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	685b      	ldr	r3, [r3, #4]
 8008ef2:	005b      	lsls	r3, r3, #1
 8008ef4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ef8:	4a7c      	ldr	r2, [pc, #496]	; (80090ec <UART_SetConfig+0x350>)
 8008efa:	fba2 2303 	umull	r2, r3, r2, r3
 8008efe:	095b      	lsrs	r3, r3, #5
 8008f00:	2264      	movs	r2, #100	; 0x64
 8008f02:	fb02 f303 	mul.w	r3, r2, r3
 8008f06:	1af3      	subs	r3, r6, r3
 8008f08:	00db      	lsls	r3, r3, #3
 8008f0a:	3332      	adds	r3, #50	; 0x32
 8008f0c:	4a77      	ldr	r2, [pc, #476]	; (80090ec <UART_SetConfig+0x350>)
 8008f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8008f12:	095b      	lsrs	r3, r3, #5
 8008f14:	f003 0307 	and.w	r3, r3, #7
 8008f18:	442b      	add	r3, r5
 8008f1a:	60a3      	str	r3, [r4, #8]
 8008f1c:	e154      	b.n	80091c8 <UART_SetConfig+0x42c>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681c      	ldr	r4, [r3, #0]
 8008f22:	f7fe ff97 	bl	8007e54 <HAL_RCC_GetPCLK1Freq>
 8008f26:	4602      	mov	r2, r0
 8008f28:	4613      	mov	r3, r2
 8008f2a:	009b      	lsls	r3, r3, #2
 8008f2c:	4413      	add	r3, r2
 8008f2e:	009a      	lsls	r2, r3, #2
 8008f30:	441a      	add	r2, r3
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	685b      	ldr	r3, [r3, #4]
 8008f36:	005b      	lsls	r3, r3, #1
 8008f38:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f3c:	4a6b      	ldr	r2, [pc, #428]	; (80090ec <UART_SetConfig+0x350>)
 8008f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8008f42:	095b      	lsrs	r3, r3, #5
 8008f44:	011d      	lsls	r5, r3, #4
 8008f46:	f7fe ff85 	bl	8007e54 <HAL_RCC_GetPCLK1Freq>
 8008f4a:	4602      	mov	r2, r0
 8008f4c:	4613      	mov	r3, r2
 8008f4e:	009b      	lsls	r3, r3, #2
 8008f50:	4413      	add	r3, r2
 8008f52:	009a      	lsls	r2, r3, #2
 8008f54:	441a      	add	r2, r3
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	685b      	ldr	r3, [r3, #4]
 8008f5a:	005b      	lsls	r3, r3, #1
 8008f5c:	fbb2 f6f3 	udiv	r6, r2, r3
 8008f60:	f7fe ff78 	bl	8007e54 <HAL_RCC_GetPCLK1Freq>
 8008f64:	4602      	mov	r2, r0
 8008f66:	4613      	mov	r3, r2
 8008f68:	009b      	lsls	r3, r3, #2
 8008f6a:	4413      	add	r3, r2
 8008f6c:	009a      	lsls	r2, r3, #2
 8008f6e:	441a      	add	r2, r3
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	685b      	ldr	r3, [r3, #4]
 8008f74:	005b      	lsls	r3, r3, #1
 8008f76:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f7a:	4a5c      	ldr	r2, [pc, #368]	; (80090ec <UART_SetConfig+0x350>)
 8008f7c:	fba2 2303 	umull	r2, r3, r2, r3
 8008f80:	095b      	lsrs	r3, r3, #5
 8008f82:	2264      	movs	r2, #100	; 0x64
 8008f84:	fb02 f303 	mul.w	r3, r2, r3
 8008f88:	1af3      	subs	r3, r6, r3
 8008f8a:	00db      	lsls	r3, r3, #3
 8008f8c:	3332      	adds	r3, #50	; 0x32
 8008f8e:	4a57      	ldr	r2, [pc, #348]	; (80090ec <UART_SetConfig+0x350>)
 8008f90:	fba2 2303 	umull	r2, r3, r2, r3
 8008f94:	095b      	lsrs	r3, r3, #5
 8008f96:	005b      	lsls	r3, r3, #1
 8008f98:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008f9c:	441d      	add	r5, r3
 8008f9e:	f7fe ff59 	bl	8007e54 <HAL_RCC_GetPCLK1Freq>
 8008fa2:	4602      	mov	r2, r0
 8008fa4:	4613      	mov	r3, r2
 8008fa6:	009b      	lsls	r3, r3, #2
 8008fa8:	4413      	add	r3, r2
 8008faa:	009a      	lsls	r2, r3, #2
 8008fac:	441a      	add	r2, r3
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	685b      	ldr	r3, [r3, #4]
 8008fb2:	005b      	lsls	r3, r3, #1
 8008fb4:	fbb2 f6f3 	udiv	r6, r2, r3
 8008fb8:	f7fe ff4c 	bl	8007e54 <HAL_RCC_GetPCLK1Freq>
 8008fbc:	4602      	mov	r2, r0
 8008fbe:	4613      	mov	r3, r2
 8008fc0:	009b      	lsls	r3, r3, #2
 8008fc2:	4413      	add	r3, r2
 8008fc4:	009a      	lsls	r2, r3, #2
 8008fc6:	441a      	add	r2, r3
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	685b      	ldr	r3, [r3, #4]
 8008fcc:	005b      	lsls	r3, r3, #1
 8008fce:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fd2:	4a46      	ldr	r2, [pc, #280]	; (80090ec <UART_SetConfig+0x350>)
 8008fd4:	fba2 2303 	umull	r2, r3, r2, r3
 8008fd8:	095b      	lsrs	r3, r3, #5
 8008fda:	2264      	movs	r2, #100	; 0x64
 8008fdc:	fb02 f303 	mul.w	r3, r2, r3
 8008fe0:	1af3      	subs	r3, r6, r3
 8008fe2:	00db      	lsls	r3, r3, #3
 8008fe4:	3332      	adds	r3, #50	; 0x32
 8008fe6:	4a41      	ldr	r2, [pc, #260]	; (80090ec <UART_SetConfig+0x350>)
 8008fe8:	fba2 2303 	umull	r2, r3, r2, r3
 8008fec:	095b      	lsrs	r3, r3, #5
 8008fee:	f003 0307 	and.w	r3, r3, #7
 8008ff2:	442b      	add	r3, r5
 8008ff4:	60a3      	str	r3, [r4, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8008ff6:	e0e7      	b.n	80091c8 <UART_SetConfig+0x42c>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	4a39      	ldr	r2, [pc, #228]	; (80090e4 <UART_SetConfig+0x348>)
 8008ffe:	4293      	cmp	r3, r2
 8009000:	d004      	beq.n	800900c <UART_SetConfig+0x270>
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	4a38      	ldr	r2, [pc, #224]	; (80090e8 <UART_SetConfig+0x34c>)
 8009008:	4293      	cmp	r3, r2
 800900a:	d171      	bne.n	80090f0 <UART_SetConfig+0x354>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681c      	ldr	r4, [r3, #0]
 8009010:	f7fe ff34 	bl	8007e7c <HAL_RCC_GetPCLK2Freq>
 8009014:	4602      	mov	r2, r0
 8009016:	4613      	mov	r3, r2
 8009018:	009b      	lsls	r3, r3, #2
 800901a:	4413      	add	r3, r2
 800901c:	009a      	lsls	r2, r3, #2
 800901e:	441a      	add	r2, r3
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	685b      	ldr	r3, [r3, #4]
 8009024:	009b      	lsls	r3, r3, #2
 8009026:	fbb2 f3f3 	udiv	r3, r2, r3
 800902a:	4a30      	ldr	r2, [pc, #192]	; (80090ec <UART_SetConfig+0x350>)
 800902c:	fba2 2303 	umull	r2, r3, r2, r3
 8009030:	095b      	lsrs	r3, r3, #5
 8009032:	011d      	lsls	r5, r3, #4
 8009034:	f7fe ff22 	bl	8007e7c <HAL_RCC_GetPCLK2Freq>
 8009038:	4602      	mov	r2, r0
 800903a:	4613      	mov	r3, r2
 800903c:	009b      	lsls	r3, r3, #2
 800903e:	4413      	add	r3, r2
 8009040:	009a      	lsls	r2, r3, #2
 8009042:	441a      	add	r2, r3
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	685b      	ldr	r3, [r3, #4]
 8009048:	009b      	lsls	r3, r3, #2
 800904a:	fbb2 f6f3 	udiv	r6, r2, r3
 800904e:	f7fe ff15 	bl	8007e7c <HAL_RCC_GetPCLK2Freq>
 8009052:	4602      	mov	r2, r0
 8009054:	4613      	mov	r3, r2
 8009056:	009b      	lsls	r3, r3, #2
 8009058:	4413      	add	r3, r2
 800905a:	009a      	lsls	r2, r3, #2
 800905c:	441a      	add	r2, r3
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	685b      	ldr	r3, [r3, #4]
 8009062:	009b      	lsls	r3, r3, #2
 8009064:	fbb2 f3f3 	udiv	r3, r2, r3
 8009068:	4a20      	ldr	r2, [pc, #128]	; (80090ec <UART_SetConfig+0x350>)
 800906a:	fba2 2303 	umull	r2, r3, r2, r3
 800906e:	095b      	lsrs	r3, r3, #5
 8009070:	2264      	movs	r2, #100	; 0x64
 8009072:	fb02 f303 	mul.w	r3, r2, r3
 8009076:	1af3      	subs	r3, r6, r3
 8009078:	011b      	lsls	r3, r3, #4
 800907a:	3332      	adds	r3, #50	; 0x32
 800907c:	4a1b      	ldr	r2, [pc, #108]	; (80090ec <UART_SetConfig+0x350>)
 800907e:	fba2 2303 	umull	r2, r3, r2, r3
 8009082:	095b      	lsrs	r3, r3, #5
 8009084:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009088:	441d      	add	r5, r3
 800908a:	f7fe fef7 	bl	8007e7c <HAL_RCC_GetPCLK2Freq>
 800908e:	4602      	mov	r2, r0
 8009090:	4613      	mov	r3, r2
 8009092:	009b      	lsls	r3, r3, #2
 8009094:	4413      	add	r3, r2
 8009096:	009a      	lsls	r2, r3, #2
 8009098:	441a      	add	r2, r3
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	685b      	ldr	r3, [r3, #4]
 800909e:	009b      	lsls	r3, r3, #2
 80090a0:	fbb2 f6f3 	udiv	r6, r2, r3
 80090a4:	f7fe feea 	bl	8007e7c <HAL_RCC_GetPCLK2Freq>
 80090a8:	4602      	mov	r2, r0
 80090aa:	4613      	mov	r3, r2
 80090ac:	009b      	lsls	r3, r3, #2
 80090ae:	4413      	add	r3, r2
 80090b0:	009a      	lsls	r2, r3, #2
 80090b2:	441a      	add	r2, r3
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	685b      	ldr	r3, [r3, #4]
 80090b8:	009b      	lsls	r3, r3, #2
 80090ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80090be:	4a0b      	ldr	r2, [pc, #44]	; (80090ec <UART_SetConfig+0x350>)
 80090c0:	fba2 2303 	umull	r2, r3, r2, r3
 80090c4:	095b      	lsrs	r3, r3, #5
 80090c6:	2264      	movs	r2, #100	; 0x64
 80090c8:	fb02 f303 	mul.w	r3, r2, r3
 80090cc:	1af3      	subs	r3, r6, r3
 80090ce:	011b      	lsls	r3, r3, #4
 80090d0:	3332      	adds	r3, #50	; 0x32
 80090d2:	4a06      	ldr	r2, [pc, #24]	; (80090ec <UART_SetConfig+0x350>)
 80090d4:	fba2 2303 	umull	r2, r3, r2, r3
 80090d8:	095b      	lsrs	r3, r3, #5
 80090da:	f003 030f 	and.w	r3, r3, #15
 80090de:	442b      	add	r3, r5
 80090e0:	60a3      	str	r3, [r4, #8]
 80090e2:	e071      	b.n	80091c8 <UART_SetConfig+0x42c>
 80090e4:	40011000 	.word	0x40011000
 80090e8:	40011400 	.word	0x40011400
 80090ec:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681c      	ldr	r4, [r3, #0]
 80090f4:	f7fe feae 	bl	8007e54 <HAL_RCC_GetPCLK1Freq>
 80090f8:	4602      	mov	r2, r0
 80090fa:	4613      	mov	r3, r2
 80090fc:	009b      	lsls	r3, r3, #2
 80090fe:	4413      	add	r3, r2
 8009100:	009a      	lsls	r2, r3, #2
 8009102:	441a      	add	r2, r3
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	685b      	ldr	r3, [r3, #4]
 8009108:	009b      	lsls	r3, r3, #2
 800910a:	fbb2 f3f3 	udiv	r3, r2, r3
 800910e:	4a30      	ldr	r2, [pc, #192]	; (80091d0 <UART_SetConfig+0x434>)
 8009110:	fba2 2303 	umull	r2, r3, r2, r3
 8009114:	095b      	lsrs	r3, r3, #5
 8009116:	011d      	lsls	r5, r3, #4
 8009118:	f7fe fe9c 	bl	8007e54 <HAL_RCC_GetPCLK1Freq>
 800911c:	4602      	mov	r2, r0
 800911e:	4613      	mov	r3, r2
 8009120:	009b      	lsls	r3, r3, #2
 8009122:	4413      	add	r3, r2
 8009124:	009a      	lsls	r2, r3, #2
 8009126:	441a      	add	r2, r3
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	685b      	ldr	r3, [r3, #4]
 800912c:	009b      	lsls	r3, r3, #2
 800912e:	fbb2 f6f3 	udiv	r6, r2, r3
 8009132:	f7fe fe8f 	bl	8007e54 <HAL_RCC_GetPCLK1Freq>
 8009136:	4602      	mov	r2, r0
 8009138:	4613      	mov	r3, r2
 800913a:	009b      	lsls	r3, r3, #2
 800913c:	4413      	add	r3, r2
 800913e:	009a      	lsls	r2, r3, #2
 8009140:	441a      	add	r2, r3
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	685b      	ldr	r3, [r3, #4]
 8009146:	009b      	lsls	r3, r3, #2
 8009148:	fbb2 f3f3 	udiv	r3, r2, r3
 800914c:	4a20      	ldr	r2, [pc, #128]	; (80091d0 <UART_SetConfig+0x434>)
 800914e:	fba2 2303 	umull	r2, r3, r2, r3
 8009152:	095b      	lsrs	r3, r3, #5
 8009154:	2264      	movs	r2, #100	; 0x64
 8009156:	fb02 f303 	mul.w	r3, r2, r3
 800915a:	1af3      	subs	r3, r6, r3
 800915c:	011b      	lsls	r3, r3, #4
 800915e:	3332      	adds	r3, #50	; 0x32
 8009160:	4a1b      	ldr	r2, [pc, #108]	; (80091d0 <UART_SetConfig+0x434>)
 8009162:	fba2 2303 	umull	r2, r3, r2, r3
 8009166:	095b      	lsrs	r3, r3, #5
 8009168:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800916c:	441d      	add	r5, r3
 800916e:	f7fe fe71 	bl	8007e54 <HAL_RCC_GetPCLK1Freq>
 8009172:	4602      	mov	r2, r0
 8009174:	4613      	mov	r3, r2
 8009176:	009b      	lsls	r3, r3, #2
 8009178:	4413      	add	r3, r2
 800917a:	009a      	lsls	r2, r3, #2
 800917c:	441a      	add	r2, r3
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	685b      	ldr	r3, [r3, #4]
 8009182:	009b      	lsls	r3, r3, #2
 8009184:	fbb2 f6f3 	udiv	r6, r2, r3
 8009188:	f7fe fe64 	bl	8007e54 <HAL_RCC_GetPCLK1Freq>
 800918c:	4602      	mov	r2, r0
 800918e:	4613      	mov	r3, r2
 8009190:	009b      	lsls	r3, r3, #2
 8009192:	4413      	add	r3, r2
 8009194:	009a      	lsls	r2, r3, #2
 8009196:	441a      	add	r2, r3
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	685b      	ldr	r3, [r3, #4]
 800919c:	009b      	lsls	r3, r3, #2
 800919e:	fbb2 f3f3 	udiv	r3, r2, r3
 80091a2:	4a0b      	ldr	r2, [pc, #44]	; (80091d0 <UART_SetConfig+0x434>)
 80091a4:	fba2 2303 	umull	r2, r3, r2, r3
 80091a8:	095b      	lsrs	r3, r3, #5
 80091aa:	2264      	movs	r2, #100	; 0x64
 80091ac:	fb02 f303 	mul.w	r3, r2, r3
 80091b0:	1af3      	subs	r3, r6, r3
 80091b2:	011b      	lsls	r3, r3, #4
 80091b4:	3332      	adds	r3, #50	; 0x32
 80091b6:	4a06      	ldr	r2, [pc, #24]	; (80091d0 <UART_SetConfig+0x434>)
 80091b8:	fba2 2303 	umull	r2, r3, r2, r3
 80091bc:	095b      	lsrs	r3, r3, #5
 80091be:	f003 030f 	and.w	r3, r3, #15
 80091c2:	442b      	add	r3, r5
 80091c4:	60a3      	str	r3, [r4, #8]
}
 80091c6:	e7ff      	b.n	80091c8 <UART_SetConfig+0x42c>
 80091c8:	bf00      	nop
 80091ca:	3714      	adds	r7, #20
 80091cc:	46bd      	mov	sp, r7
 80091ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091d0:	51eb851f 	.word	0x51eb851f

080091d4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80091d4:	b480      	push	{r7}
 80091d6:	b085      	sub	sp, #20
 80091d8:	af00      	add	r7, sp, #0
 80091da:	4603      	mov	r3, r0
 80091dc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80091de:	2300      	movs	r3, #0
 80091e0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80091e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80091e6:	2b84      	cmp	r3, #132	; 0x84
 80091e8:	d005      	beq.n	80091f6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80091ea:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	4413      	add	r3, r2
 80091f2:	3303      	adds	r3, #3
 80091f4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80091f6:	68fb      	ldr	r3, [r7, #12]
}
 80091f8:	4618      	mov	r0, r3
 80091fa:	3714      	adds	r7, #20
 80091fc:	46bd      	mov	sp, r7
 80091fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009202:	4770      	bx	lr

08009204 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8009208:	f001 fb96 	bl	800a938 <vTaskStartScheduler>
  
  return osOK;
 800920c:	2300      	movs	r3, #0
}
 800920e:	4618      	mov	r0, r3
 8009210:	bd80      	pop	{r7, pc}

08009212 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8009212:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009214:	b087      	sub	sp, #28
 8009216:	af02      	add	r7, sp, #8
 8009218:	6078      	str	r0, [r7, #4]
 800921a:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	685c      	ldr	r4, [r3, #4]
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009228:	b29e      	uxth	r6, r3
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009230:	4618      	mov	r0, r3
 8009232:	f7ff ffcf 	bl	80091d4 <makeFreeRtosPriority>
 8009236:	4602      	mov	r2, r0
 8009238:	f107 030c 	add.w	r3, r7, #12
 800923c:	9301      	str	r3, [sp, #4]
 800923e:	9200      	str	r2, [sp, #0]
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	4632      	mov	r2, r6
 8009244:	4629      	mov	r1, r5
 8009246:	4620      	mov	r0, r4
 8009248:	f001 f8e6 	bl	800a418 <xTaskCreate>
 800924c:	4603      	mov	r3, r0
 800924e:	2b01      	cmp	r3, #1
 8009250:	d001      	beq.n	8009256 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8009252:	2300      	movs	r3, #0
 8009254:	e000      	b.n	8009258 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8009256:	68fb      	ldr	r3, [r7, #12]
}
 8009258:	4618      	mov	r0, r3
 800925a:	3714      	adds	r7, #20
 800925c:	46bd      	mov	sp, r7
 800925e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009260 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b084      	sub	sp, #16
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d001      	beq.n	8009276 <osDelay+0x16>
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	e000      	b.n	8009278 <osDelay+0x18>
 8009276:	2301      	movs	r3, #1
 8009278:	4618      	mov	r0, r3
 800927a:	f001 f9f7 	bl	800a66c <vTaskDelay>
  
  return osOK;
 800927e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8009280:	4618      	mov	r0, r3
 8009282:	3710      	adds	r7, #16
 8009284:	46bd      	mov	sp, r7
 8009286:	bd80      	pop	{r7, pc}

08009288 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b082      	sub	sp, #8
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 8009290:	2001      	movs	r0, #1
 8009292:	f000 fd8d 	bl	8009db0 <xQueueCreateMutex>
 8009296:	4603      	mov	r3, r0
#endif
#else
  return NULL;
#endif
}
 8009298:	4618      	mov	r0, r3
 800929a:	3708      	adds	r7, #8
 800929c:	46bd      	mov	sp, r7
 800929e:	bd80      	pop	{r7, pc}

080092a0 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	af00      	add	r7, sp, #0

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80092a4:	f001 ff2c 	bl	800b100 <xTaskGetSchedulerState>
 80092a8:	4603      	mov	r3, r0
 80092aa:	2b01      	cmp	r3, #1
 80092ac:	d001      	beq.n	80092b2 <osSystickHandler+0x12>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 80092ae:	f000 fa4b 	bl	8009748 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 80092b2:	bf00      	nop
 80092b4:	bd80      	pop	{r7, pc}

080092b6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80092b6:	b480      	push	{r7}
 80092b8:	b083      	sub	sp, #12
 80092ba:	af00      	add	r7, sp, #0
 80092bc:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	f103 0208 	add.w	r2, r3, #8
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f04f 32ff 	mov.w	r2, #4294967295
 80092ce:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	f103 0208 	add.w	r2, r3, #8
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	f103 0208 	add.w	r2, r3, #8
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2200      	movs	r2, #0
 80092e8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80092ea:	bf00      	nop
 80092ec:	370c      	adds	r7, #12
 80092ee:	46bd      	mov	sp, r7
 80092f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f4:	4770      	bx	lr

080092f6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80092f6:	b480      	push	{r7}
 80092f8:	b083      	sub	sp, #12
 80092fa:	af00      	add	r7, sp, #0
 80092fc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	2200      	movs	r2, #0
 8009302:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009304:	bf00      	nop
 8009306:	370c      	adds	r7, #12
 8009308:	46bd      	mov	sp, r7
 800930a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930e:	4770      	bx	lr

08009310 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009310:	b480      	push	{r7}
 8009312:	b085      	sub	sp, #20
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
 8009318:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	685b      	ldr	r3, [r3, #4]
 800931e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009320:	683b      	ldr	r3, [r7, #0]
 8009322:	68fa      	ldr	r2, [r7, #12]
 8009324:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	689a      	ldr	r2, [r3, #8]
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	689b      	ldr	r3, [r3, #8]
 8009332:	683a      	ldr	r2, [r7, #0]
 8009334:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	683a      	ldr	r2, [r7, #0]
 800933a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	687a      	ldr	r2, [r7, #4]
 8009340:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	1c5a      	adds	r2, r3, #1
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	601a      	str	r2, [r3, #0]
}
 800934c:	bf00      	nop
 800934e:	3714      	adds	r7, #20
 8009350:	46bd      	mov	sp, r7
 8009352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009356:	4770      	bx	lr

08009358 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009358:	b480      	push	{r7}
 800935a:	b085      	sub	sp, #20
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
 8009360:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009368:	68bb      	ldr	r3, [r7, #8]
 800936a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800936e:	d103      	bne.n	8009378 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	691b      	ldr	r3, [r3, #16]
 8009374:	60fb      	str	r3, [r7, #12]
 8009376:	e00c      	b.n	8009392 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	3308      	adds	r3, #8
 800937c:	60fb      	str	r3, [r7, #12]
 800937e:	e002      	b.n	8009386 <vListInsert+0x2e>
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	685b      	ldr	r3, [r3, #4]
 8009384:	60fb      	str	r3, [r7, #12]
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	685b      	ldr	r3, [r3, #4]
 800938a:	681a      	ldr	r2, [r3, #0]
 800938c:	68bb      	ldr	r3, [r7, #8]
 800938e:	429a      	cmp	r2, r3
 8009390:	d9f6      	bls.n	8009380 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	685a      	ldr	r2, [r3, #4]
 8009396:	683b      	ldr	r3, [r7, #0]
 8009398:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800939a:	683b      	ldr	r3, [r7, #0]
 800939c:	685b      	ldr	r3, [r3, #4]
 800939e:	683a      	ldr	r2, [r7, #0]
 80093a0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	68fa      	ldr	r2, [r7, #12]
 80093a6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	683a      	ldr	r2, [r7, #0]
 80093ac:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	687a      	ldr	r2, [r7, #4]
 80093b2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	1c5a      	adds	r2, r3, #1
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	601a      	str	r2, [r3, #0]
}
 80093be:	bf00      	nop
 80093c0:	3714      	adds	r7, #20
 80093c2:	46bd      	mov	sp, r7
 80093c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c8:	4770      	bx	lr

080093ca <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80093ca:	b480      	push	{r7}
 80093cc:	b085      	sub	sp, #20
 80093ce:	af00      	add	r7, sp, #0
 80093d0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	691b      	ldr	r3, [r3, #16]
 80093d6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	685b      	ldr	r3, [r3, #4]
 80093dc:	687a      	ldr	r2, [r7, #4]
 80093de:	6892      	ldr	r2, [r2, #8]
 80093e0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	689b      	ldr	r3, [r3, #8]
 80093e6:	687a      	ldr	r2, [r7, #4]
 80093e8:	6852      	ldr	r2, [r2, #4]
 80093ea:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	685a      	ldr	r2, [r3, #4]
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	429a      	cmp	r2, r3
 80093f4:	d103      	bne.n	80093fe <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	689a      	ldr	r2, [r3, #8]
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	2200      	movs	r2, #0
 8009402:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	1e5a      	subs	r2, r3, #1
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	681b      	ldr	r3, [r3, #0]
}
 8009412:	4618      	mov	r0, r3
 8009414:	3714      	adds	r7, #20
 8009416:	46bd      	mov	sp, r7
 8009418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941c:	4770      	bx	lr
	...

08009420 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009420:	b480      	push	{r7}
 8009422:	b085      	sub	sp, #20
 8009424:	af00      	add	r7, sp, #0
 8009426:	60f8      	str	r0, [r7, #12]
 8009428:	60b9      	str	r1, [r7, #8]
 800942a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	3b04      	subs	r3, #4
 8009430:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009438:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	3b04      	subs	r3, #4
 800943e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009440:	68bb      	ldr	r3, [r7, #8]
 8009442:	f023 0201 	bic.w	r2, r3, #1
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	3b04      	subs	r3, #4
 800944e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009450:	4a0c      	ldr	r2, [pc, #48]	; (8009484 <pxPortInitialiseStack+0x64>)
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	3b14      	subs	r3, #20
 800945a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800945c:	687a      	ldr	r2, [r7, #4]
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	3b04      	subs	r3, #4
 8009466:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	f06f 0202 	mvn.w	r2, #2
 800946e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	3b20      	subs	r3, #32
 8009474:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009476:	68fb      	ldr	r3, [r7, #12]
}
 8009478:	4618      	mov	r0, r3
 800947a:	3714      	adds	r7, #20
 800947c:	46bd      	mov	sp, r7
 800947e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009482:	4770      	bx	lr
 8009484:	08009489 	.word	0x08009489

08009488 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009488:	b480      	push	{r7}
 800948a:	b083      	sub	sp, #12
 800948c:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800948e:	4b0c      	ldr	r3, [pc, #48]	; (80094c0 <prvTaskExitError+0x38>)
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009496:	d009      	beq.n	80094ac <prvTaskExitError+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800949c:	f383 8811 	msr	BASEPRI, r3
 80094a0:	f3bf 8f6f 	isb	sy
 80094a4:	f3bf 8f4f 	dsb	sy
 80094a8:	607b      	str	r3, [r7, #4]
 80094aa:	e7fe      	b.n	80094aa <prvTaskExitError+0x22>
 80094ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094b0:	f383 8811 	msr	BASEPRI, r3
 80094b4:	f3bf 8f6f 	isb	sy
 80094b8:	f3bf 8f4f 	dsb	sy
 80094bc:	603b      	str	r3, [r7, #0]
	portDISABLE_INTERRUPTS();
	for( ;; );
 80094be:	e7fe      	b.n	80094be <prvTaskExitError+0x36>
 80094c0:	20000024 	.word	0x20000024
	...

080094d0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80094d0:	4b07      	ldr	r3, [pc, #28]	; (80094f0 <pxCurrentTCBConst2>)
 80094d2:	6819      	ldr	r1, [r3, #0]
 80094d4:	6808      	ldr	r0, [r1, #0]
 80094d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094da:	f380 8809 	msr	PSP, r0
 80094de:	f3bf 8f6f 	isb	sy
 80094e2:	f04f 0000 	mov.w	r0, #0
 80094e6:	f380 8811 	msr	BASEPRI, r0
 80094ea:	4770      	bx	lr
 80094ec:	f3af 8000 	nop.w

080094f0 <pxCurrentTCBConst2>:
 80094f0:	20003cdc 	.word	0x20003cdc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80094f4:	bf00      	nop
 80094f6:	bf00      	nop

080094f8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80094f8:	4806      	ldr	r0, [pc, #24]	; (8009514 <prvPortStartFirstTask+0x1c>)
 80094fa:	6800      	ldr	r0, [r0, #0]
 80094fc:	6800      	ldr	r0, [r0, #0]
 80094fe:	f380 8808 	msr	MSP, r0
 8009502:	b662      	cpsie	i
 8009504:	b661      	cpsie	f
 8009506:	f3bf 8f4f 	dsb	sy
 800950a:	f3bf 8f6f 	isb	sy
 800950e:	df00      	svc	0
 8009510:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009512:	bf00      	nop
 8009514:	e000ed08 	.word	0xe000ed08

08009518 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b086      	sub	sp, #24
 800951c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800951e:	4b3b      	ldr	r3, [pc, #236]	; (800960c <xPortStartScheduler+0xf4>)
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	4a3b      	ldr	r2, [pc, #236]	; (8009610 <xPortStartScheduler+0xf8>)
 8009524:	4293      	cmp	r3, r2
 8009526:	d109      	bne.n	800953c <xPortStartScheduler+0x24>
 8009528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800952c:	f383 8811 	msr	BASEPRI, r3
 8009530:	f3bf 8f6f 	isb	sy
 8009534:	f3bf 8f4f 	dsb	sy
 8009538:	613b      	str	r3, [r7, #16]
 800953a:	e7fe      	b.n	800953a <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800953c:	4b33      	ldr	r3, [pc, #204]	; (800960c <xPortStartScheduler+0xf4>)
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	4a34      	ldr	r2, [pc, #208]	; (8009614 <xPortStartScheduler+0xfc>)
 8009542:	4293      	cmp	r3, r2
 8009544:	d109      	bne.n	800955a <xPortStartScheduler+0x42>
 8009546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800954a:	f383 8811 	msr	BASEPRI, r3
 800954e:	f3bf 8f6f 	isb	sy
 8009552:	f3bf 8f4f 	dsb	sy
 8009556:	60fb      	str	r3, [r7, #12]
 8009558:	e7fe      	b.n	8009558 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800955a:	4b2f      	ldr	r3, [pc, #188]	; (8009618 <xPortStartScheduler+0x100>)
 800955c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800955e:	697b      	ldr	r3, [r7, #20]
 8009560:	781b      	ldrb	r3, [r3, #0]
 8009562:	b2db      	uxtb	r3, r3
 8009564:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009566:	697b      	ldr	r3, [r7, #20]
 8009568:	22ff      	movs	r2, #255	; 0xff
 800956a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800956c:	697b      	ldr	r3, [r7, #20]
 800956e:	781b      	ldrb	r3, [r3, #0]
 8009570:	b2db      	uxtb	r3, r3
 8009572:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009574:	79fb      	ldrb	r3, [r7, #7]
 8009576:	b2db      	uxtb	r3, r3
 8009578:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800957c:	b2da      	uxtb	r2, r3
 800957e:	4b27      	ldr	r3, [pc, #156]	; (800961c <xPortStartScheduler+0x104>)
 8009580:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009582:	4b27      	ldr	r3, [pc, #156]	; (8009620 <xPortStartScheduler+0x108>)
 8009584:	2207      	movs	r2, #7
 8009586:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009588:	e009      	b.n	800959e <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800958a:	4b25      	ldr	r3, [pc, #148]	; (8009620 <xPortStartScheduler+0x108>)
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	3b01      	subs	r3, #1
 8009590:	4a23      	ldr	r2, [pc, #140]	; (8009620 <xPortStartScheduler+0x108>)
 8009592:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009594:	79fb      	ldrb	r3, [r7, #7]
 8009596:	b2db      	uxtb	r3, r3
 8009598:	005b      	lsls	r3, r3, #1
 800959a:	b2db      	uxtb	r3, r3
 800959c:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800959e:	79fb      	ldrb	r3, [r7, #7]
 80095a0:	b2db      	uxtb	r3, r3
 80095a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095a6:	2b80      	cmp	r3, #128	; 0x80
 80095a8:	d0ef      	beq.n	800958a <xPortStartScheduler+0x72>
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80095aa:	4b1d      	ldr	r3, [pc, #116]	; (8009620 <xPortStartScheduler+0x108>)
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	021b      	lsls	r3, r3, #8
 80095b0:	4a1b      	ldr	r2, [pc, #108]	; (8009620 <xPortStartScheduler+0x108>)
 80095b2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80095b4:	4b1a      	ldr	r3, [pc, #104]	; (8009620 <xPortStartScheduler+0x108>)
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80095bc:	4a18      	ldr	r2, [pc, #96]	; (8009620 <xPortStartScheduler+0x108>)
 80095be:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80095c0:	68bb      	ldr	r3, [r7, #8]
 80095c2:	b2da      	uxtb	r2, r3
 80095c4:	697b      	ldr	r3, [r7, #20]
 80095c6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80095c8:	4a16      	ldr	r2, [pc, #88]	; (8009624 <xPortStartScheduler+0x10c>)
 80095ca:	4b16      	ldr	r3, [pc, #88]	; (8009624 <xPortStartScheduler+0x10c>)
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80095d2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80095d4:	4a13      	ldr	r2, [pc, #76]	; (8009624 <xPortStartScheduler+0x10c>)
 80095d6:	4b13      	ldr	r3, [pc, #76]	; (8009624 <xPortStartScheduler+0x10c>)
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80095de:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80095e0:	f000 f8d2 	bl	8009788 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80095e4:	4b10      	ldr	r3, [pc, #64]	; (8009628 <xPortStartScheduler+0x110>)
 80095e6:	2200      	movs	r2, #0
 80095e8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80095ea:	f000 f8e9 	bl	80097c0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80095ee:	4a0f      	ldr	r2, [pc, #60]	; (800962c <xPortStartScheduler+0x114>)
 80095f0:	4b0e      	ldr	r3, [pc, #56]	; (800962c <xPortStartScheduler+0x114>)
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80095f8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80095fa:	f7ff ff7d 	bl	80094f8 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 80095fe:	f7ff ff43 	bl	8009488 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009602:	2300      	movs	r3, #0
}
 8009604:	4618      	mov	r0, r3
 8009606:	3718      	adds	r7, #24
 8009608:	46bd      	mov	sp, r7
 800960a:	bd80      	pop	{r7, pc}
 800960c:	e000ed00 	.word	0xe000ed00
 8009610:	410fc271 	.word	0x410fc271
 8009614:	410fc270 	.word	0x410fc270
 8009618:	e000e400 	.word	0xe000e400
 800961c:	200000bc 	.word	0x200000bc
 8009620:	200000c0 	.word	0x200000c0
 8009624:	e000ed20 	.word	0xe000ed20
 8009628:	20000024 	.word	0x20000024
 800962c:	e000ef34 	.word	0xe000ef34

08009630 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009630:	b480      	push	{r7}
 8009632:	b083      	sub	sp, #12
 8009634:	af00      	add	r7, sp, #0
 8009636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800963a:	f383 8811 	msr	BASEPRI, r3
 800963e:	f3bf 8f6f 	isb	sy
 8009642:	f3bf 8f4f 	dsb	sy
 8009646:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009648:	4b0e      	ldr	r3, [pc, #56]	; (8009684 <vPortEnterCritical+0x54>)
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	3301      	adds	r3, #1
 800964e:	4a0d      	ldr	r2, [pc, #52]	; (8009684 <vPortEnterCritical+0x54>)
 8009650:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009652:	4b0c      	ldr	r3, [pc, #48]	; (8009684 <vPortEnterCritical+0x54>)
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	2b01      	cmp	r3, #1
 8009658:	d10e      	bne.n	8009678 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800965a:	4b0b      	ldr	r3, [pc, #44]	; (8009688 <vPortEnterCritical+0x58>)
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	b2db      	uxtb	r3, r3
 8009660:	2b00      	cmp	r3, #0
 8009662:	d009      	beq.n	8009678 <vPortEnterCritical+0x48>
 8009664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009668:	f383 8811 	msr	BASEPRI, r3
 800966c:	f3bf 8f6f 	isb	sy
 8009670:	f3bf 8f4f 	dsb	sy
 8009674:	603b      	str	r3, [r7, #0]
 8009676:	e7fe      	b.n	8009676 <vPortEnterCritical+0x46>
	}
}
 8009678:	bf00      	nop
 800967a:	370c      	adds	r7, #12
 800967c:	46bd      	mov	sp, r7
 800967e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009682:	4770      	bx	lr
 8009684:	20000024 	.word	0x20000024
 8009688:	e000ed04 	.word	0xe000ed04

0800968c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800968c:	b480      	push	{r7}
 800968e:	b083      	sub	sp, #12
 8009690:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009692:	4b11      	ldr	r3, [pc, #68]	; (80096d8 <vPortExitCritical+0x4c>)
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d109      	bne.n	80096ae <vPortExitCritical+0x22>
 800969a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800969e:	f383 8811 	msr	BASEPRI, r3
 80096a2:	f3bf 8f6f 	isb	sy
 80096a6:	f3bf 8f4f 	dsb	sy
 80096aa:	607b      	str	r3, [r7, #4]
 80096ac:	e7fe      	b.n	80096ac <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80096ae:	4b0a      	ldr	r3, [pc, #40]	; (80096d8 <vPortExitCritical+0x4c>)
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	3b01      	subs	r3, #1
 80096b4:	4a08      	ldr	r2, [pc, #32]	; (80096d8 <vPortExitCritical+0x4c>)
 80096b6:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80096b8:	4b07      	ldr	r3, [pc, #28]	; (80096d8 <vPortExitCritical+0x4c>)
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d104      	bne.n	80096ca <vPortExitCritical+0x3e>
 80096c0:	2300      	movs	r3, #0
 80096c2:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80096ca:	bf00      	nop
 80096cc:	370c      	adds	r7, #12
 80096ce:	46bd      	mov	sp, r7
 80096d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d4:	4770      	bx	lr
 80096d6:	bf00      	nop
 80096d8:	20000024 	.word	0x20000024
 80096dc:	00000000 	.word	0x00000000

080096e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80096e0:	f3ef 8009 	mrs	r0, PSP
 80096e4:	f3bf 8f6f 	isb	sy
 80096e8:	4b15      	ldr	r3, [pc, #84]	; (8009740 <pxCurrentTCBConst>)
 80096ea:	681a      	ldr	r2, [r3, #0]
 80096ec:	f01e 0f10 	tst.w	lr, #16
 80096f0:	bf08      	it	eq
 80096f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80096f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096fa:	6010      	str	r0, [r2, #0]
 80096fc:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8009700:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009704:	f380 8811 	msr	BASEPRI, r0
 8009708:	f3bf 8f4f 	dsb	sy
 800970c:	f3bf 8f6f 	isb	sy
 8009710:	f001 fabe 	bl	800ac90 <vTaskSwitchContext>
 8009714:	f04f 0000 	mov.w	r0, #0
 8009718:	f380 8811 	msr	BASEPRI, r0
 800971c:	bc08      	pop	{r3}
 800971e:	6819      	ldr	r1, [r3, #0]
 8009720:	6808      	ldr	r0, [r1, #0]
 8009722:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009726:	f01e 0f10 	tst.w	lr, #16
 800972a:	bf08      	it	eq
 800972c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009730:	f380 8809 	msr	PSP, r0
 8009734:	f3bf 8f6f 	isb	sy
 8009738:	4770      	bx	lr
 800973a:	bf00      	nop
 800973c:	f3af 8000 	nop.w

08009740 <pxCurrentTCBConst>:
 8009740:	20003cdc 	.word	0x20003cdc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009744:	bf00      	nop
 8009746:	bf00      	nop

08009748 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b082      	sub	sp, #8
 800974c:	af00      	add	r7, sp, #0
	__asm volatile
 800974e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009752:	f383 8811 	msr	BASEPRI, r3
 8009756:	f3bf 8f6f 	isb	sy
 800975a:	f3bf 8f4f 	dsb	sy
 800975e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009760:	f001 f9da 	bl	800ab18 <xTaskIncrementTick>
 8009764:	4603      	mov	r3, r0
 8009766:	2b00      	cmp	r3, #0
 8009768:	d003      	beq.n	8009772 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800976a:	4b06      	ldr	r3, [pc, #24]	; (8009784 <xPortSysTickHandler+0x3c>)
 800976c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009770:	601a      	str	r2, [r3, #0]
 8009772:	2300      	movs	r3, #0
 8009774:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009776:	683b      	ldr	r3, [r7, #0]
 8009778:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800977c:	bf00      	nop
 800977e:	3708      	adds	r7, #8
 8009780:	46bd      	mov	sp, r7
 8009782:	bd80      	pop	{r7, pc}
 8009784:	e000ed04 	.word	0xe000ed04

08009788 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009788:	b480      	push	{r7}
 800978a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800978c:	4a08      	ldr	r2, [pc, #32]	; (80097b0 <vPortSetupTimerInterrupt+0x28>)
 800978e:	4b09      	ldr	r3, [pc, #36]	; (80097b4 <vPortSetupTimerInterrupt+0x2c>)
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	4909      	ldr	r1, [pc, #36]	; (80097b8 <vPortSetupTimerInterrupt+0x30>)
 8009794:	fba1 1303 	umull	r1, r3, r1, r3
 8009798:	099b      	lsrs	r3, r3, #6
 800979a:	3b01      	subs	r3, #1
 800979c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800979e:	4b07      	ldr	r3, [pc, #28]	; (80097bc <vPortSetupTimerInterrupt+0x34>)
 80097a0:	2207      	movs	r2, #7
 80097a2:	601a      	str	r2, [r3, #0]
}
 80097a4:	bf00      	nop
 80097a6:	46bd      	mov	sp, r7
 80097a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ac:	4770      	bx	lr
 80097ae:	bf00      	nop
 80097b0:	e000e014 	.word	0xe000e014
 80097b4:	20000038 	.word	0x20000038
 80097b8:	10624dd3 	.word	0x10624dd3
 80097bc:	e000e010 	.word	0xe000e010

080097c0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80097c0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80097d0 <vPortEnableVFP+0x10>
 80097c4:	6801      	ldr	r1, [r0, #0]
 80097c6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80097ca:	6001      	str	r1, [r0, #0]
 80097cc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80097ce:	bf00      	nop
 80097d0:	e000ed88 	.word	0xe000ed88

080097d4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80097d4:	b480      	push	{r7}
 80097d6:	b085      	sub	sp, #20
 80097d8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 80097da:	f3ef 8305 	mrs	r3, IPSR
 80097de:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	2b0f      	cmp	r3, #15
 80097e4:	d913      	bls.n	800980e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80097e6:	4a16      	ldr	r2, [pc, #88]	; (8009840 <vPortValidateInterruptPriority+0x6c>)
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	4413      	add	r3, r2
 80097ec:	781b      	ldrb	r3, [r3, #0]
 80097ee:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80097f0:	4b14      	ldr	r3, [pc, #80]	; (8009844 <vPortValidateInterruptPriority+0x70>)
 80097f2:	781b      	ldrb	r3, [r3, #0]
 80097f4:	7afa      	ldrb	r2, [r7, #11]
 80097f6:	429a      	cmp	r2, r3
 80097f8:	d209      	bcs.n	800980e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80097fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097fe:	f383 8811 	msr	BASEPRI, r3
 8009802:	f3bf 8f6f 	isb	sy
 8009806:	f3bf 8f4f 	dsb	sy
 800980a:	607b      	str	r3, [r7, #4]
 800980c:	e7fe      	b.n	800980c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800980e:	4b0e      	ldr	r3, [pc, #56]	; (8009848 <vPortValidateInterruptPriority+0x74>)
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009816:	4b0d      	ldr	r3, [pc, #52]	; (800984c <vPortValidateInterruptPriority+0x78>)
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	429a      	cmp	r2, r3
 800981c:	d909      	bls.n	8009832 <vPortValidateInterruptPriority+0x5e>
 800981e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009822:	f383 8811 	msr	BASEPRI, r3
 8009826:	f3bf 8f6f 	isb	sy
 800982a:	f3bf 8f4f 	dsb	sy
 800982e:	603b      	str	r3, [r7, #0]
 8009830:	e7fe      	b.n	8009830 <vPortValidateInterruptPriority+0x5c>
	}
 8009832:	bf00      	nop
 8009834:	3714      	adds	r7, #20
 8009836:	46bd      	mov	sp, r7
 8009838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983c:	4770      	bx	lr
 800983e:	bf00      	nop
 8009840:	e000e3f0 	.word	0xe000e3f0
 8009844:	200000bc 	.word	0x200000bc
 8009848:	e000ed0c 	.word	0xe000ed0c
 800984c:	200000c0 	.word	0x200000c0

08009850 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b08a      	sub	sp, #40	; 0x28
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009858:	2300      	movs	r3, #0
 800985a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800985c:	f001 f8b2 	bl	800a9c4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009860:	4b57      	ldr	r3, [pc, #348]	; (80099c0 <pvPortMalloc+0x170>)
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d101      	bne.n	800986c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009868:	f000 f90c 	bl	8009a84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800986c:	4b55      	ldr	r3, [pc, #340]	; (80099c4 <pvPortMalloc+0x174>)
 800986e:	681a      	ldr	r2, [r3, #0]
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	4013      	ands	r3, r2
 8009874:	2b00      	cmp	r3, #0
 8009876:	f040 808c 	bne.w	8009992 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d01c      	beq.n	80098ba <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8009880:	2208      	movs	r2, #8
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	4413      	add	r3, r2
 8009886:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	f003 0307 	and.w	r3, r3, #7
 800988e:	2b00      	cmp	r3, #0
 8009890:	d013      	beq.n	80098ba <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	f023 0307 	bic.w	r3, r3, #7
 8009898:	3308      	adds	r3, #8
 800989a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	f003 0307 	and.w	r3, r3, #7
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d009      	beq.n	80098ba <pvPortMalloc+0x6a>
 80098a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098aa:	f383 8811 	msr	BASEPRI, r3
 80098ae:	f3bf 8f6f 	isb	sy
 80098b2:	f3bf 8f4f 	dsb	sy
 80098b6:	617b      	str	r3, [r7, #20]
 80098b8:	e7fe      	b.n	80098b8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d068      	beq.n	8009992 <pvPortMalloc+0x142>
 80098c0:	4b41      	ldr	r3, [pc, #260]	; (80099c8 <pvPortMalloc+0x178>)
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	687a      	ldr	r2, [r7, #4]
 80098c6:	429a      	cmp	r2, r3
 80098c8:	d863      	bhi.n	8009992 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80098ca:	4b40      	ldr	r3, [pc, #256]	; (80099cc <pvPortMalloc+0x17c>)
 80098cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80098ce:	4b3f      	ldr	r3, [pc, #252]	; (80099cc <pvPortMalloc+0x17c>)
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80098d4:	e004      	b.n	80098e0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80098d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80098da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80098e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098e2:	685a      	ldr	r2, [r3, #4]
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	429a      	cmp	r2, r3
 80098e8:	d203      	bcs.n	80098f2 <pvPortMalloc+0xa2>
 80098ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d1f1      	bne.n	80098d6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80098f2:	4b33      	ldr	r3, [pc, #204]	; (80099c0 <pvPortMalloc+0x170>)
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098f8:	429a      	cmp	r2, r3
 80098fa:	d04a      	beq.n	8009992 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80098fc:	6a3b      	ldr	r3, [r7, #32]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	2208      	movs	r2, #8
 8009902:	4413      	add	r3, r2
 8009904:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009908:	681a      	ldr	r2, [r3, #0]
 800990a:	6a3b      	ldr	r3, [r7, #32]
 800990c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800990e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009910:	685a      	ldr	r2, [r3, #4]
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	1ad2      	subs	r2, r2, r3
 8009916:	2308      	movs	r3, #8
 8009918:	005b      	lsls	r3, r3, #1
 800991a:	429a      	cmp	r2, r3
 800991c:	d91e      	bls.n	800995c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800991e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	4413      	add	r3, r2
 8009924:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009926:	69bb      	ldr	r3, [r7, #24]
 8009928:	f003 0307 	and.w	r3, r3, #7
 800992c:	2b00      	cmp	r3, #0
 800992e:	d009      	beq.n	8009944 <pvPortMalloc+0xf4>
 8009930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009934:	f383 8811 	msr	BASEPRI, r3
 8009938:	f3bf 8f6f 	isb	sy
 800993c:	f3bf 8f4f 	dsb	sy
 8009940:	613b      	str	r3, [r7, #16]
 8009942:	e7fe      	b.n	8009942 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009946:	685a      	ldr	r2, [r3, #4]
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	1ad2      	subs	r2, r2, r3
 800994c:	69bb      	ldr	r3, [r7, #24]
 800994e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009952:	687a      	ldr	r2, [r7, #4]
 8009954:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009956:	69b8      	ldr	r0, [r7, #24]
 8009958:	f000 f8f6 	bl	8009b48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800995c:	4b1a      	ldr	r3, [pc, #104]	; (80099c8 <pvPortMalloc+0x178>)
 800995e:	681a      	ldr	r2, [r3, #0]
 8009960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009962:	685b      	ldr	r3, [r3, #4]
 8009964:	1ad3      	subs	r3, r2, r3
 8009966:	4a18      	ldr	r2, [pc, #96]	; (80099c8 <pvPortMalloc+0x178>)
 8009968:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800996a:	4b17      	ldr	r3, [pc, #92]	; (80099c8 <pvPortMalloc+0x178>)
 800996c:	681a      	ldr	r2, [r3, #0]
 800996e:	4b18      	ldr	r3, [pc, #96]	; (80099d0 <pvPortMalloc+0x180>)
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	429a      	cmp	r2, r3
 8009974:	d203      	bcs.n	800997e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009976:	4b14      	ldr	r3, [pc, #80]	; (80099c8 <pvPortMalloc+0x178>)
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	4a15      	ldr	r2, [pc, #84]	; (80099d0 <pvPortMalloc+0x180>)
 800997c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800997e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009980:	685a      	ldr	r2, [r3, #4]
 8009982:	4b10      	ldr	r3, [pc, #64]	; (80099c4 <pvPortMalloc+0x174>)
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	431a      	orrs	r2, r3
 8009988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800998a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800998c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800998e:	2200      	movs	r2, #0
 8009990:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009992:	f001 f825 	bl	800a9e0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009996:	69fb      	ldr	r3, [r7, #28]
 8009998:	f003 0307 	and.w	r3, r3, #7
 800999c:	2b00      	cmp	r3, #0
 800999e:	d009      	beq.n	80099b4 <pvPortMalloc+0x164>
 80099a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099a4:	f383 8811 	msr	BASEPRI, r3
 80099a8:	f3bf 8f6f 	isb	sy
 80099ac:	f3bf 8f4f 	dsb	sy
 80099b0:	60fb      	str	r3, [r7, #12]
 80099b2:	e7fe      	b.n	80099b2 <pvPortMalloc+0x162>
	return pvReturn;
 80099b4:	69fb      	ldr	r3, [r7, #28]
}
 80099b6:	4618      	mov	r0, r3
 80099b8:	3728      	adds	r7, #40	; 0x28
 80099ba:	46bd      	mov	sp, r7
 80099bc:	bd80      	pop	{r7, pc}
 80099be:	bf00      	nop
 80099c0:	20003ccc 	.word	0x20003ccc
 80099c4:	20003cd8 	.word	0x20003cd8
 80099c8:	20003cd0 	.word	0x20003cd0
 80099cc:	20003cc4 	.word	0x20003cc4
 80099d0:	20003cd4 	.word	0x20003cd4

080099d4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b086      	sub	sp, #24
 80099d8:	af00      	add	r7, sp, #0
 80099da:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d046      	beq.n	8009a74 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80099e6:	2308      	movs	r3, #8
 80099e8:	425b      	negs	r3, r3
 80099ea:	697a      	ldr	r2, [r7, #20]
 80099ec:	4413      	add	r3, r2
 80099ee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80099f0:	697b      	ldr	r3, [r7, #20]
 80099f2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80099f4:	693b      	ldr	r3, [r7, #16]
 80099f6:	685a      	ldr	r2, [r3, #4]
 80099f8:	4b20      	ldr	r3, [pc, #128]	; (8009a7c <vPortFree+0xa8>)
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	4013      	ands	r3, r2
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d109      	bne.n	8009a16 <vPortFree+0x42>
 8009a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a06:	f383 8811 	msr	BASEPRI, r3
 8009a0a:	f3bf 8f6f 	isb	sy
 8009a0e:	f3bf 8f4f 	dsb	sy
 8009a12:	60fb      	str	r3, [r7, #12]
 8009a14:	e7fe      	b.n	8009a14 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009a16:	693b      	ldr	r3, [r7, #16]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d009      	beq.n	8009a32 <vPortFree+0x5e>
 8009a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a22:	f383 8811 	msr	BASEPRI, r3
 8009a26:	f3bf 8f6f 	isb	sy
 8009a2a:	f3bf 8f4f 	dsb	sy
 8009a2e:	60bb      	str	r3, [r7, #8]
 8009a30:	e7fe      	b.n	8009a30 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009a32:	693b      	ldr	r3, [r7, #16]
 8009a34:	685a      	ldr	r2, [r3, #4]
 8009a36:	4b11      	ldr	r3, [pc, #68]	; (8009a7c <vPortFree+0xa8>)
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	4013      	ands	r3, r2
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d019      	beq.n	8009a74 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009a40:	693b      	ldr	r3, [r7, #16]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d115      	bne.n	8009a74 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009a48:	693b      	ldr	r3, [r7, #16]
 8009a4a:	685a      	ldr	r2, [r3, #4]
 8009a4c:	4b0b      	ldr	r3, [pc, #44]	; (8009a7c <vPortFree+0xa8>)
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	43db      	mvns	r3, r3
 8009a52:	401a      	ands	r2, r3
 8009a54:	693b      	ldr	r3, [r7, #16]
 8009a56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009a58:	f000 ffb4 	bl	800a9c4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009a5c:	693b      	ldr	r3, [r7, #16]
 8009a5e:	685a      	ldr	r2, [r3, #4]
 8009a60:	4b07      	ldr	r3, [pc, #28]	; (8009a80 <vPortFree+0xac>)
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	4413      	add	r3, r2
 8009a66:	4a06      	ldr	r2, [pc, #24]	; (8009a80 <vPortFree+0xac>)
 8009a68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009a6a:	6938      	ldr	r0, [r7, #16]
 8009a6c:	f000 f86c 	bl	8009b48 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009a70:	f000 ffb6 	bl	800a9e0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009a74:	bf00      	nop
 8009a76:	3718      	adds	r7, #24
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	bd80      	pop	{r7, pc}
 8009a7c:	20003cd8 	.word	0x20003cd8
 8009a80:	20003cd0 	.word	0x20003cd0

08009a84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009a84:	b480      	push	{r7}
 8009a86:	b085      	sub	sp, #20
 8009a88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009a8a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009a8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009a90:	4b27      	ldr	r3, [pc, #156]	; (8009b30 <prvHeapInit+0xac>)
 8009a92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	f003 0307 	and.w	r3, r3, #7
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d00c      	beq.n	8009ab8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	3307      	adds	r3, #7
 8009aa2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	f023 0307 	bic.w	r3, r3, #7
 8009aaa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009aac:	68ba      	ldr	r2, [r7, #8]
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	1ad3      	subs	r3, r2, r3
 8009ab2:	4a1f      	ldr	r2, [pc, #124]	; (8009b30 <prvHeapInit+0xac>)
 8009ab4:	4413      	add	r3, r2
 8009ab6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009abc:	4a1d      	ldr	r2, [pc, #116]	; (8009b34 <prvHeapInit+0xb0>)
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009ac2:	4b1c      	ldr	r3, [pc, #112]	; (8009b34 <prvHeapInit+0xb0>)
 8009ac4:	2200      	movs	r2, #0
 8009ac6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009ac8:	687a      	ldr	r2, [r7, #4]
 8009aca:	68bb      	ldr	r3, [r7, #8]
 8009acc:	4413      	add	r3, r2
 8009ace:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009ad0:	2208      	movs	r2, #8
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	1a9b      	subs	r3, r3, r2
 8009ad6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	f023 0307 	bic.w	r3, r3, #7
 8009ade:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	4a15      	ldr	r2, [pc, #84]	; (8009b38 <prvHeapInit+0xb4>)
 8009ae4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009ae6:	4b14      	ldr	r3, [pc, #80]	; (8009b38 <prvHeapInit+0xb4>)
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	2200      	movs	r2, #0
 8009aec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009aee:	4b12      	ldr	r3, [pc, #72]	; (8009b38 <prvHeapInit+0xb4>)
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	2200      	movs	r2, #0
 8009af4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009afa:	683b      	ldr	r3, [r7, #0]
 8009afc:	68fa      	ldr	r2, [r7, #12]
 8009afe:	1ad2      	subs	r2, r2, r3
 8009b00:	683b      	ldr	r3, [r7, #0]
 8009b02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009b04:	4b0c      	ldr	r3, [pc, #48]	; (8009b38 <prvHeapInit+0xb4>)
 8009b06:	681a      	ldr	r2, [r3, #0]
 8009b08:	683b      	ldr	r3, [r7, #0]
 8009b0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009b0c:	683b      	ldr	r3, [r7, #0]
 8009b0e:	685b      	ldr	r3, [r3, #4]
 8009b10:	4a0a      	ldr	r2, [pc, #40]	; (8009b3c <prvHeapInit+0xb8>)
 8009b12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009b14:	683b      	ldr	r3, [r7, #0]
 8009b16:	685b      	ldr	r3, [r3, #4]
 8009b18:	4a09      	ldr	r2, [pc, #36]	; (8009b40 <prvHeapInit+0xbc>)
 8009b1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009b1c:	4b09      	ldr	r3, [pc, #36]	; (8009b44 <prvHeapInit+0xc0>)
 8009b1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009b22:	601a      	str	r2, [r3, #0]
}
 8009b24:	bf00      	nop
 8009b26:	3714      	adds	r7, #20
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2e:	4770      	bx	lr
 8009b30:	200000c4 	.word	0x200000c4
 8009b34:	20003cc4 	.word	0x20003cc4
 8009b38:	20003ccc 	.word	0x20003ccc
 8009b3c:	20003cd4 	.word	0x20003cd4
 8009b40:	20003cd0 	.word	0x20003cd0
 8009b44:	20003cd8 	.word	0x20003cd8

08009b48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009b48:	b480      	push	{r7}
 8009b4a:	b085      	sub	sp, #20
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009b50:	4b28      	ldr	r3, [pc, #160]	; (8009bf4 <prvInsertBlockIntoFreeList+0xac>)
 8009b52:	60fb      	str	r3, [r7, #12]
 8009b54:	e002      	b.n	8009b5c <prvInsertBlockIntoFreeList+0x14>
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	60fb      	str	r3, [r7, #12]
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	681a      	ldr	r2, [r3, #0]
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	429a      	cmp	r2, r3
 8009b64:	d3f7      	bcc.n	8009b56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	685b      	ldr	r3, [r3, #4]
 8009b6e:	68ba      	ldr	r2, [r7, #8]
 8009b70:	441a      	add	r2, r3
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	429a      	cmp	r2, r3
 8009b76:	d108      	bne.n	8009b8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	685a      	ldr	r2, [r3, #4]
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	685b      	ldr	r3, [r3, #4]
 8009b80:	441a      	add	r2, r3
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	685b      	ldr	r3, [r3, #4]
 8009b92:	68ba      	ldr	r2, [r7, #8]
 8009b94:	441a      	add	r2, r3
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	429a      	cmp	r2, r3
 8009b9c:	d118      	bne.n	8009bd0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	681a      	ldr	r2, [r3, #0]
 8009ba2:	4b15      	ldr	r3, [pc, #84]	; (8009bf8 <prvInsertBlockIntoFreeList+0xb0>)
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	429a      	cmp	r2, r3
 8009ba8:	d00d      	beq.n	8009bc6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	685a      	ldr	r2, [r3, #4]
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	685b      	ldr	r3, [r3, #4]
 8009bb4:	441a      	add	r2, r3
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	681a      	ldr	r2, [r3, #0]
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	601a      	str	r2, [r3, #0]
 8009bc4:	e008      	b.n	8009bd8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009bc6:	4b0c      	ldr	r3, [pc, #48]	; (8009bf8 <prvInsertBlockIntoFreeList+0xb0>)
 8009bc8:	681a      	ldr	r2, [r3, #0]
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	601a      	str	r2, [r3, #0]
 8009bce:	e003      	b.n	8009bd8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	681a      	ldr	r2, [r3, #0]
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009bd8:	68fa      	ldr	r2, [r7, #12]
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	429a      	cmp	r2, r3
 8009bde:	d002      	beq.n	8009be6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	687a      	ldr	r2, [r7, #4]
 8009be4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009be6:	bf00      	nop
 8009be8:	3714      	adds	r7, #20
 8009bea:	46bd      	mov	sp, r7
 8009bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf0:	4770      	bx	lr
 8009bf2:	bf00      	nop
 8009bf4:	20003cc4 	.word	0x20003cc4
 8009bf8:	20003ccc 	.word	0x20003ccc

08009bfc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b084      	sub	sp, #16
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
 8009c04:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d109      	bne.n	8009c24 <xQueueGenericReset+0x28>
 8009c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c14:	f383 8811 	msr	BASEPRI, r3
 8009c18:	f3bf 8f6f 	isb	sy
 8009c1c:	f3bf 8f4f 	dsb	sy
 8009c20:	60bb      	str	r3, [r7, #8]
 8009c22:	e7fe      	b.n	8009c22 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8009c24:	f7ff fd04 	bl	8009630 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	681a      	ldr	r2, [r3, #0]
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c30:	68f9      	ldr	r1, [r7, #12]
 8009c32:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009c34:	fb01 f303 	mul.w	r3, r1, r3
 8009c38:	441a      	add	r2, r3
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	2200      	movs	r2, #0
 8009c42:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	681a      	ldr	r2, [r3, #0]
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	681a      	ldr	r2, [r3, #0]
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c54:	3b01      	subs	r3, #1
 8009c56:	68f9      	ldr	r1, [r7, #12]
 8009c58:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009c5a:	fb01 f303 	mul.w	r3, r1, r3
 8009c5e:	441a      	add	r2, r3
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	22ff      	movs	r2, #255	; 0xff
 8009c68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	22ff      	movs	r2, #255	; 0xff
 8009c70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009c74:	683b      	ldr	r3, [r7, #0]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d114      	bne.n	8009ca4 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	691b      	ldr	r3, [r3, #16]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d01a      	beq.n	8009cb8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	3310      	adds	r3, #16
 8009c86:	4618      	mov	r0, r3
 8009c88:	f001 f880 	bl	800ad8c <xTaskRemoveFromEventList>
 8009c8c:	4603      	mov	r3, r0
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d012      	beq.n	8009cb8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009c92:	4b0d      	ldr	r3, [pc, #52]	; (8009cc8 <xQueueGenericReset+0xcc>)
 8009c94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c98:	601a      	str	r2, [r3, #0]
 8009c9a:	f3bf 8f4f 	dsb	sy
 8009c9e:	f3bf 8f6f 	isb	sy
 8009ca2:	e009      	b.n	8009cb8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	3310      	adds	r3, #16
 8009ca8:	4618      	mov	r0, r3
 8009caa:	f7ff fb04 	bl	80092b6 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	3324      	adds	r3, #36	; 0x24
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	f7ff faff 	bl	80092b6 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009cb8:	f7ff fce8 	bl	800968c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009cbc:	2301      	movs	r3, #1
}
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	3710      	adds	r7, #16
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	bd80      	pop	{r7, pc}
 8009cc6:	bf00      	nop
 8009cc8:	e000ed04 	.word	0xe000ed04

08009ccc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b08a      	sub	sp, #40	; 0x28
 8009cd0:	af02      	add	r7, sp, #8
 8009cd2:	60f8      	str	r0, [r7, #12]
 8009cd4:	60b9      	str	r1, [r7, #8]
 8009cd6:	4613      	mov	r3, r2
 8009cd8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d109      	bne.n	8009cf4 <xQueueGenericCreate+0x28>
 8009ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ce4:	f383 8811 	msr	BASEPRI, r3
 8009ce8:	f3bf 8f6f 	isb	sy
 8009cec:	f3bf 8f4f 	dsb	sy
 8009cf0:	613b      	str	r3, [r7, #16]
 8009cf2:	e7fe      	b.n	8009cf2 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8009cf4:	68bb      	ldr	r3, [r7, #8]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d102      	bne.n	8009d00 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	61fb      	str	r3, [r7, #28]
 8009cfe:	e004      	b.n	8009d0a <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	68ba      	ldr	r2, [r7, #8]
 8009d04:	fb02 f303 	mul.w	r3, r2, r3
 8009d08:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8009d0a:	69fb      	ldr	r3, [r7, #28]
 8009d0c:	3348      	adds	r3, #72	; 0x48
 8009d0e:	4618      	mov	r0, r3
 8009d10:	f7ff fd9e 	bl	8009850 <pvPortMalloc>
 8009d14:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009d16:	69bb      	ldr	r3, [r7, #24]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d00b      	beq.n	8009d34 <xQueueGenericCreate+0x68>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8009d1c:	69bb      	ldr	r3, [r7, #24]
 8009d1e:	3348      	adds	r3, #72	; 0x48
 8009d20:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009d22:	79fa      	ldrb	r2, [r7, #7]
 8009d24:	69bb      	ldr	r3, [r7, #24]
 8009d26:	9300      	str	r3, [sp, #0]
 8009d28:	4613      	mov	r3, r2
 8009d2a:	697a      	ldr	r2, [r7, #20]
 8009d2c:	68b9      	ldr	r1, [r7, #8]
 8009d2e:	68f8      	ldr	r0, [r7, #12]
 8009d30:	f000 f805 	bl	8009d3e <prvInitialiseNewQueue>
		}

		return pxNewQueue;
 8009d34:	69bb      	ldr	r3, [r7, #24]
	}
 8009d36:	4618      	mov	r0, r3
 8009d38:	3720      	adds	r7, #32
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bd80      	pop	{r7, pc}

08009d3e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009d3e:	b580      	push	{r7, lr}
 8009d40:	b084      	sub	sp, #16
 8009d42:	af00      	add	r7, sp, #0
 8009d44:	60f8      	str	r0, [r7, #12]
 8009d46:	60b9      	str	r1, [r7, #8]
 8009d48:	607a      	str	r2, [r7, #4]
 8009d4a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009d4c:	68bb      	ldr	r3, [r7, #8]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d103      	bne.n	8009d5a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009d52:	69bb      	ldr	r3, [r7, #24]
 8009d54:	69ba      	ldr	r2, [r7, #24]
 8009d56:	601a      	str	r2, [r3, #0]
 8009d58:	e002      	b.n	8009d60 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009d5a:	69bb      	ldr	r3, [r7, #24]
 8009d5c:	687a      	ldr	r2, [r7, #4]
 8009d5e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009d60:	69bb      	ldr	r3, [r7, #24]
 8009d62:	68fa      	ldr	r2, [r7, #12]
 8009d64:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009d66:	69bb      	ldr	r3, [r7, #24]
 8009d68:	68ba      	ldr	r2, [r7, #8]
 8009d6a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009d6c:	2101      	movs	r1, #1
 8009d6e:	69b8      	ldr	r0, [r7, #24]
 8009d70:	f7ff ff44 	bl	8009bfc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009d74:	bf00      	nop
 8009d76:	3710      	adds	r7, #16
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	bd80      	pop	{r7, pc}

08009d7c <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b082      	sub	sp, #8
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d00e      	beq.n	8009da8 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	2200      	movs	r2, #0
 8009d8e:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	2200      	movs	r2, #0
 8009d94:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	2200      	movs	r2, #0
 8009d9a:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	2200      	movs	r2, #0
 8009da0:	2100      	movs	r1, #0
 8009da2:	6878      	ldr	r0, [r7, #4]
 8009da4:	f000 f81c 	bl	8009de0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8009da8:	bf00      	nop
 8009daa:	3708      	adds	r7, #8
 8009dac:	46bd      	mov	sp, r7
 8009dae:	bd80      	pop	{r7, pc}

08009db0 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b086      	sub	sp, #24
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	4603      	mov	r3, r0
 8009db8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009dba:	2301      	movs	r3, #1
 8009dbc:	617b      	str	r3, [r7, #20]
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8009dc2:	79fb      	ldrb	r3, [r7, #7]
 8009dc4:	461a      	mov	r2, r3
 8009dc6:	6939      	ldr	r1, [r7, #16]
 8009dc8:	6978      	ldr	r0, [r7, #20]
 8009dca:	f7ff ff7f 	bl	8009ccc <xQueueGenericCreate>
 8009dce:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8009dd0:	68f8      	ldr	r0, [r7, #12]
 8009dd2:	f7ff ffd3 	bl	8009d7c <prvInitialiseMutex>

		return pxNewQueue;
 8009dd6:	68fb      	ldr	r3, [r7, #12]
	}
 8009dd8:	4618      	mov	r0, r3
 8009dda:	3718      	adds	r7, #24
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	bd80      	pop	{r7, pc}

08009de0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b08e      	sub	sp, #56	; 0x38
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	60f8      	str	r0, [r7, #12]
 8009de8:	60b9      	str	r1, [r7, #8]
 8009dea:	607a      	str	r2, [r7, #4]
 8009dec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009dee:	2300      	movs	r3, #0
 8009df0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d109      	bne.n	8009e10 <xQueueGenericSend+0x30>
 8009dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e00:	f383 8811 	msr	BASEPRI, r3
 8009e04:	f3bf 8f6f 	isb	sy
 8009e08:	f3bf 8f4f 	dsb	sy
 8009e0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8009e0e:	e7fe      	b.n	8009e0e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009e10:	68bb      	ldr	r3, [r7, #8]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d103      	bne.n	8009e1e <xQueueGenericSend+0x3e>
 8009e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d101      	bne.n	8009e22 <xQueueGenericSend+0x42>
 8009e1e:	2301      	movs	r3, #1
 8009e20:	e000      	b.n	8009e24 <xQueueGenericSend+0x44>
 8009e22:	2300      	movs	r3, #0
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d109      	bne.n	8009e3c <xQueueGenericSend+0x5c>
 8009e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e2c:	f383 8811 	msr	BASEPRI, r3
 8009e30:	f3bf 8f6f 	isb	sy
 8009e34:	f3bf 8f4f 	dsb	sy
 8009e38:	627b      	str	r3, [r7, #36]	; 0x24
 8009e3a:	e7fe      	b.n	8009e3a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009e3c:	683b      	ldr	r3, [r7, #0]
 8009e3e:	2b02      	cmp	r3, #2
 8009e40:	d103      	bne.n	8009e4a <xQueueGenericSend+0x6a>
 8009e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e46:	2b01      	cmp	r3, #1
 8009e48:	d101      	bne.n	8009e4e <xQueueGenericSend+0x6e>
 8009e4a:	2301      	movs	r3, #1
 8009e4c:	e000      	b.n	8009e50 <xQueueGenericSend+0x70>
 8009e4e:	2300      	movs	r3, #0
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d109      	bne.n	8009e68 <xQueueGenericSend+0x88>
 8009e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e58:	f383 8811 	msr	BASEPRI, r3
 8009e5c:	f3bf 8f6f 	isb	sy
 8009e60:	f3bf 8f4f 	dsb	sy
 8009e64:	623b      	str	r3, [r7, #32]
 8009e66:	e7fe      	b.n	8009e66 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009e68:	f001 f94a 	bl	800b100 <xTaskGetSchedulerState>
 8009e6c:	4603      	mov	r3, r0
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d102      	bne.n	8009e78 <xQueueGenericSend+0x98>
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d101      	bne.n	8009e7c <xQueueGenericSend+0x9c>
 8009e78:	2301      	movs	r3, #1
 8009e7a:	e000      	b.n	8009e7e <xQueueGenericSend+0x9e>
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d109      	bne.n	8009e96 <xQueueGenericSend+0xb6>
 8009e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e86:	f383 8811 	msr	BASEPRI, r3
 8009e8a:	f3bf 8f6f 	isb	sy
 8009e8e:	f3bf 8f4f 	dsb	sy
 8009e92:	61fb      	str	r3, [r7, #28]
 8009e94:	e7fe      	b.n	8009e94 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009e96:	f7ff fbcb 	bl	8009630 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ea0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ea2:	429a      	cmp	r2, r3
 8009ea4:	d302      	bcc.n	8009eac <xQueueGenericSend+0xcc>
 8009ea6:	683b      	ldr	r3, [r7, #0]
 8009ea8:	2b02      	cmp	r3, #2
 8009eaa:	d129      	bne.n	8009f00 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009eac:	683a      	ldr	r2, [r7, #0]
 8009eae:	68b9      	ldr	r1, [r7, #8]
 8009eb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009eb2:	f000 f9a1 	bl	800a1f8 <prvCopyDataToQueue>
 8009eb6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d010      	beq.n	8009ee2 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ec2:	3324      	adds	r3, #36	; 0x24
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	f000 ff61 	bl	800ad8c <xTaskRemoveFromEventList>
 8009eca:	4603      	mov	r3, r0
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d013      	beq.n	8009ef8 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009ed0:	4b3f      	ldr	r3, [pc, #252]	; (8009fd0 <xQueueGenericSend+0x1f0>)
 8009ed2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ed6:	601a      	str	r2, [r3, #0]
 8009ed8:	f3bf 8f4f 	dsb	sy
 8009edc:	f3bf 8f6f 	isb	sy
 8009ee0:	e00a      	b.n	8009ef8 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d007      	beq.n	8009ef8 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009ee8:	4b39      	ldr	r3, [pc, #228]	; (8009fd0 <xQueueGenericSend+0x1f0>)
 8009eea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009eee:	601a      	str	r2, [r3, #0]
 8009ef0:	f3bf 8f4f 	dsb	sy
 8009ef4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009ef8:	f7ff fbc8 	bl	800968c <vPortExitCritical>
				return pdPASS;
 8009efc:	2301      	movs	r3, #1
 8009efe:	e063      	b.n	8009fc8 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d103      	bne.n	8009f0e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009f06:	f7ff fbc1 	bl	800968c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	e05c      	b.n	8009fc8 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009f0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d106      	bne.n	8009f22 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8009f14:	f107 0314 	add.w	r3, r7, #20
 8009f18:	4618      	mov	r0, r3
 8009f1a:	f000 ff99 	bl	800ae50 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009f1e:	2301      	movs	r3, #1
 8009f20:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009f22:	f7ff fbb3 	bl	800968c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009f26:	f000 fd4d 	bl	800a9c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009f2a:	f7ff fb81 	bl	8009630 <vPortEnterCritical>
 8009f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009f34:	b25b      	sxtb	r3, r3
 8009f36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f3a:	d103      	bne.n	8009f44 <xQueueGenericSend+0x164>
 8009f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f3e:	2200      	movs	r2, #0
 8009f40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009f4a:	b25b      	sxtb	r3, r3
 8009f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f50:	d103      	bne.n	8009f5a <xQueueGenericSend+0x17a>
 8009f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f54:	2200      	movs	r2, #0
 8009f56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009f5a:	f7ff fb97 	bl	800968c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009f5e:	1d3a      	adds	r2, r7, #4
 8009f60:	f107 0314 	add.w	r3, r7, #20
 8009f64:	4611      	mov	r1, r2
 8009f66:	4618      	mov	r0, r3
 8009f68:	f000 ff96 	bl	800ae98 <xTaskCheckForTimeOut>
 8009f6c:	4603      	mov	r3, r0
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d124      	bne.n	8009fbc <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009f72:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009f74:	f000 fa38 	bl	800a3e8 <prvIsQueueFull>
 8009f78:	4603      	mov	r3, r0
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d018      	beq.n	8009fb0 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f80:	3310      	adds	r3, #16
 8009f82:	687a      	ldr	r2, [r7, #4]
 8009f84:	4611      	mov	r1, r2
 8009f86:	4618      	mov	r0, r3
 8009f88:	f000 fedc 	bl	800ad44 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009f8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009f8e:	f000 f9c3 	bl	800a318 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009f92:	f000 fd25 	bl	800a9e0 <xTaskResumeAll>
 8009f96:	4603      	mov	r3, r0
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	f47f af7c 	bne.w	8009e96 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8009f9e:	4b0c      	ldr	r3, [pc, #48]	; (8009fd0 <xQueueGenericSend+0x1f0>)
 8009fa0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009fa4:	601a      	str	r2, [r3, #0]
 8009fa6:	f3bf 8f4f 	dsb	sy
 8009faa:	f3bf 8f6f 	isb	sy
 8009fae:	e772      	b.n	8009e96 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009fb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009fb2:	f000 f9b1 	bl	800a318 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009fb6:	f000 fd13 	bl	800a9e0 <xTaskResumeAll>
 8009fba:	e76c      	b.n	8009e96 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009fbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009fbe:	f000 f9ab 	bl	800a318 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009fc2:	f000 fd0d 	bl	800a9e0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009fc6:	2300      	movs	r3, #0
		}
	}
}
 8009fc8:	4618      	mov	r0, r3
 8009fca:	3738      	adds	r7, #56	; 0x38
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	bd80      	pop	{r7, pc}
 8009fd0:	e000ed04 	.word	0xe000ed04

08009fd4 <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b08e      	sub	sp, #56	; 0x38
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	60f8      	str	r0, [r7, #12]
 8009fdc:	60b9      	str	r1, [r7, #8]
 8009fde:	607a      	str	r2, [r7, #4]
 8009fe0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d109      	bne.n	800a004 <xQueueGenericReceive+0x30>
 8009ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ff4:	f383 8811 	msr	BASEPRI, r3
 8009ff8:	f3bf 8f6f 	isb	sy
 8009ffc:	f3bf 8f4f 	dsb	sy
 800a000:	627b      	str	r3, [r7, #36]	; 0x24
 800a002:	e7fe      	b.n	800a002 <xQueueGenericReceive+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a004:	68bb      	ldr	r3, [r7, #8]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d103      	bne.n	800a012 <xQueueGenericReceive+0x3e>
 800a00a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a00c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d101      	bne.n	800a016 <xQueueGenericReceive+0x42>
 800a012:	2301      	movs	r3, #1
 800a014:	e000      	b.n	800a018 <xQueueGenericReceive+0x44>
 800a016:	2300      	movs	r3, #0
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d109      	bne.n	800a030 <xQueueGenericReceive+0x5c>
 800a01c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a020:	f383 8811 	msr	BASEPRI, r3
 800a024:	f3bf 8f6f 	isb	sy
 800a028:	f3bf 8f4f 	dsb	sy
 800a02c:	623b      	str	r3, [r7, #32]
 800a02e:	e7fe      	b.n	800a02e <xQueueGenericReceive+0x5a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a030:	f001 f866 	bl	800b100 <xTaskGetSchedulerState>
 800a034:	4603      	mov	r3, r0
 800a036:	2b00      	cmp	r3, #0
 800a038:	d102      	bne.n	800a040 <xQueueGenericReceive+0x6c>
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d101      	bne.n	800a044 <xQueueGenericReceive+0x70>
 800a040:	2301      	movs	r3, #1
 800a042:	e000      	b.n	800a046 <xQueueGenericReceive+0x72>
 800a044:	2300      	movs	r3, #0
 800a046:	2b00      	cmp	r3, #0
 800a048:	d109      	bne.n	800a05e <xQueueGenericReceive+0x8a>
 800a04a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a04e:	f383 8811 	msr	BASEPRI, r3
 800a052:	f3bf 8f6f 	isb	sy
 800a056:	f3bf 8f4f 	dsb	sy
 800a05a:	61fb      	str	r3, [r7, #28]
 800a05c:	e7fe      	b.n	800a05c <xQueueGenericReceive+0x88>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800a05e:	f7ff fae7 	bl	8009630 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a066:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d046      	beq.n	800a0fc <xQueueGenericReceive+0x128>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 800a06e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a070:	68db      	ldr	r3, [r3, #12]
 800a072:	62bb      	str	r3, [r7, #40]	; 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a074:	68b9      	ldr	r1, [r7, #8]
 800a076:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a078:	f000 f928 	bl	800a2cc <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 800a07c:	683b      	ldr	r3, [r7, #0]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d121      	bne.n	800a0c6 <xQueueGenericReceive+0xf2>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 800a082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a084:	1e5a      	subs	r2, r3, #1
 800a086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a088:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a08a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d104      	bne.n	800a09c <xQueueGenericReceive+0xc8>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800a092:	f001 f94d 	bl	800b330 <pvTaskIncrementMutexHeldCount>
 800a096:	4602      	mov	r2, r0
 800a098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a09a:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a09c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a09e:	691b      	ldr	r3, [r3, #16]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d027      	beq.n	800a0f4 <xQueueGenericReceive+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a0a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0a6:	3310      	adds	r3, #16
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	f000 fe6f 	bl	800ad8c <xTaskRemoveFromEventList>
 800a0ae:	4603      	mov	r3, r0
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d01f      	beq.n	800a0f4 <xQueueGenericReceive+0x120>
						{
							queueYIELD_IF_USING_PREEMPTION();
 800a0b4:	4b4f      	ldr	r3, [pc, #316]	; (800a1f4 <xQueueGenericReceive+0x220>)
 800a0b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0ba:	601a      	str	r2, [r3, #0]
 800a0bc:	f3bf 8f4f 	dsb	sy
 800a0c0:	f3bf 8f6f 	isb	sy
 800a0c4:	e016      	b.n	800a0f4 <xQueueGenericReceive+0x120>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 800a0c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a0ca:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a0cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d00f      	beq.n	800a0f4 <xQueueGenericReceive+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a0d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0d6:	3324      	adds	r3, #36	; 0x24
 800a0d8:	4618      	mov	r0, r3
 800a0da:	f000 fe57 	bl	800ad8c <xTaskRemoveFromEventList>
 800a0de:	4603      	mov	r3, r0
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d007      	beq.n	800a0f4 <xQueueGenericReceive+0x120>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
 800a0e4:	4b43      	ldr	r3, [pc, #268]	; (800a1f4 <xQueueGenericReceive+0x220>)
 800a0e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0ea:	601a      	str	r2, [r3, #0]
 800a0ec:	f3bf 8f4f 	dsb	sy
 800a0f0:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 800a0f4:	f7ff faca 	bl	800968c <vPortExitCritical>
				return pdPASS;
 800a0f8:	2301      	movs	r3, #1
 800a0fa:	e077      	b.n	800a1ec <xQueueGenericReceive+0x218>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d103      	bne.n	800a10a <xQueueGenericReceive+0x136>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a102:	f7ff fac3 	bl	800968c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a106:	2300      	movs	r3, #0
 800a108:	e070      	b.n	800a1ec <xQueueGenericReceive+0x218>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a10a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d106      	bne.n	800a11e <xQueueGenericReceive+0x14a>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 800a110:	f107 0314 	add.w	r3, r7, #20
 800a114:	4618      	mov	r0, r3
 800a116:	f000 fe9b 	bl	800ae50 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a11a:	2301      	movs	r3, #1
 800a11c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a11e:	f7ff fab5 	bl	800968c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a122:	f000 fc4f 	bl	800a9c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a126:	f7ff fa83 	bl	8009630 <vPortEnterCritical>
 800a12a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a12c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a130:	b25b      	sxtb	r3, r3
 800a132:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a136:	d103      	bne.n	800a140 <xQueueGenericReceive+0x16c>
 800a138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a13a:	2200      	movs	r2, #0
 800a13c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a142:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a146:	b25b      	sxtb	r3, r3
 800a148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a14c:	d103      	bne.n	800a156 <xQueueGenericReceive+0x182>
 800a14e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a150:	2200      	movs	r2, #0
 800a152:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a156:	f7ff fa99 	bl	800968c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a15a:	1d3a      	adds	r2, r7, #4
 800a15c:	f107 0314 	add.w	r3, r7, #20
 800a160:	4611      	mov	r1, r2
 800a162:	4618      	mov	r0, r3
 800a164:	f000 fe98 	bl	800ae98 <xTaskCheckForTimeOut>
 800a168:	4603      	mov	r3, r0
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d131      	bne.n	800a1d2 <xQueueGenericReceive+0x1fe>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a16e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a170:	f000 f924 	bl	800a3bc <prvIsQueueEmpty>
 800a174:	4603      	mov	r3, r0
 800a176:	2b00      	cmp	r3, #0
 800a178:	d025      	beq.n	800a1c6 <xQueueGenericReceive+0x1f2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a17a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d108      	bne.n	800a194 <xQueueGenericReceive+0x1c0>
					{
						taskENTER_CRITICAL();
 800a182:	f7ff fa55 	bl	8009630 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800a186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a188:	685b      	ldr	r3, [r3, #4]
 800a18a:	4618      	mov	r0, r3
 800a18c:	f000 ffd6 	bl	800b13c <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 800a190:	f7ff fa7c 	bl	800968c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a196:	3324      	adds	r3, #36	; 0x24
 800a198:	687a      	ldr	r2, [r7, #4]
 800a19a:	4611      	mov	r1, r2
 800a19c:	4618      	mov	r0, r3
 800a19e:	f000 fdd1 	bl	800ad44 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a1a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a1a4:	f000 f8b8 	bl	800a318 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a1a8:	f000 fc1a 	bl	800a9e0 <xTaskResumeAll>
 800a1ac:	4603      	mov	r3, r0
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	f47f af55 	bne.w	800a05e <xQueueGenericReceive+0x8a>
				{
					portYIELD_WITHIN_API();
 800a1b4:	4b0f      	ldr	r3, [pc, #60]	; (800a1f4 <xQueueGenericReceive+0x220>)
 800a1b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1ba:	601a      	str	r2, [r3, #0]
 800a1bc:	f3bf 8f4f 	dsb	sy
 800a1c0:	f3bf 8f6f 	isb	sy
 800a1c4:	e74b      	b.n	800a05e <xQueueGenericReceive+0x8a>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a1c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a1c8:	f000 f8a6 	bl	800a318 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a1cc:	f000 fc08 	bl	800a9e0 <xTaskResumeAll>
 800a1d0:	e745      	b.n	800a05e <xQueueGenericReceive+0x8a>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 800a1d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a1d4:	f000 f8a0 	bl	800a318 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a1d8:	f000 fc02 	bl	800a9e0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a1dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a1de:	f000 f8ed 	bl	800a3bc <prvIsQueueEmpty>
 800a1e2:	4603      	mov	r3, r0
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	f43f af3a 	beq.w	800a05e <xQueueGenericReceive+0x8a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a1ea:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	3738      	adds	r7, #56	; 0x38
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	bd80      	pop	{r7, pc}
 800a1f4:	e000ed04 	.word	0xe000ed04

0800a1f8 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b086      	sub	sp, #24
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	60f8      	str	r0, [r7, #12]
 800a200:	60b9      	str	r1, [r7, #8]
 800a202:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a204:	2300      	movs	r3, #0
 800a206:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a20c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a212:	2b00      	cmp	r3, #0
 800a214:	d10d      	bne.n	800a232 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d14d      	bne.n	800a2ba <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	685b      	ldr	r3, [r3, #4]
 800a222:	4618      	mov	r0, r3
 800a224:	f001 f800 	bl	800b228 <xTaskPriorityDisinherit>
 800a228:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	2200      	movs	r2, #0
 800a22e:	605a      	str	r2, [r3, #4]
 800a230:	e043      	b.n	800a2ba <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d119      	bne.n	800a26c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	6898      	ldr	r0, [r3, #8]
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a240:	461a      	mov	r2, r3
 800a242:	68b9      	ldr	r1, [r7, #8]
 800a244:	f002 fa04 	bl	800c650 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	689a      	ldr	r2, [r3, #8]
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a250:	441a      	add	r2, r3
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	689a      	ldr	r2, [r3, #8]
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	685b      	ldr	r3, [r3, #4]
 800a25e:	429a      	cmp	r2, r3
 800a260:	d32b      	bcc.n	800a2ba <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	681a      	ldr	r2, [r3, #0]
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	609a      	str	r2, [r3, #8]
 800a26a:	e026      	b.n	800a2ba <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	68d8      	ldr	r0, [r3, #12]
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a274:	461a      	mov	r2, r3
 800a276:	68b9      	ldr	r1, [r7, #8]
 800a278:	f002 f9ea 	bl	800c650 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	68da      	ldr	r2, [r3, #12]
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a284:	425b      	negs	r3, r3
 800a286:	441a      	add	r2, r3
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	68da      	ldr	r2, [r3, #12]
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	429a      	cmp	r2, r3
 800a296:	d207      	bcs.n	800a2a8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	685a      	ldr	r2, [r3, #4]
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2a0:	425b      	negs	r3, r3
 800a2a2:	441a      	add	r2, r3
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	2b02      	cmp	r3, #2
 800a2ac:	d105      	bne.n	800a2ba <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a2ae:	693b      	ldr	r3, [r7, #16]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d002      	beq.n	800a2ba <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a2b4:	693b      	ldr	r3, [r7, #16]
 800a2b6:	3b01      	subs	r3, #1
 800a2b8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 800a2ba:	693b      	ldr	r3, [r7, #16]
 800a2bc:	1c5a      	adds	r2, r3, #1
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a2c2:	697b      	ldr	r3, [r7, #20]
}
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	3718      	adds	r7, #24
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	bd80      	pop	{r7, pc}

0800a2cc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b082      	sub	sp, #8
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
 800a2d4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d018      	beq.n	800a310 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	68da      	ldr	r2, [r3, #12]
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2e6:	441a      	add	r2, r3
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	68da      	ldr	r2, [r3, #12]
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	685b      	ldr	r3, [r3, #4]
 800a2f4:	429a      	cmp	r2, r3
 800a2f6:	d303      	bcc.n	800a300 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681a      	ldr	r2, [r3, #0]
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	68d9      	ldr	r1, [r3, #12]
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a308:	461a      	mov	r2, r3
 800a30a:	6838      	ldr	r0, [r7, #0]
 800a30c:	f002 f9a0 	bl	800c650 <memcpy>
	}
}
 800a310:	bf00      	nop
 800a312:	3708      	adds	r7, #8
 800a314:	46bd      	mov	sp, r7
 800a316:	bd80      	pop	{r7, pc}

0800a318 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b084      	sub	sp, #16
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a320:	f7ff f986 	bl	8009630 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a32a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a32c:	e011      	b.n	800a352 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a332:	2b00      	cmp	r3, #0
 800a334:	d012      	beq.n	800a35c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	3324      	adds	r3, #36	; 0x24
 800a33a:	4618      	mov	r0, r3
 800a33c:	f000 fd26 	bl	800ad8c <xTaskRemoveFromEventList>
 800a340:	4603      	mov	r3, r0
 800a342:	2b00      	cmp	r3, #0
 800a344:	d001      	beq.n	800a34a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a346:	f000 fe05 	bl	800af54 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a34a:	7bfb      	ldrb	r3, [r7, #15]
 800a34c:	3b01      	subs	r3, #1
 800a34e:	b2db      	uxtb	r3, r3
 800a350:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a352:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a356:	2b00      	cmp	r3, #0
 800a358:	dce9      	bgt.n	800a32e <prvUnlockQueue+0x16>
 800a35a:	e000      	b.n	800a35e <prvUnlockQueue+0x46>
					break;
 800a35c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	22ff      	movs	r2, #255	; 0xff
 800a362:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a366:	f7ff f991 	bl	800968c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a36a:	f7ff f961 	bl	8009630 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a374:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a376:	e011      	b.n	800a39c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	691b      	ldr	r3, [r3, #16]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d012      	beq.n	800a3a6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	3310      	adds	r3, #16
 800a384:	4618      	mov	r0, r3
 800a386:	f000 fd01 	bl	800ad8c <xTaskRemoveFromEventList>
 800a38a:	4603      	mov	r3, r0
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d001      	beq.n	800a394 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a390:	f000 fde0 	bl	800af54 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a394:	7bbb      	ldrb	r3, [r7, #14]
 800a396:	3b01      	subs	r3, #1
 800a398:	b2db      	uxtb	r3, r3
 800a39a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a39c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	dce9      	bgt.n	800a378 <prvUnlockQueue+0x60>
 800a3a4:	e000      	b.n	800a3a8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a3a6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	22ff      	movs	r2, #255	; 0xff
 800a3ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a3b0:	f7ff f96c 	bl	800968c <vPortExitCritical>
}
 800a3b4:	bf00      	nop
 800a3b6:	3710      	adds	r7, #16
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	bd80      	pop	{r7, pc}

0800a3bc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	b084      	sub	sp, #16
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a3c4:	f7ff f934 	bl	8009630 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d102      	bne.n	800a3d6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a3d0:	2301      	movs	r3, #1
 800a3d2:	60fb      	str	r3, [r7, #12]
 800a3d4:	e001      	b.n	800a3da <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a3da:	f7ff f957 	bl	800968c <vPortExitCritical>

	return xReturn;
 800a3de:	68fb      	ldr	r3, [r7, #12]
}
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	3710      	adds	r7, #16
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	bd80      	pop	{r7, pc}

0800a3e8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	b084      	sub	sp, #16
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a3f0:	f7ff f91e 	bl	8009630 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3fc:	429a      	cmp	r2, r3
 800a3fe:	d102      	bne.n	800a406 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a400:	2301      	movs	r3, #1
 800a402:	60fb      	str	r3, [r7, #12]
 800a404:	e001      	b.n	800a40a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a406:	2300      	movs	r3, #0
 800a408:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a40a:	f7ff f93f 	bl	800968c <vPortExitCritical>

	return xReturn;
 800a40e:	68fb      	ldr	r3, [r7, #12]
}
 800a410:	4618      	mov	r0, r3
 800a412:	3710      	adds	r7, #16
 800a414:	46bd      	mov	sp, r7
 800a416:	bd80      	pop	{r7, pc}

0800a418 <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a418:	b580      	push	{r7, lr}
 800a41a:	b08c      	sub	sp, #48	; 0x30
 800a41c:	af04      	add	r7, sp, #16
 800a41e:	60f8      	str	r0, [r7, #12]
 800a420:	60b9      	str	r1, [r7, #8]
 800a422:	603b      	str	r3, [r7, #0]
 800a424:	4613      	mov	r3, r2
 800a426:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a428:	88fb      	ldrh	r3, [r7, #6]
 800a42a:	009b      	lsls	r3, r3, #2
 800a42c:	4618      	mov	r0, r3
 800a42e:	f7ff fa0f 	bl	8009850 <pvPortMalloc>
 800a432:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a434:	697b      	ldr	r3, [r7, #20]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d00e      	beq.n	800a458 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800a43a:	2054      	movs	r0, #84	; 0x54
 800a43c:	f7ff fa08 	bl	8009850 <pvPortMalloc>
 800a440:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a442:	69fb      	ldr	r3, [r7, #28]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d003      	beq.n	800a450 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a448:	69fb      	ldr	r3, [r7, #28]
 800a44a:	697a      	ldr	r2, [r7, #20]
 800a44c:	631a      	str	r2, [r3, #48]	; 0x30
 800a44e:	e005      	b.n	800a45c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a450:	6978      	ldr	r0, [r7, #20]
 800a452:	f7ff fabf 	bl	80099d4 <vPortFree>
 800a456:	e001      	b.n	800a45c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a458:	2300      	movs	r3, #0
 800a45a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a45c:	69fb      	ldr	r3, [r7, #28]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d013      	beq.n	800a48a <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a462:	88fa      	ldrh	r2, [r7, #6]
 800a464:	2300      	movs	r3, #0
 800a466:	9303      	str	r3, [sp, #12]
 800a468:	69fb      	ldr	r3, [r7, #28]
 800a46a:	9302      	str	r3, [sp, #8]
 800a46c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a46e:	9301      	str	r3, [sp, #4]
 800a470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a472:	9300      	str	r3, [sp, #0]
 800a474:	683b      	ldr	r3, [r7, #0]
 800a476:	68b9      	ldr	r1, [r7, #8]
 800a478:	68f8      	ldr	r0, [r7, #12]
 800a47a:	f000 f80e 	bl	800a49a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a47e:	69f8      	ldr	r0, [r7, #28]
 800a480:	f000 f88a 	bl	800a598 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a484:	2301      	movs	r3, #1
 800a486:	61bb      	str	r3, [r7, #24]
 800a488:	e002      	b.n	800a490 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a48a:	f04f 33ff 	mov.w	r3, #4294967295
 800a48e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a490:	69bb      	ldr	r3, [r7, #24]
	}
 800a492:	4618      	mov	r0, r3
 800a494:	3720      	adds	r7, #32
 800a496:	46bd      	mov	sp, r7
 800a498:	bd80      	pop	{r7, pc}

0800a49a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 800a49a:	b580      	push	{r7, lr}
 800a49c:	b088      	sub	sp, #32
 800a49e:	af00      	add	r7, sp, #0
 800a4a0:	60f8      	str	r0, [r7, #12]
 800a4a2:	60b9      	str	r1, [r7, #8]
 800a4a4:	607a      	str	r2, [r7, #4]
 800a4a6:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800a4a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a4b2:	3b01      	subs	r3, #1
 800a4b4:	009b      	lsls	r3, r3, #2
 800a4b6:	4413      	add	r3, r2
 800a4b8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800a4ba:	69bb      	ldr	r3, [r7, #24]
 800a4bc:	f023 0307 	bic.w	r3, r3, #7
 800a4c0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a4c2:	69bb      	ldr	r3, [r7, #24]
 800a4c4:	f003 0307 	and.w	r3, r3, #7
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d009      	beq.n	800a4e0 <prvInitialiseNewTask+0x46>
 800a4cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4d0:	f383 8811 	msr	BASEPRI, r3
 800a4d4:	f3bf 8f6f 	isb	sy
 800a4d8:	f3bf 8f4f 	dsb	sy
 800a4dc:	617b      	str	r3, [r7, #20]
 800a4de:	e7fe      	b.n	800a4de <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	61fb      	str	r3, [r7, #28]
 800a4e4:	e012      	b.n	800a50c <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a4e6:	68ba      	ldr	r2, [r7, #8]
 800a4e8:	69fb      	ldr	r3, [r7, #28]
 800a4ea:	4413      	add	r3, r2
 800a4ec:	7819      	ldrb	r1, [r3, #0]
 800a4ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a4f0:	69fb      	ldr	r3, [r7, #28]
 800a4f2:	4413      	add	r3, r2
 800a4f4:	3334      	adds	r3, #52	; 0x34
 800a4f6:	460a      	mov	r2, r1
 800a4f8:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800a4fa:	68ba      	ldr	r2, [r7, #8]
 800a4fc:	69fb      	ldr	r3, [r7, #28]
 800a4fe:	4413      	add	r3, r2
 800a500:	781b      	ldrb	r3, [r3, #0]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d006      	beq.n	800a514 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a506:	69fb      	ldr	r3, [r7, #28]
 800a508:	3301      	adds	r3, #1
 800a50a:	61fb      	str	r3, [r7, #28]
 800a50c:	69fb      	ldr	r3, [r7, #28]
 800a50e:	2b0f      	cmp	r3, #15
 800a510:	d9e9      	bls.n	800a4e6 <prvInitialiseNewTask+0x4c>
 800a512:	e000      	b.n	800a516 <prvInitialiseNewTask+0x7c>
		{
			break;
 800a514:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a518:	2200      	movs	r2, #0
 800a51a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a51e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a520:	2b06      	cmp	r3, #6
 800a522:	d901      	bls.n	800a528 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a524:	2306      	movs	r3, #6
 800a526:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a52a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a52c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a52e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a530:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a532:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800a534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a536:	2200      	movs	r2, #0
 800a538:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a53a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a53c:	3304      	adds	r3, #4
 800a53e:	4618      	mov	r0, r3
 800a540:	f7fe fed9 	bl	80092f6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a546:	3318      	adds	r3, #24
 800a548:	4618      	mov	r0, r3
 800a54a:	f7fe fed4 	bl	80092f6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a54e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a550:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a552:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a556:	f1c3 0207 	rsb	r2, r3, #7
 800a55a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a55c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a55e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a560:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a562:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a566:	2200      	movs	r2, #0
 800a568:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a56a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a56c:	2200      	movs	r2, #0
 800a56e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a572:	683a      	ldr	r2, [r7, #0]
 800a574:	68f9      	ldr	r1, [r7, #12]
 800a576:	69b8      	ldr	r0, [r7, #24]
 800a578:	f7fe ff52 	bl	8009420 <pxPortInitialiseStack>
 800a57c:	4602      	mov	r2, r0
 800a57e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a580:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800a582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a584:	2b00      	cmp	r3, #0
 800a586:	d002      	beq.n	800a58e <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a58a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a58c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a58e:	bf00      	nop
 800a590:	3720      	adds	r7, #32
 800a592:	46bd      	mov	sp, r7
 800a594:	bd80      	pop	{r7, pc}
	...

0800a598 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a598:	b580      	push	{r7, lr}
 800a59a:	b082      	sub	sp, #8
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a5a0:	f7ff f846 	bl	8009630 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a5a4:	4b2a      	ldr	r3, [pc, #168]	; (800a650 <prvAddNewTaskToReadyList+0xb8>)
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	3301      	adds	r3, #1
 800a5aa:	4a29      	ldr	r2, [pc, #164]	; (800a650 <prvAddNewTaskToReadyList+0xb8>)
 800a5ac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a5ae:	4b29      	ldr	r3, [pc, #164]	; (800a654 <prvAddNewTaskToReadyList+0xbc>)
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d109      	bne.n	800a5ca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a5b6:	4a27      	ldr	r2, [pc, #156]	; (800a654 <prvAddNewTaskToReadyList+0xbc>)
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a5bc:	4b24      	ldr	r3, [pc, #144]	; (800a650 <prvAddNewTaskToReadyList+0xb8>)
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	2b01      	cmp	r3, #1
 800a5c2:	d110      	bne.n	800a5e6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a5c4:	f000 fcea 	bl	800af9c <prvInitialiseTaskLists>
 800a5c8:	e00d      	b.n	800a5e6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a5ca:	4b23      	ldr	r3, [pc, #140]	; (800a658 <prvAddNewTaskToReadyList+0xc0>)
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d109      	bne.n	800a5e6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a5d2:	4b20      	ldr	r3, [pc, #128]	; (800a654 <prvAddNewTaskToReadyList+0xbc>)
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5dc:	429a      	cmp	r2, r3
 800a5de:	d802      	bhi.n	800a5e6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a5e0:	4a1c      	ldr	r2, [pc, #112]	; (800a654 <prvAddNewTaskToReadyList+0xbc>)
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a5e6:	4b1d      	ldr	r3, [pc, #116]	; (800a65c <prvAddNewTaskToReadyList+0xc4>)
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	3301      	adds	r3, #1
 800a5ec:	4a1b      	ldr	r2, [pc, #108]	; (800a65c <prvAddNewTaskToReadyList+0xc4>)
 800a5ee:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5f4:	2201      	movs	r2, #1
 800a5f6:	409a      	lsls	r2, r3
 800a5f8:	4b19      	ldr	r3, [pc, #100]	; (800a660 <prvAddNewTaskToReadyList+0xc8>)
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	4313      	orrs	r3, r2
 800a5fe:	4a18      	ldr	r2, [pc, #96]	; (800a660 <prvAddNewTaskToReadyList+0xc8>)
 800a600:	6013      	str	r3, [r2, #0]
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a606:	4613      	mov	r3, r2
 800a608:	009b      	lsls	r3, r3, #2
 800a60a:	4413      	add	r3, r2
 800a60c:	009b      	lsls	r3, r3, #2
 800a60e:	4a15      	ldr	r2, [pc, #84]	; (800a664 <prvAddNewTaskToReadyList+0xcc>)
 800a610:	441a      	add	r2, r3
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	3304      	adds	r3, #4
 800a616:	4619      	mov	r1, r3
 800a618:	4610      	mov	r0, r2
 800a61a:	f7fe fe79 	bl	8009310 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a61e:	f7ff f835 	bl	800968c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a622:	4b0d      	ldr	r3, [pc, #52]	; (800a658 <prvAddNewTaskToReadyList+0xc0>)
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d00e      	beq.n	800a648 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a62a:	4b0a      	ldr	r3, [pc, #40]	; (800a654 <prvAddNewTaskToReadyList+0xbc>)
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a634:	429a      	cmp	r2, r3
 800a636:	d207      	bcs.n	800a648 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a638:	4b0b      	ldr	r3, [pc, #44]	; (800a668 <prvAddNewTaskToReadyList+0xd0>)
 800a63a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a63e:	601a      	str	r2, [r3, #0]
 800a640:	f3bf 8f4f 	dsb	sy
 800a644:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a648:	bf00      	nop
 800a64a:	3708      	adds	r7, #8
 800a64c:	46bd      	mov	sp, r7
 800a64e:	bd80      	pop	{r7, pc}
 800a650:	20003ddc 	.word	0x20003ddc
 800a654:	20003cdc 	.word	0x20003cdc
 800a658:	20003de8 	.word	0x20003de8
 800a65c:	20003df8 	.word	0x20003df8
 800a660:	20003de4 	.word	0x20003de4
 800a664:	20003ce0 	.word	0x20003ce0
 800a668:	e000ed04 	.word	0xe000ed04

0800a66c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b084      	sub	sp, #16
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a674:	2300      	movs	r3, #0
 800a676:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d016      	beq.n	800a6ac <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a67e:	4b13      	ldr	r3, [pc, #76]	; (800a6cc <vTaskDelay+0x60>)
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d009      	beq.n	800a69a <vTaskDelay+0x2e>
 800a686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a68a:	f383 8811 	msr	BASEPRI, r3
 800a68e:	f3bf 8f6f 	isb	sy
 800a692:	f3bf 8f4f 	dsb	sy
 800a696:	60bb      	str	r3, [r7, #8]
 800a698:	e7fe      	b.n	800a698 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800a69a:	f000 f993 	bl	800a9c4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a69e:	2100      	movs	r1, #0
 800a6a0:	6878      	ldr	r0, [r7, #4]
 800a6a2:	f000 fe59 	bl	800b358 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a6a6:	f000 f99b 	bl	800a9e0 <xTaskResumeAll>
 800a6aa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d107      	bne.n	800a6c2 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800a6b2:	4b07      	ldr	r3, [pc, #28]	; (800a6d0 <vTaskDelay+0x64>)
 800a6b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6b8:	601a      	str	r2, [r3, #0]
 800a6ba:	f3bf 8f4f 	dsb	sy
 800a6be:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a6c2:	bf00      	nop
 800a6c4:	3710      	adds	r7, #16
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	bd80      	pop	{r7, pc}
 800a6ca:	bf00      	nop
 800a6cc:	20003e04 	.word	0x20003e04
 800a6d0:	e000ed04 	.word	0xe000ed04

0800a6d4 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b084      	sub	sp, #16
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800a6dc:	f7fe ffa8 	bl	8009630 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d102      	bne.n	800a6ec <vTaskSuspend+0x18>
 800a6e6:	4b37      	ldr	r3, [pc, #220]	; (800a7c4 <vTaskSuspend+0xf0>)
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	e000      	b.n	800a6ee <vTaskSuspend+0x1a>
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	3304      	adds	r3, #4
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	f7fe fe68 	bl	80093ca <uxListRemove>
 800a6fa:	4603      	mov	r3, r0
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d115      	bne.n	800a72c <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a704:	4930      	ldr	r1, [pc, #192]	; (800a7c8 <vTaskSuspend+0xf4>)
 800a706:	4613      	mov	r3, r2
 800a708:	009b      	lsls	r3, r3, #2
 800a70a:	4413      	add	r3, r2
 800a70c:	009b      	lsls	r3, r3, #2
 800a70e:	440b      	add	r3, r1
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d10a      	bne.n	800a72c <vTaskSuspend+0x58>
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a71a:	2201      	movs	r2, #1
 800a71c:	fa02 f303 	lsl.w	r3, r2, r3
 800a720:	43da      	mvns	r2, r3
 800a722:	4b2a      	ldr	r3, [pc, #168]	; (800a7cc <vTaskSuspend+0xf8>)
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	4013      	ands	r3, r2
 800a728:	4a28      	ldr	r2, [pc, #160]	; (800a7cc <vTaskSuspend+0xf8>)
 800a72a:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a730:	2b00      	cmp	r3, #0
 800a732:	d004      	beq.n	800a73e <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	3318      	adds	r3, #24
 800a738:	4618      	mov	r0, r3
 800a73a:	f7fe fe46 	bl	80093ca <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	3304      	adds	r3, #4
 800a742:	4619      	mov	r1, r3
 800a744:	4822      	ldr	r0, [pc, #136]	; (800a7d0 <vTaskSuspend+0xfc>)
 800a746:	f7fe fde3 	bl	8009310 <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
 800a74a:	f7fe ff9f 	bl	800968c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800a74e:	4b21      	ldr	r3, [pc, #132]	; (800a7d4 <vTaskSuspend+0x100>)
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d005      	beq.n	800a762 <vTaskSuspend+0x8e>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800a756:	f7fe ff6b 	bl	8009630 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800a75a:	f000 fcab 	bl	800b0b4 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800a75e:	f7fe ff95 	bl	800968c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800a762:	4b18      	ldr	r3, [pc, #96]	; (800a7c4 <vTaskSuspend+0xf0>)
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	68fa      	ldr	r2, [r7, #12]
 800a768:	429a      	cmp	r2, r3
 800a76a:	d126      	bne.n	800a7ba <vTaskSuspend+0xe6>
		{
			if( xSchedulerRunning != pdFALSE )
 800a76c:	4b19      	ldr	r3, [pc, #100]	; (800a7d4 <vTaskSuspend+0x100>)
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	2b00      	cmp	r3, #0
 800a772:	d016      	beq.n	800a7a2 <vTaskSuspend+0xce>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800a774:	4b18      	ldr	r3, [pc, #96]	; (800a7d8 <vTaskSuspend+0x104>)
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d009      	beq.n	800a790 <vTaskSuspend+0xbc>
 800a77c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a780:	f383 8811 	msr	BASEPRI, r3
 800a784:	f3bf 8f6f 	isb	sy
 800a788:	f3bf 8f4f 	dsb	sy
 800a78c:	60bb      	str	r3, [r7, #8]
 800a78e:	e7fe      	b.n	800a78e <vTaskSuspend+0xba>
				portYIELD_WITHIN_API();
 800a790:	4b12      	ldr	r3, [pc, #72]	; (800a7dc <vTaskSuspend+0x108>)
 800a792:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a796:	601a      	str	r2, [r3, #0]
 800a798:	f3bf 8f4f 	dsb	sy
 800a79c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a7a0:	e00b      	b.n	800a7ba <vTaskSuspend+0xe6>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 800a7a2:	4b0b      	ldr	r3, [pc, #44]	; (800a7d0 <vTaskSuspend+0xfc>)
 800a7a4:	681a      	ldr	r2, [r3, #0]
 800a7a6:	4b0e      	ldr	r3, [pc, #56]	; (800a7e0 <vTaskSuspend+0x10c>)
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	429a      	cmp	r2, r3
 800a7ac:	d103      	bne.n	800a7b6 <vTaskSuspend+0xe2>
					pxCurrentTCB = NULL;
 800a7ae:	4b05      	ldr	r3, [pc, #20]	; (800a7c4 <vTaskSuspend+0xf0>)
 800a7b0:	2200      	movs	r2, #0
 800a7b2:	601a      	str	r2, [r3, #0]
	}
 800a7b4:	e001      	b.n	800a7ba <vTaskSuspend+0xe6>
					vTaskSwitchContext();
 800a7b6:	f000 fa6b 	bl	800ac90 <vTaskSwitchContext>
	}
 800a7ba:	bf00      	nop
 800a7bc:	3710      	adds	r7, #16
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	bd80      	pop	{r7, pc}
 800a7c2:	bf00      	nop
 800a7c4:	20003cdc 	.word	0x20003cdc
 800a7c8:	20003ce0 	.word	0x20003ce0
 800a7cc:	20003de4 	.word	0x20003de4
 800a7d0:	20003dc8 	.word	0x20003dc8
 800a7d4:	20003de8 	.word	0x20003de8
 800a7d8:	20003e04 	.word	0x20003e04
 800a7dc:	e000ed04 	.word	0xe000ed04
 800a7e0:	20003ddc 	.word	0x20003ddc

0800a7e4 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800a7e4:	b480      	push	{r7}
 800a7e6:	b087      	sub	sp, #28
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d109      	bne.n	800a80e <prvTaskIsTaskSuspended+0x2a>
 800a7fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7fe:	f383 8811 	msr	BASEPRI, r3
 800a802:	f3bf 8f6f 	isb	sy
 800a806:	f3bf 8f4f 	dsb	sy
 800a80a:	60fb      	str	r3, [r7, #12]
 800a80c:	e7fe      	b.n	800a80c <prvTaskIsTaskSuspended+0x28>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a80e:	693b      	ldr	r3, [r7, #16]
 800a810:	695b      	ldr	r3, [r3, #20]
 800a812:	4a0f      	ldr	r2, [pc, #60]	; (800a850 <prvTaskIsTaskSuspended+0x6c>)
 800a814:	4293      	cmp	r3, r2
 800a816:	d101      	bne.n	800a81c <prvTaskIsTaskSuspended+0x38>
 800a818:	2301      	movs	r3, #1
 800a81a:	e000      	b.n	800a81e <prvTaskIsTaskSuspended+0x3a>
 800a81c:	2300      	movs	r3, #0
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d00f      	beq.n	800a842 <prvTaskIsTaskSuspended+0x5e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800a822:	693b      	ldr	r3, [r7, #16]
 800a824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a826:	4a0b      	ldr	r2, [pc, #44]	; (800a854 <prvTaskIsTaskSuspended+0x70>)
 800a828:	4293      	cmp	r3, r2
 800a82a:	d00a      	beq.n	800a842 <prvTaskIsTaskSuspended+0x5e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE )
 800a82c:	693b      	ldr	r3, [r7, #16]
 800a82e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a830:	2b00      	cmp	r3, #0
 800a832:	d101      	bne.n	800a838 <prvTaskIsTaskSuspended+0x54>
 800a834:	2301      	movs	r3, #1
 800a836:	e000      	b.n	800a83a <prvTaskIsTaskSuspended+0x56>
 800a838:	2300      	movs	r3, #0
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d001      	beq.n	800a842 <prvTaskIsTaskSuspended+0x5e>
				{
					xReturn = pdTRUE;
 800a83e:	2301      	movs	r3, #1
 800a840:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a842:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800a844:	4618      	mov	r0, r3
 800a846:	371c      	adds	r7, #28
 800a848:	46bd      	mov	sp, r7
 800a84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84e:	4770      	bx	lr
 800a850:	20003dc8 	.word	0x20003dc8
 800a854:	20003d9c 	.word	0x20003d9c

0800a858 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 800a858:	b580      	push	{r7, lr}
 800a85a:	b08a      	sub	sp, #40	; 0x28
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 800a860:	2300      	movs	r3, #0
 800a862:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d109      	bne.n	800a882 <xTaskResumeFromISR+0x2a>
 800a86e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a872:	f383 8811 	msr	BASEPRI, r3
 800a876:	f3bf 8f6f 	isb	sy
 800a87a:	f3bf 8f4f 	dsb	sy
 800a87e:	61bb      	str	r3, [r7, #24]
 800a880:	e7fe      	b.n	800a880 <xTaskResumeFromISR+0x28>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a882:	f7fe ffa7 	bl	80097d4 <vPortValidateInterruptPriority>
	__asm volatile
 800a886:	f3ef 8211 	mrs	r2, BASEPRI
 800a88a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a88e:	f383 8811 	msr	BASEPRI, r3
 800a892:	f3bf 8f6f 	isb	sy
 800a896:	f3bf 8f4f 	dsb	sy
 800a89a:	617a      	str	r2, [r7, #20]
 800a89c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800a89e:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a8a0:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800a8a2:	6a38      	ldr	r0, [r7, #32]
 800a8a4:	f7ff ff9e 	bl	800a7e4 <prvTaskIsTaskSuspended>
 800a8a8:	4603      	mov	r3, r0
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d02f      	beq.n	800a90e <xTaskResumeFromISR+0xb6>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a8ae:	4b1d      	ldr	r3, [pc, #116]	; (800a924 <xTaskResumeFromISR+0xcc>)
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d125      	bne.n	800a902 <xTaskResumeFromISR+0xaa>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a8b6:	6a3b      	ldr	r3, [r7, #32]
 800a8b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8ba:	4b1b      	ldr	r3, [pc, #108]	; (800a928 <xTaskResumeFromISR+0xd0>)
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8c0:	429a      	cmp	r2, r3
 800a8c2:	d301      	bcc.n	800a8c8 <xTaskResumeFromISR+0x70>
					{
						xYieldRequired = pdTRUE;
 800a8c4:	2301      	movs	r3, #1
 800a8c6:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a8c8:	6a3b      	ldr	r3, [r7, #32]
 800a8ca:	3304      	adds	r3, #4
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	f7fe fd7c 	bl	80093ca <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a8d2:	6a3b      	ldr	r3, [r7, #32]
 800a8d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8d6:	2201      	movs	r2, #1
 800a8d8:	409a      	lsls	r2, r3
 800a8da:	4b14      	ldr	r3, [pc, #80]	; (800a92c <xTaskResumeFromISR+0xd4>)
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	4313      	orrs	r3, r2
 800a8e0:	4a12      	ldr	r2, [pc, #72]	; (800a92c <xTaskResumeFromISR+0xd4>)
 800a8e2:	6013      	str	r3, [r2, #0]
 800a8e4:	6a3b      	ldr	r3, [r7, #32]
 800a8e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8e8:	4613      	mov	r3, r2
 800a8ea:	009b      	lsls	r3, r3, #2
 800a8ec:	4413      	add	r3, r2
 800a8ee:	009b      	lsls	r3, r3, #2
 800a8f0:	4a0f      	ldr	r2, [pc, #60]	; (800a930 <xTaskResumeFromISR+0xd8>)
 800a8f2:	441a      	add	r2, r3
 800a8f4:	6a3b      	ldr	r3, [r7, #32]
 800a8f6:	3304      	adds	r3, #4
 800a8f8:	4619      	mov	r1, r3
 800a8fa:	4610      	mov	r0, r2
 800a8fc:	f7fe fd08 	bl	8009310 <vListInsertEnd>
 800a900:	e005      	b.n	800a90e <xTaskResumeFromISR+0xb6>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800a902:	6a3b      	ldr	r3, [r7, #32]
 800a904:	3318      	adds	r3, #24
 800a906:	4619      	mov	r1, r3
 800a908:	480a      	ldr	r0, [pc, #40]	; (800a934 <xTaskResumeFromISR+0xdc>)
 800a90a:	f7fe fd01 	bl	8009310 <vListInsertEnd>
 800a90e:	69fb      	ldr	r3, [r7, #28]
 800a910:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	f383 8811 	msr	BASEPRI, r3
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 800a918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800a91a:	4618      	mov	r0, r3
 800a91c:	3728      	adds	r7, #40	; 0x28
 800a91e:	46bd      	mov	sp, r7
 800a920:	bd80      	pop	{r7, pc}
 800a922:	bf00      	nop
 800a924:	20003e04 	.word	0x20003e04
 800a928:	20003cdc 	.word	0x20003cdc
 800a92c:	20003de4 	.word	0x20003de4
 800a930:	20003ce0 	.word	0x20003ce0
 800a934:	20003d9c 	.word	0x20003d9c

0800a938 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a938:	b580      	push	{r7, lr}
 800a93a:	b086      	sub	sp, #24
 800a93c:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800a93e:	4b1b      	ldr	r3, [pc, #108]	; (800a9ac <vTaskStartScheduler+0x74>)
 800a940:	9301      	str	r3, [sp, #4]
 800a942:	2300      	movs	r3, #0
 800a944:	9300      	str	r3, [sp, #0]
 800a946:	2300      	movs	r3, #0
 800a948:	2280      	movs	r2, #128	; 0x80
 800a94a:	4919      	ldr	r1, [pc, #100]	; (800a9b0 <vTaskStartScheduler+0x78>)
 800a94c:	4819      	ldr	r0, [pc, #100]	; (800a9b4 <vTaskStartScheduler+0x7c>)
 800a94e:	f7ff fd63 	bl	800a418 <xTaskCreate>
 800a952:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	2b01      	cmp	r3, #1
 800a958:	d115      	bne.n	800a986 <vTaskStartScheduler+0x4e>
	__asm volatile
 800a95a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a95e:	f383 8811 	msr	BASEPRI, r3
 800a962:	f3bf 8f6f 	isb	sy
 800a966:	f3bf 8f4f 	dsb	sy
 800a96a:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a96c:	4b12      	ldr	r3, [pc, #72]	; (800a9b8 <vTaskStartScheduler+0x80>)
 800a96e:	f04f 32ff 	mov.w	r2, #4294967295
 800a972:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a974:	4b11      	ldr	r3, [pc, #68]	; (800a9bc <vTaskStartScheduler+0x84>)
 800a976:	2201      	movs	r2, #1
 800a978:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800a97a:	4b11      	ldr	r3, [pc, #68]	; (800a9c0 <vTaskStartScheduler+0x88>)
 800a97c:	2200      	movs	r2, #0
 800a97e:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a980:	f7fe fdca 	bl	8009518 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a984:	e00d      	b.n	800a9a2 <vTaskStartScheduler+0x6a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a98c:	d109      	bne.n	800a9a2 <vTaskStartScheduler+0x6a>
 800a98e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a992:	f383 8811 	msr	BASEPRI, r3
 800a996:	f3bf 8f6f 	isb	sy
 800a99a:	f3bf 8f4f 	dsb	sy
 800a99e:	607b      	str	r3, [r7, #4]
 800a9a0:	e7fe      	b.n	800a9a0 <vTaskStartScheduler+0x68>
}
 800a9a2:	bf00      	nop
 800a9a4:	3710      	adds	r7, #16
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	bd80      	pop	{r7, pc}
 800a9aa:	bf00      	nop
 800a9ac:	20003e00 	.word	0x20003e00
 800a9b0:	0800cf38 	.word	0x0800cf38
 800a9b4:	0800af6d 	.word	0x0800af6d
 800a9b8:	20003dfc 	.word	0x20003dfc
 800a9bc:	20003de8 	.word	0x20003de8
 800a9c0:	20003de0 	.word	0x20003de0

0800a9c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a9c4:	b480      	push	{r7}
 800a9c6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800a9c8:	4b04      	ldr	r3, [pc, #16]	; (800a9dc <vTaskSuspendAll+0x18>)
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	3301      	adds	r3, #1
 800a9ce:	4a03      	ldr	r2, [pc, #12]	; (800a9dc <vTaskSuspendAll+0x18>)
 800a9d0:	6013      	str	r3, [r2, #0]
}
 800a9d2:	bf00      	nop
 800a9d4:	46bd      	mov	sp, r7
 800a9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9da:	4770      	bx	lr
 800a9dc:	20003e04 	.word	0x20003e04

0800a9e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b084      	sub	sp, #16
 800a9e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a9ee:	4b41      	ldr	r3, [pc, #260]	; (800aaf4 <xTaskResumeAll+0x114>)
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d109      	bne.n	800aa0a <xTaskResumeAll+0x2a>
 800a9f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9fa:	f383 8811 	msr	BASEPRI, r3
 800a9fe:	f3bf 8f6f 	isb	sy
 800aa02:	f3bf 8f4f 	dsb	sy
 800aa06:	603b      	str	r3, [r7, #0]
 800aa08:	e7fe      	b.n	800aa08 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800aa0a:	f7fe fe11 	bl	8009630 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800aa0e:	4b39      	ldr	r3, [pc, #228]	; (800aaf4 <xTaskResumeAll+0x114>)
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	3b01      	subs	r3, #1
 800aa14:	4a37      	ldr	r2, [pc, #220]	; (800aaf4 <xTaskResumeAll+0x114>)
 800aa16:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aa18:	4b36      	ldr	r3, [pc, #216]	; (800aaf4 <xTaskResumeAll+0x114>)
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d161      	bne.n	800aae4 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800aa20:	4b35      	ldr	r3, [pc, #212]	; (800aaf8 <xTaskResumeAll+0x118>)
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d05d      	beq.n	800aae4 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800aa28:	e02e      	b.n	800aa88 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800aa2a:	4b34      	ldr	r3, [pc, #208]	; (800aafc <xTaskResumeAll+0x11c>)
 800aa2c:	68db      	ldr	r3, [r3, #12]
 800aa2e:	68db      	ldr	r3, [r3, #12]
 800aa30:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	3318      	adds	r3, #24
 800aa36:	4618      	mov	r0, r3
 800aa38:	f7fe fcc7 	bl	80093ca <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	3304      	adds	r3, #4
 800aa40:	4618      	mov	r0, r3
 800aa42:	f7fe fcc2 	bl	80093ca <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa4a:	2201      	movs	r2, #1
 800aa4c:	409a      	lsls	r2, r3
 800aa4e:	4b2c      	ldr	r3, [pc, #176]	; (800ab00 <xTaskResumeAll+0x120>)
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	4313      	orrs	r3, r2
 800aa54:	4a2a      	ldr	r2, [pc, #168]	; (800ab00 <xTaskResumeAll+0x120>)
 800aa56:	6013      	str	r3, [r2, #0]
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa5c:	4613      	mov	r3, r2
 800aa5e:	009b      	lsls	r3, r3, #2
 800aa60:	4413      	add	r3, r2
 800aa62:	009b      	lsls	r3, r3, #2
 800aa64:	4a27      	ldr	r2, [pc, #156]	; (800ab04 <xTaskResumeAll+0x124>)
 800aa66:	441a      	add	r2, r3
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	3304      	adds	r3, #4
 800aa6c:	4619      	mov	r1, r3
 800aa6e:	4610      	mov	r0, r2
 800aa70:	f7fe fc4e 	bl	8009310 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa78:	4b23      	ldr	r3, [pc, #140]	; (800ab08 <xTaskResumeAll+0x128>)
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa7e:	429a      	cmp	r2, r3
 800aa80:	d302      	bcc.n	800aa88 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800aa82:	4b22      	ldr	r3, [pc, #136]	; (800ab0c <xTaskResumeAll+0x12c>)
 800aa84:	2201      	movs	r2, #1
 800aa86:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800aa88:	4b1c      	ldr	r3, [pc, #112]	; (800aafc <xTaskResumeAll+0x11c>)
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d1cc      	bne.n	800aa2a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d001      	beq.n	800aa9a <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800aa96:	f000 fb0d 	bl	800b0b4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800aa9a:	4b1d      	ldr	r3, [pc, #116]	; (800ab10 <xTaskResumeAll+0x130>)
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d010      	beq.n	800aac8 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800aaa6:	f000 f837 	bl	800ab18 <xTaskIncrementTick>
 800aaaa:	4603      	mov	r3, r0
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d002      	beq.n	800aab6 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800aab0:	4b16      	ldr	r3, [pc, #88]	; (800ab0c <xTaskResumeAll+0x12c>)
 800aab2:	2201      	movs	r2, #1
 800aab4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	3b01      	subs	r3, #1
 800aaba:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d1f1      	bne.n	800aaa6 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800aac2:	4b13      	ldr	r3, [pc, #76]	; (800ab10 <xTaskResumeAll+0x130>)
 800aac4:	2200      	movs	r2, #0
 800aac6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800aac8:	4b10      	ldr	r3, [pc, #64]	; (800ab0c <xTaskResumeAll+0x12c>)
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d009      	beq.n	800aae4 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800aad0:	2301      	movs	r3, #1
 800aad2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800aad4:	4b0f      	ldr	r3, [pc, #60]	; (800ab14 <xTaskResumeAll+0x134>)
 800aad6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aada:	601a      	str	r2, [r3, #0]
 800aadc:	f3bf 8f4f 	dsb	sy
 800aae0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800aae4:	f7fe fdd2 	bl	800968c <vPortExitCritical>

	return xAlreadyYielded;
 800aae8:	68bb      	ldr	r3, [r7, #8]
}
 800aaea:	4618      	mov	r0, r3
 800aaec:	3710      	adds	r7, #16
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	bd80      	pop	{r7, pc}
 800aaf2:	bf00      	nop
 800aaf4:	20003e04 	.word	0x20003e04
 800aaf8:	20003ddc 	.word	0x20003ddc
 800aafc:	20003d9c 	.word	0x20003d9c
 800ab00:	20003de4 	.word	0x20003de4
 800ab04:	20003ce0 	.word	0x20003ce0
 800ab08:	20003cdc 	.word	0x20003cdc
 800ab0c:	20003df0 	.word	0x20003df0
 800ab10:	20003dec 	.word	0x20003dec
 800ab14:	e000ed04 	.word	0xe000ed04

0800ab18 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	b086      	sub	sp, #24
 800ab1c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ab1e:	2300      	movs	r3, #0
 800ab20:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ab22:	4b50      	ldr	r3, [pc, #320]	; (800ac64 <xTaskIncrementTick+0x14c>)
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	f040 808c 	bne.w	800ac44 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 800ab2c:	4b4e      	ldr	r3, [pc, #312]	; (800ac68 <xTaskIncrementTick+0x150>)
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	3301      	adds	r3, #1
 800ab32:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ab34:	4a4c      	ldr	r2, [pc, #304]	; (800ac68 <xTaskIncrementTick+0x150>)
 800ab36:	693b      	ldr	r3, [r7, #16]
 800ab38:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 800ab3a:	693b      	ldr	r3, [r7, #16]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d11f      	bne.n	800ab80 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800ab40:	4b4a      	ldr	r3, [pc, #296]	; (800ac6c <xTaskIncrementTick+0x154>)
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d009      	beq.n	800ab5e <xTaskIncrementTick+0x46>
 800ab4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab4e:	f383 8811 	msr	BASEPRI, r3
 800ab52:	f3bf 8f6f 	isb	sy
 800ab56:	f3bf 8f4f 	dsb	sy
 800ab5a:	603b      	str	r3, [r7, #0]
 800ab5c:	e7fe      	b.n	800ab5c <xTaskIncrementTick+0x44>
 800ab5e:	4b43      	ldr	r3, [pc, #268]	; (800ac6c <xTaskIncrementTick+0x154>)
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	60fb      	str	r3, [r7, #12]
 800ab64:	4b42      	ldr	r3, [pc, #264]	; (800ac70 <xTaskIncrementTick+0x158>)
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	4a40      	ldr	r2, [pc, #256]	; (800ac6c <xTaskIncrementTick+0x154>)
 800ab6a:	6013      	str	r3, [r2, #0]
 800ab6c:	4a40      	ldr	r2, [pc, #256]	; (800ac70 <xTaskIncrementTick+0x158>)
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	6013      	str	r3, [r2, #0]
 800ab72:	4b40      	ldr	r3, [pc, #256]	; (800ac74 <xTaskIncrementTick+0x15c>)
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	3301      	adds	r3, #1
 800ab78:	4a3e      	ldr	r2, [pc, #248]	; (800ac74 <xTaskIncrementTick+0x15c>)
 800ab7a:	6013      	str	r3, [r2, #0]
 800ab7c:	f000 fa9a 	bl	800b0b4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ab80:	4b3d      	ldr	r3, [pc, #244]	; (800ac78 <xTaskIncrementTick+0x160>)
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	693a      	ldr	r2, [r7, #16]
 800ab86:	429a      	cmp	r2, r3
 800ab88:	d34d      	bcc.n	800ac26 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ab8a:	4b38      	ldr	r3, [pc, #224]	; (800ac6c <xTaskIncrementTick+0x154>)
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d101      	bne.n	800ab98 <xTaskIncrementTick+0x80>
 800ab94:	2301      	movs	r3, #1
 800ab96:	e000      	b.n	800ab9a <xTaskIncrementTick+0x82>
 800ab98:	2300      	movs	r3, #0
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d004      	beq.n	800aba8 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab9e:	4b36      	ldr	r3, [pc, #216]	; (800ac78 <xTaskIncrementTick+0x160>)
 800aba0:	f04f 32ff 	mov.w	r2, #4294967295
 800aba4:	601a      	str	r2, [r3, #0]
					break;
 800aba6:	e03e      	b.n	800ac26 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800aba8:	4b30      	ldr	r3, [pc, #192]	; (800ac6c <xTaskIncrementTick+0x154>)
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	68db      	ldr	r3, [r3, #12]
 800abae:	68db      	ldr	r3, [r3, #12]
 800abb0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800abb2:	68bb      	ldr	r3, [r7, #8]
 800abb4:	685b      	ldr	r3, [r3, #4]
 800abb6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800abb8:	693a      	ldr	r2, [r7, #16]
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	429a      	cmp	r2, r3
 800abbe:	d203      	bcs.n	800abc8 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800abc0:	4a2d      	ldr	r2, [pc, #180]	; (800ac78 <xTaskIncrementTick+0x160>)
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	6013      	str	r3, [r2, #0]
						break;
 800abc6:	e02e      	b.n	800ac26 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800abc8:	68bb      	ldr	r3, [r7, #8]
 800abca:	3304      	adds	r3, #4
 800abcc:	4618      	mov	r0, r3
 800abce:	f7fe fbfc 	bl	80093ca <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800abd2:	68bb      	ldr	r3, [r7, #8]
 800abd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d004      	beq.n	800abe4 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800abda:	68bb      	ldr	r3, [r7, #8]
 800abdc:	3318      	adds	r3, #24
 800abde:	4618      	mov	r0, r3
 800abe0:	f7fe fbf3 	bl	80093ca <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800abe4:	68bb      	ldr	r3, [r7, #8]
 800abe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abe8:	2201      	movs	r2, #1
 800abea:	409a      	lsls	r2, r3
 800abec:	4b23      	ldr	r3, [pc, #140]	; (800ac7c <xTaskIncrementTick+0x164>)
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	4313      	orrs	r3, r2
 800abf2:	4a22      	ldr	r2, [pc, #136]	; (800ac7c <xTaskIncrementTick+0x164>)
 800abf4:	6013      	str	r3, [r2, #0]
 800abf6:	68bb      	ldr	r3, [r7, #8]
 800abf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abfa:	4613      	mov	r3, r2
 800abfc:	009b      	lsls	r3, r3, #2
 800abfe:	4413      	add	r3, r2
 800ac00:	009b      	lsls	r3, r3, #2
 800ac02:	4a1f      	ldr	r2, [pc, #124]	; (800ac80 <xTaskIncrementTick+0x168>)
 800ac04:	441a      	add	r2, r3
 800ac06:	68bb      	ldr	r3, [r7, #8]
 800ac08:	3304      	adds	r3, #4
 800ac0a:	4619      	mov	r1, r3
 800ac0c:	4610      	mov	r0, r2
 800ac0e:	f7fe fb7f 	bl	8009310 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ac12:	68bb      	ldr	r3, [r7, #8]
 800ac14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac16:	4b1b      	ldr	r3, [pc, #108]	; (800ac84 <xTaskIncrementTick+0x16c>)
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac1c:	429a      	cmp	r2, r3
 800ac1e:	d3b4      	bcc.n	800ab8a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800ac20:	2301      	movs	r3, #1
 800ac22:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ac24:	e7b1      	b.n	800ab8a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ac26:	4b17      	ldr	r3, [pc, #92]	; (800ac84 <xTaskIncrementTick+0x16c>)
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac2c:	4914      	ldr	r1, [pc, #80]	; (800ac80 <xTaskIncrementTick+0x168>)
 800ac2e:	4613      	mov	r3, r2
 800ac30:	009b      	lsls	r3, r3, #2
 800ac32:	4413      	add	r3, r2
 800ac34:	009b      	lsls	r3, r3, #2
 800ac36:	440b      	add	r3, r1
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	2b01      	cmp	r3, #1
 800ac3c:	d907      	bls.n	800ac4e <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800ac3e:	2301      	movs	r3, #1
 800ac40:	617b      	str	r3, [r7, #20]
 800ac42:	e004      	b.n	800ac4e <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800ac44:	4b10      	ldr	r3, [pc, #64]	; (800ac88 <xTaskIncrementTick+0x170>)
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	3301      	adds	r3, #1
 800ac4a:	4a0f      	ldr	r2, [pc, #60]	; (800ac88 <xTaskIncrementTick+0x170>)
 800ac4c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800ac4e:	4b0f      	ldr	r3, [pc, #60]	; (800ac8c <xTaskIncrementTick+0x174>)
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d001      	beq.n	800ac5a <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800ac56:	2301      	movs	r3, #1
 800ac58:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800ac5a:	697b      	ldr	r3, [r7, #20]
}
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	3718      	adds	r7, #24
 800ac60:	46bd      	mov	sp, r7
 800ac62:	bd80      	pop	{r7, pc}
 800ac64:	20003e04 	.word	0x20003e04
 800ac68:	20003de0 	.word	0x20003de0
 800ac6c:	20003d94 	.word	0x20003d94
 800ac70:	20003d98 	.word	0x20003d98
 800ac74:	20003df4 	.word	0x20003df4
 800ac78:	20003dfc 	.word	0x20003dfc
 800ac7c:	20003de4 	.word	0x20003de4
 800ac80:	20003ce0 	.word	0x20003ce0
 800ac84:	20003cdc 	.word	0x20003cdc
 800ac88:	20003dec 	.word	0x20003dec
 800ac8c:	20003df0 	.word	0x20003df0

0800ac90 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ac90:	b480      	push	{r7}
 800ac92:	b087      	sub	sp, #28
 800ac94:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ac96:	4b26      	ldr	r3, [pc, #152]	; (800ad30 <vTaskSwitchContext+0xa0>)
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d003      	beq.n	800aca6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ac9e:	4b25      	ldr	r3, [pc, #148]	; (800ad34 <vTaskSwitchContext+0xa4>)
 800aca0:	2201      	movs	r2, #1
 800aca2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800aca4:	e03e      	b.n	800ad24 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800aca6:	4b23      	ldr	r3, [pc, #140]	; (800ad34 <vTaskSwitchContext+0xa4>)
 800aca8:	2200      	movs	r2, #0
 800acaa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800acac:	4b22      	ldr	r3, [pc, #136]	; (800ad38 <vTaskSwitchContext+0xa8>)
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	fab3 f383 	clz	r3, r3
 800acb8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800acba:	7afb      	ldrb	r3, [r7, #11]
 800acbc:	f1c3 031f 	rsb	r3, r3, #31
 800acc0:	617b      	str	r3, [r7, #20]
 800acc2:	491e      	ldr	r1, [pc, #120]	; (800ad3c <vTaskSwitchContext+0xac>)
 800acc4:	697a      	ldr	r2, [r7, #20]
 800acc6:	4613      	mov	r3, r2
 800acc8:	009b      	lsls	r3, r3, #2
 800acca:	4413      	add	r3, r2
 800accc:	009b      	lsls	r3, r3, #2
 800acce:	440b      	add	r3, r1
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d109      	bne.n	800acea <vTaskSwitchContext+0x5a>
	__asm volatile
 800acd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acda:	f383 8811 	msr	BASEPRI, r3
 800acde:	f3bf 8f6f 	isb	sy
 800ace2:	f3bf 8f4f 	dsb	sy
 800ace6:	607b      	str	r3, [r7, #4]
 800ace8:	e7fe      	b.n	800ace8 <vTaskSwitchContext+0x58>
 800acea:	697a      	ldr	r2, [r7, #20]
 800acec:	4613      	mov	r3, r2
 800acee:	009b      	lsls	r3, r3, #2
 800acf0:	4413      	add	r3, r2
 800acf2:	009b      	lsls	r3, r3, #2
 800acf4:	4a11      	ldr	r2, [pc, #68]	; (800ad3c <vTaskSwitchContext+0xac>)
 800acf6:	4413      	add	r3, r2
 800acf8:	613b      	str	r3, [r7, #16]
 800acfa:	693b      	ldr	r3, [r7, #16]
 800acfc:	685b      	ldr	r3, [r3, #4]
 800acfe:	685a      	ldr	r2, [r3, #4]
 800ad00:	693b      	ldr	r3, [r7, #16]
 800ad02:	605a      	str	r2, [r3, #4]
 800ad04:	693b      	ldr	r3, [r7, #16]
 800ad06:	685a      	ldr	r2, [r3, #4]
 800ad08:	693b      	ldr	r3, [r7, #16]
 800ad0a:	3308      	adds	r3, #8
 800ad0c:	429a      	cmp	r2, r3
 800ad0e:	d104      	bne.n	800ad1a <vTaskSwitchContext+0x8a>
 800ad10:	693b      	ldr	r3, [r7, #16]
 800ad12:	685b      	ldr	r3, [r3, #4]
 800ad14:	685a      	ldr	r2, [r3, #4]
 800ad16:	693b      	ldr	r3, [r7, #16]
 800ad18:	605a      	str	r2, [r3, #4]
 800ad1a:	693b      	ldr	r3, [r7, #16]
 800ad1c:	685b      	ldr	r3, [r3, #4]
 800ad1e:	68db      	ldr	r3, [r3, #12]
 800ad20:	4a07      	ldr	r2, [pc, #28]	; (800ad40 <vTaskSwitchContext+0xb0>)
 800ad22:	6013      	str	r3, [r2, #0]
}
 800ad24:	bf00      	nop
 800ad26:	371c      	adds	r7, #28
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2e:	4770      	bx	lr
 800ad30:	20003e04 	.word	0x20003e04
 800ad34:	20003df0 	.word	0x20003df0
 800ad38:	20003de4 	.word	0x20003de4
 800ad3c:	20003ce0 	.word	0x20003ce0
 800ad40:	20003cdc 	.word	0x20003cdc

0800ad44 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ad44:	b580      	push	{r7, lr}
 800ad46:	b084      	sub	sp, #16
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	6078      	str	r0, [r7, #4]
 800ad4c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d109      	bne.n	800ad68 <vTaskPlaceOnEventList+0x24>
 800ad54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad58:	f383 8811 	msr	BASEPRI, r3
 800ad5c:	f3bf 8f6f 	isb	sy
 800ad60:	f3bf 8f4f 	dsb	sy
 800ad64:	60fb      	str	r3, [r7, #12]
 800ad66:	e7fe      	b.n	800ad66 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ad68:	4b07      	ldr	r3, [pc, #28]	; (800ad88 <vTaskPlaceOnEventList+0x44>)
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	3318      	adds	r3, #24
 800ad6e:	4619      	mov	r1, r3
 800ad70:	6878      	ldr	r0, [r7, #4]
 800ad72:	f7fe faf1 	bl	8009358 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ad76:	2101      	movs	r1, #1
 800ad78:	6838      	ldr	r0, [r7, #0]
 800ad7a:	f000 faed 	bl	800b358 <prvAddCurrentTaskToDelayedList>
}
 800ad7e:	bf00      	nop
 800ad80:	3710      	adds	r7, #16
 800ad82:	46bd      	mov	sp, r7
 800ad84:	bd80      	pop	{r7, pc}
 800ad86:	bf00      	nop
 800ad88:	20003cdc 	.word	0x20003cdc

0800ad8c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b086      	sub	sp, #24
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	68db      	ldr	r3, [r3, #12]
 800ad98:	68db      	ldr	r3, [r3, #12]
 800ad9a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ad9c:	693b      	ldr	r3, [r7, #16]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d109      	bne.n	800adb6 <xTaskRemoveFromEventList+0x2a>
 800ada2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ada6:	f383 8811 	msr	BASEPRI, r3
 800adaa:	f3bf 8f6f 	isb	sy
 800adae:	f3bf 8f4f 	dsb	sy
 800adb2:	60fb      	str	r3, [r7, #12]
 800adb4:	e7fe      	b.n	800adb4 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800adb6:	693b      	ldr	r3, [r7, #16]
 800adb8:	3318      	adds	r3, #24
 800adba:	4618      	mov	r0, r3
 800adbc:	f7fe fb05 	bl	80093ca <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800adc0:	4b1d      	ldr	r3, [pc, #116]	; (800ae38 <xTaskRemoveFromEventList+0xac>)
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d11c      	bne.n	800ae02 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800adc8:	693b      	ldr	r3, [r7, #16]
 800adca:	3304      	adds	r3, #4
 800adcc:	4618      	mov	r0, r3
 800adce:	f7fe fafc 	bl	80093ca <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800add2:	693b      	ldr	r3, [r7, #16]
 800add4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800add6:	2201      	movs	r2, #1
 800add8:	409a      	lsls	r2, r3
 800adda:	4b18      	ldr	r3, [pc, #96]	; (800ae3c <xTaskRemoveFromEventList+0xb0>)
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	4313      	orrs	r3, r2
 800ade0:	4a16      	ldr	r2, [pc, #88]	; (800ae3c <xTaskRemoveFromEventList+0xb0>)
 800ade2:	6013      	str	r3, [r2, #0]
 800ade4:	693b      	ldr	r3, [r7, #16]
 800ade6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ade8:	4613      	mov	r3, r2
 800adea:	009b      	lsls	r3, r3, #2
 800adec:	4413      	add	r3, r2
 800adee:	009b      	lsls	r3, r3, #2
 800adf0:	4a13      	ldr	r2, [pc, #76]	; (800ae40 <xTaskRemoveFromEventList+0xb4>)
 800adf2:	441a      	add	r2, r3
 800adf4:	693b      	ldr	r3, [r7, #16]
 800adf6:	3304      	adds	r3, #4
 800adf8:	4619      	mov	r1, r3
 800adfa:	4610      	mov	r0, r2
 800adfc:	f7fe fa88 	bl	8009310 <vListInsertEnd>
 800ae00:	e005      	b.n	800ae0e <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ae02:	693b      	ldr	r3, [r7, #16]
 800ae04:	3318      	adds	r3, #24
 800ae06:	4619      	mov	r1, r3
 800ae08:	480e      	ldr	r0, [pc, #56]	; (800ae44 <xTaskRemoveFromEventList+0xb8>)
 800ae0a:	f7fe fa81 	bl	8009310 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ae0e:	693b      	ldr	r3, [r7, #16]
 800ae10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae12:	4b0d      	ldr	r3, [pc, #52]	; (800ae48 <xTaskRemoveFromEventList+0xbc>)
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae18:	429a      	cmp	r2, r3
 800ae1a:	d905      	bls.n	800ae28 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ae1c:	2301      	movs	r3, #1
 800ae1e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ae20:	4b0a      	ldr	r3, [pc, #40]	; (800ae4c <xTaskRemoveFromEventList+0xc0>)
 800ae22:	2201      	movs	r2, #1
 800ae24:	601a      	str	r2, [r3, #0]
 800ae26:	e001      	b.n	800ae2c <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800ae28:	2300      	movs	r3, #0
 800ae2a:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800ae2c:	697b      	ldr	r3, [r7, #20]
}
 800ae2e:	4618      	mov	r0, r3
 800ae30:	3718      	adds	r7, #24
 800ae32:	46bd      	mov	sp, r7
 800ae34:	bd80      	pop	{r7, pc}
 800ae36:	bf00      	nop
 800ae38:	20003e04 	.word	0x20003e04
 800ae3c:	20003de4 	.word	0x20003de4
 800ae40:	20003ce0 	.word	0x20003ce0
 800ae44:	20003d9c 	.word	0x20003d9c
 800ae48:	20003cdc 	.word	0x20003cdc
 800ae4c:	20003df0 	.word	0x20003df0

0800ae50 <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ae50:	b480      	push	{r7}
 800ae52:	b085      	sub	sp, #20
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d109      	bne.n	800ae72 <vTaskSetTimeOutState+0x22>
 800ae5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae62:	f383 8811 	msr	BASEPRI, r3
 800ae66:	f3bf 8f6f 	isb	sy
 800ae6a:	f3bf 8f4f 	dsb	sy
 800ae6e:	60fb      	str	r3, [r7, #12]
 800ae70:	e7fe      	b.n	800ae70 <vTaskSetTimeOutState+0x20>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ae72:	4b07      	ldr	r3, [pc, #28]	; (800ae90 <vTaskSetTimeOutState+0x40>)
 800ae74:	681a      	ldr	r2, [r3, #0]
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ae7a:	4b06      	ldr	r3, [pc, #24]	; (800ae94 <vTaskSetTimeOutState+0x44>)
 800ae7c:	681a      	ldr	r2, [r3, #0]
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	605a      	str	r2, [r3, #4]
}
 800ae82:	bf00      	nop
 800ae84:	3714      	adds	r7, #20
 800ae86:	46bd      	mov	sp, r7
 800ae88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8c:	4770      	bx	lr
 800ae8e:	bf00      	nop
 800ae90:	20003df4 	.word	0x20003df4
 800ae94:	20003de0 	.word	0x20003de0

0800ae98 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	b086      	sub	sp, #24
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
 800aea0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d109      	bne.n	800aebc <xTaskCheckForTimeOut+0x24>
 800aea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeac:	f383 8811 	msr	BASEPRI, r3
 800aeb0:	f3bf 8f6f 	isb	sy
 800aeb4:	f3bf 8f4f 	dsb	sy
 800aeb8:	60fb      	str	r3, [r7, #12]
 800aeba:	e7fe      	b.n	800aeba <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800aebc:	683b      	ldr	r3, [r7, #0]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d109      	bne.n	800aed6 <xTaskCheckForTimeOut+0x3e>
 800aec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aec6:	f383 8811 	msr	BASEPRI, r3
 800aeca:	f3bf 8f6f 	isb	sy
 800aece:	f3bf 8f4f 	dsb	sy
 800aed2:	60bb      	str	r3, [r7, #8]
 800aed4:	e7fe      	b.n	800aed4 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800aed6:	f7fe fbab 	bl	8009630 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800aeda:	4b1c      	ldr	r3, [pc, #112]	; (800af4c <xTaskCheckForTimeOut+0xb4>)
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	613b      	str	r3, [r7, #16]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800aee0:	683b      	ldr	r3, [r7, #0]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aee8:	d102      	bne.n	800aef0 <xTaskCheckForTimeOut+0x58>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800aeea:	2300      	movs	r3, #0
 800aeec:	617b      	str	r3, [r7, #20]
 800aeee:	e026      	b.n	800af3e <xTaskCheckForTimeOut+0xa6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	681a      	ldr	r2, [r3, #0]
 800aef4:	4b16      	ldr	r3, [pc, #88]	; (800af50 <xTaskCheckForTimeOut+0xb8>)
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	429a      	cmp	r2, r3
 800aefa:	d007      	beq.n	800af0c <xTaskCheckForTimeOut+0x74>
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	685a      	ldr	r2, [r3, #4]
 800af00:	693b      	ldr	r3, [r7, #16]
 800af02:	429a      	cmp	r2, r3
 800af04:	d802      	bhi.n	800af0c <xTaskCheckForTimeOut+0x74>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800af06:	2301      	movs	r3, #1
 800af08:	617b      	str	r3, [r7, #20]
 800af0a:	e018      	b.n	800af3e <xTaskCheckForTimeOut+0xa6>
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	685b      	ldr	r3, [r3, #4]
 800af10:	693a      	ldr	r2, [r7, #16]
 800af12:	1ad2      	subs	r2, r2, r3
 800af14:	683b      	ldr	r3, [r7, #0]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	429a      	cmp	r2, r3
 800af1a:	d20e      	bcs.n	800af3a <xTaskCheckForTimeOut+0xa2>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 800af1c:	683b      	ldr	r3, [r7, #0]
 800af1e:	681a      	ldr	r2, [r3, #0]
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	6859      	ldr	r1, [r3, #4]
 800af24:	693b      	ldr	r3, [r7, #16]
 800af26:	1acb      	subs	r3, r1, r3
 800af28:	441a      	add	r2, r3
 800af2a:	683b      	ldr	r3, [r7, #0]
 800af2c:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 800af2e:	6878      	ldr	r0, [r7, #4]
 800af30:	f7ff ff8e 	bl	800ae50 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 800af34:	2300      	movs	r3, #0
 800af36:	617b      	str	r3, [r7, #20]
 800af38:	e001      	b.n	800af3e <xTaskCheckForTimeOut+0xa6>
		}
		else
		{
			xReturn = pdTRUE;
 800af3a:	2301      	movs	r3, #1
 800af3c:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800af3e:	f7fe fba5 	bl	800968c <vPortExitCritical>

	return xReturn;
 800af42:	697b      	ldr	r3, [r7, #20]
}
 800af44:	4618      	mov	r0, r3
 800af46:	3718      	adds	r7, #24
 800af48:	46bd      	mov	sp, r7
 800af4a:	bd80      	pop	{r7, pc}
 800af4c:	20003de0 	.word	0x20003de0
 800af50:	20003df4 	.word	0x20003df4

0800af54 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800af54:	b480      	push	{r7}
 800af56:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800af58:	4b03      	ldr	r3, [pc, #12]	; (800af68 <vTaskMissedYield+0x14>)
 800af5a:	2201      	movs	r2, #1
 800af5c:	601a      	str	r2, [r3, #0]
}
 800af5e:	bf00      	nop
 800af60:	46bd      	mov	sp, r7
 800af62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af66:	4770      	bx	lr
 800af68:	20003df0 	.word	0x20003df0

0800af6c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b082      	sub	sp, #8
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800af74:	f000 f852 	bl	800b01c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800af78:	4b06      	ldr	r3, [pc, #24]	; (800af94 <prvIdleTask+0x28>)
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	2b01      	cmp	r3, #1
 800af7e:	d9f9      	bls.n	800af74 <prvIdleTask+0x8>
			{
				taskYIELD();
 800af80:	4b05      	ldr	r3, [pc, #20]	; (800af98 <prvIdleTask+0x2c>)
 800af82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af86:	601a      	str	r2, [r3, #0]
 800af88:	f3bf 8f4f 	dsb	sy
 800af8c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800af90:	e7f0      	b.n	800af74 <prvIdleTask+0x8>
 800af92:	bf00      	nop
 800af94:	20003ce0 	.word	0x20003ce0
 800af98:	e000ed04 	.word	0xe000ed04

0800af9c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b082      	sub	sp, #8
 800afa0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800afa2:	2300      	movs	r3, #0
 800afa4:	607b      	str	r3, [r7, #4]
 800afa6:	e00c      	b.n	800afc2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800afa8:	687a      	ldr	r2, [r7, #4]
 800afaa:	4613      	mov	r3, r2
 800afac:	009b      	lsls	r3, r3, #2
 800afae:	4413      	add	r3, r2
 800afb0:	009b      	lsls	r3, r3, #2
 800afb2:	4a12      	ldr	r2, [pc, #72]	; (800affc <prvInitialiseTaskLists+0x60>)
 800afb4:	4413      	add	r3, r2
 800afb6:	4618      	mov	r0, r3
 800afb8:	f7fe f97d 	bl	80092b6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	3301      	adds	r3, #1
 800afc0:	607b      	str	r3, [r7, #4]
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	2b06      	cmp	r3, #6
 800afc6:	d9ef      	bls.n	800afa8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800afc8:	480d      	ldr	r0, [pc, #52]	; (800b000 <prvInitialiseTaskLists+0x64>)
 800afca:	f7fe f974 	bl	80092b6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800afce:	480d      	ldr	r0, [pc, #52]	; (800b004 <prvInitialiseTaskLists+0x68>)
 800afd0:	f7fe f971 	bl	80092b6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800afd4:	480c      	ldr	r0, [pc, #48]	; (800b008 <prvInitialiseTaskLists+0x6c>)
 800afd6:	f7fe f96e 	bl	80092b6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800afda:	480c      	ldr	r0, [pc, #48]	; (800b00c <prvInitialiseTaskLists+0x70>)
 800afdc:	f7fe f96b 	bl	80092b6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800afe0:	480b      	ldr	r0, [pc, #44]	; (800b010 <prvInitialiseTaskLists+0x74>)
 800afe2:	f7fe f968 	bl	80092b6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800afe6:	4b0b      	ldr	r3, [pc, #44]	; (800b014 <prvInitialiseTaskLists+0x78>)
 800afe8:	4a05      	ldr	r2, [pc, #20]	; (800b000 <prvInitialiseTaskLists+0x64>)
 800afea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800afec:	4b0a      	ldr	r3, [pc, #40]	; (800b018 <prvInitialiseTaskLists+0x7c>)
 800afee:	4a05      	ldr	r2, [pc, #20]	; (800b004 <prvInitialiseTaskLists+0x68>)
 800aff0:	601a      	str	r2, [r3, #0]
}
 800aff2:	bf00      	nop
 800aff4:	3708      	adds	r7, #8
 800aff6:	46bd      	mov	sp, r7
 800aff8:	bd80      	pop	{r7, pc}
 800affa:	bf00      	nop
 800affc:	20003ce0 	.word	0x20003ce0
 800b000:	20003d6c 	.word	0x20003d6c
 800b004:	20003d80 	.word	0x20003d80
 800b008:	20003d9c 	.word	0x20003d9c
 800b00c:	20003db0 	.word	0x20003db0
 800b010:	20003dc8 	.word	0x20003dc8
 800b014:	20003d94 	.word	0x20003d94
 800b018:	20003d98 	.word	0x20003d98

0800b01c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b01c:	b580      	push	{r7, lr}
 800b01e:	b082      	sub	sp, #8
 800b020:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b022:	e028      	b.n	800b076 <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 800b024:	f7ff fcce 	bl	800a9c4 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800b028:	4b17      	ldr	r3, [pc, #92]	; (800b088 <prvCheckTasksWaitingTermination+0x6c>)
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	bf0c      	ite	eq
 800b030:	2301      	moveq	r3, #1
 800b032:	2300      	movne	r3, #0
 800b034:	b2db      	uxtb	r3, r3
 800b036:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 800b038:	f7ff fcd2 	bl	800a9e0 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d119      	bne.n	800b076 <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 800b042:	f7fe faf5 	bl	8009630 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800b046:	4b10      	ldr	r3, [pc, #64]	; (800b088 <prvCheckTasksWaitingTermination+0x6c>)
 800b048:	68db      	ldr	r3, [r3, #12]
 800b04a:	68db      	ldr	r3, [r3, #12]
 800b04c:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b04e:	683b      	ldr	r3, [r7, #0]
 800b050:	3304      	adds	r3, #4
 800b052:	4618      	mov	r0, r3
 800b054:	f7fe f9b9 	bl	80093ca <uxListRemove>
					--uxCurrentNumberOfTasks;
 800b058:	4b0c      	ldr	r3, [pc, #48]	; (800b08c <prvCheckTasksWaitingTermination+0x70>)
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	3b01      	subs	r3, #1
 800b05e:	4a0b      	ldr	r2, [pc, #44]	; (800b08c <prvCheckTasksWaitingTermination+0x70>)
 800b060:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 800b062:	4b0b      	ldr	r3, [pc, #44]	; (800b090 <prvCheckTasksWaitingTermination+0x74>)
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	3b01      	subs	r3, #1
 800b068:	4a09      	ldr	r2, [pc, #36]	; (800b090 <prvCheckTasksWaitingTermination+0x74>)
 800b06a:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
 800b06c:	f7fe fb0e 	bl	800968c <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 800b070:	6838      	ldr	r0, [r7, #0]
 800b072:	f000 f80f 	bl	800b094 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b076:	4b06      	ldr	r3, [pc, #24]	; (800b090 <prvCheckTasksWaitingTermination+0x74>)
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d1d2      	bne.n	800b024 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b07e:	bf00      	nop
 800b080:	3708      	adds	r7, #8
 800b082:	46bd      	mov	sp, r7
 800b084:	bd80      	pop	{r7, pc}
 800b086:	bf00      	nop
 800b088:	20003db0 	.word	0x20003db0
 800b08c:	20003ddc 	.word	0x20003ddc
 800b090:	20003dc4 	.word	0x20003dc4

0800b094 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b094:	b580      	push	{r7, lr}
 800b096:	b082      	sub	sp, #8
 800b098:	af00      	add	r7, sp, #0
 800b09a:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	f7fe fc97 	bl	80099d4 <vPortFree>
			vPortFree( pxTCB );
 800b0a6:	6878      	ldr	r0, [r7, #4]
 800b0a8:	f7fe fc94 	bl	80099d4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b0ac:	bf00      	nop
 800b0ae:	3708      	adds	r7, #8
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	bd80      	pop	{r7, pc}

0800b0b4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b0b4:	b480      	push	{r7}
 800b0b6:	b083      	sub	sp, #12
 800b0b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b0ba:	4b0f      	ldr	r3, [pc, #60]	; (800b0f8 <prvResetNextTaskUnblockTime+0x44>)
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d101      	bne.n	800b0c8 <prvResetNextTaskUnblockTime+0x14>
 800b0c4:	2301      	movs	r3, #1
 800b0c6:	e000      	b.n	800b0ca <prvResetNextTaskUnblockTime+0x16>
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d004      	beq.n	800b0d8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b0ce:	4b0b      	ldr	r3, [pc, #44]	; (800b0fc <prvResetNextTaskUnblockTime+0x48>)
 800b0d0:	f04f 32ff 	mov.w	r2, #4294967295
 800b0d4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b0d6:	e008      	b.n	800b0ea <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800b0d8:	4b07      	ldr	r3, [pc, #28]	; (800b0f8 <prvResetNextTaskUnblockTime+0x44>)
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	68db      	ldr	r3, [r3, #12]
 800b0de:	68db      	ldr	r3, [r3, #12]
 800b0e0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	685b      	ldr	r3, [r3, #4]
 800b0e6:	4a05      	ldr	r2, [pc, #20]	; (800b0fc <prvResetNextTaskUnblockTime+0x48>)
 800b0e8:	6013      	str	r3, [r2, #0]
}
 800b0ea:	bf00      	nop
 800b0ec:	370c      	adds	r7, #12
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f4:	4770      	bx	lr
 800b0f6:	bf00      	nop
 800b0f8:	20003d94 	.word	0x20003d94
 800b0fc:	20003dfc 	.word	0x20003dfc

0800b100 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b100:	b480      	push	{r7}
 800b102:	b083      	sub	sp, #12
 800b104:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b106:	4b0b      	ldr	r3, [pc, #44]	; (800b134 <xTaskGetSchedulerState+0x34>)
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d102      	bne.n	800b114 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b10e:	2301      	movs	r3, #1
 800b110:	607b      	str	r3, [r7, #4]
 800b112:	e008      	b.n	800b126 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b114:	4b08      	ldr	r3, [pc, #32]	; (800b138 <xTaskGetSchedulerState+0x38>)
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d102      	bne.n	800b122 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b11c:	2302      	movs	r3, #2
 800b11e:	607b      	str	r3, [r7, #4]
 800b120:	e001      	b.n	800b126 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b122:	2300      	movs	r3, #0
 800b124:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b126:	687b      	ldr	r3, [r7, #4]
	}
 800b128:	4618      	mov	r0, r3
 800b12a:	370c      	adds	r7, #12
 800b12c:	46bd      	mov	sp, r7
 800b12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b132:	4770      	bx	lr
 800b134:	20003de8 	.word	0x20003de8
 800b138:	20003e04 	.word	0x20003e04

0800b13c <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b13c:	b580      	push	{r7, lr}
 800b13e:	b084      	sub	sp, #16
 800b140:	af00      	add	r7, sp, #0
 800b142:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d062      	beq.n	800b214 <vTaskPriorityInherit+0xd8>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b152:	4b32      	ldr	r3, [pc, #200]	; (800b21c <vTaskPriorityInherit+0xe0>)
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b158:	429a      	cmp	r2, r3
 800b15a:	d25b      	bcs.n	800b214 <vTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	699b      	ldr	r3, [r3, #24]
 800b160:	2b00      	cmp	r3, #0
 800b162:	db06      	blt.n	800b172 <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b164:	4b2d      	ldr	r3, [pc, #180]	; (800b21c <vTaskPriorityInherit+0xe0>)
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b16a:	f1c3 0207 	rsb	r2, r3, #7
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	6959      	ldr	r1, [r3, #20]
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b17a:	4613      	mov	r3, r2
 800b17c:	009b      	lsls	r3, r3, #2
 800b17e:	4413      	add	r3, r2
 800b180:	009b      	lsls	r3, r3, #2
 800b182:	4a27      	ldr	r2, [pc, #156]	; (800b220 <vTaskPriorityInherit+0xe4>)
 800b184:	4413      	add	r3, r2
 800b186:	4299      	cmp	r1, r3
 800b188:	d101      	bne.n	800b18e <vTaskPriorityInherit+0x52>
 800b18a:	2301      	movs	r3, #1
 800b18c:	e000      	b.n	800b190 <vTaskPriorityInherit+0x54>
 800b18e:	2300      	movs	r3, #0
 800b190:	2b00      	cmp	r3, #0
 800b192:	d03a      	beq.n	800b20a <vTaskPriorityInherit+0xce>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	3304      	adds	r3, #4
 800b198:	4618      	mov	r0, r3
 800b19a:	f7fe f916 	bl	80093ca <uxListRemove>
 800b19e:	4603      	mov	r3, r0
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d115      	bne.n	800b1d0 <vTaskPriorityInherit+0x94>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1a8:	491d      	ldr	r1, [pc, #116]	; (800b220 <vTaskPriorityInherit+0xe4>)
 800b1aa:	4613      	mov	r3, r2
 800b1ac:	009b      	lsls	r3, r3, #2
 800b1ae:	4413      	add	r3, r2
 800b1b0:	009b      	lsls	r3, r3, #2
 800b1b2:	440b      	add	r3, r1
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d10a      	bne.n	800b1d0 <vTaskPriorityInherit+0x94>
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1be:	2201      	movs	r2, #1
 800b1c0:	fa02 f303 	lsl.w	r3, r2, r3
 800b1c4:	43da      	mvns	r2, r3
 800b1c6:	4b17      	ldr	r3, [pc, #92]	; (800b224 <vTaskPriorityInherit+0xe8>)
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	4013      	ands	r3, r2
 800b1cc:	4a15      	ldr	r2, [pc, #84]	; (800b224 <vTaskPriorityInherit+0xe8>)
 800b1ce:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b1d0:	4b12      	ldr	r3, [pc, #72]	; (800b21c <vTaskPriorityInherit+0xe0>)
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1de:	2201      	movs	r2, #1
 800b1e0:	409a      	lsls	r2, r3
 800b1e2:	4b10      	ldr	r3, [pc, #64]	; (800b224 <vTaskPriorityInherit+0xe8>)
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	4313      	orrs	r3, r2
 800b1e8:	4a0e      	ldr	r2, [pc, #56]	; (800b224 <vTaskPriorityInherit+0xe8>)
 800b1ea:	6013      	str	r3, [r2, #0]
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1f0:	4613      	mov	r3, r2
 800b1f2:	009b      	lsls	r3, r3, #2
 800b1f4:	4413      	add	r3, r2
 800b1f6:	009b      	lsls	r3, r3, #2
 800b1f8:	4a09      	ldr	r2, [pc, #36]	; (800b220 <vTaskPriorityInherit+0xe4>)
 800b1fa:	441a      	add	r2, r3
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	3304      	adds	r3, #4
 800b200:	4619      	mov	r1, r3
 800b202:	4610      	mov	r0, r2
 800b204:	f7fe f884 	bl	8009310 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b208:	e004      	b.n	800b214 <vTaskPriorityInherit+0xd8>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b20a:	4b04      	ldr	r3, [pc, #16]	; (800b21c <vTaskPriorityInherit+0xe0>)
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	62da      	str	r2, [r3, #44]	; 0x2c
	}
 800b214:	bf00      	nop
 800b216:	3710      	adds	r7, #16
 800b218:	46bd      	mov	sp, r7
 800b21a:	bd80      	pop	{r7, pc}
 800b21c:	20003cdc 	.word	0x20003cdc
 800b220:	20003ce0 	.word	0x20003ce0
 800b224:	20003de4 	.word	0x20003de4

0800b228 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b228:	b580      	push	{r7, lr}
 800b22a:	b086      	sub	sp, #24
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b234:	2300      	movs	r3, #0
 800b236:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d06c      	beq.n	800b318 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b23e:	4b39      	ldr	r3, [pc, #228]	; (800b324 <xTaskPriorityDisinherit+0xfc>)
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	693a      	ldr	r2, [r7, #16]
 800b244:	429a      	cmp	r2, r3
 800b246:	d009      	beq.n	800b25c <xTaskPriorityDisinherit+0x34>
 800b248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b24c:	f383 8811 	msr	BASEPRI, r3
 800b250:	f3bf 8f6f 	isb	sy
 800b254:	f3bf 8f4f 	dsb	sy
 800b258:	60fb      	str	r3, [r7, #12]
 800b25a:	e7fe      	b.n	800b25a <xTaskPriorityDisinherit+0x32>

			configASSERT( pxTCB->uxMutexesHeld );
 800b25c:	693b      	ldr	r3, [r7, #16]
 800b25e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b260:	2b00      	cmp	r3, #0
 800b262:	d109      	bne.n	800b278 <xTaskPriorityDisinherit+0x50>
 800b264:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b268:	f383 8811 	msr	BASEPRI, r3
 800b26c:	f3bf 8f6f 	isb	sy
 800b270:	f3bf 8f4f 	dsb	sy
 800b274:	60bb      	str	r3, [r7, #8]
 800b276:	e7fe      	b.n	800b276 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800b278:	693b      	ldr	r3, [r7, #16]
 800b27a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b27c:	1e5a      	subs	r2, r3, #1
 800b27e:	693b      	ldr	r3, [r7, #16]
 800b280:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b282:	693b      	ldr	r3, [r7, #16]
 800b284:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b286:	693b      	ldr	r3, [r7, #16]
 800b288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b28a:	429a      	cmp	r2, r3
 800b28c:	d044      	beq.n	800b318 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b28e:	693b      	ldr	r3, [r7, #16]
 800b290:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b292:	2b00      	cmp	r3, #0
 800b294:	d140      	bne.n	800b318 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b296:	693b      	ldr	r3, [r7, #16]
 800b298:	3304      	adds	r3, #4
 800b29a:	4618      	mov	r0, r3
 800b29c:	f7fe f895 	bl	80093ca <uxListRemove>
 800b2a0:	4603      	mov	r3, r0
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d115      	bne.n	800b2d2 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b2a6:	693b      	ldr	r3, [r7, #16]
 800b2a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2aa:	491f      	ldr	r1, [pc, #124]	; (800b328 <xTaskPriorityDisinherit+0x100>)
 800b2ac:	4613      	mov	r3, r2
 800b2ae:	009b      	lsls	r3, r3, #2
 800b2b0:	4413      	add	r3, r2
 800b2b2:	009b      	lsls	r3, r3, #2
 800b2b4:	440b      	add	r3, r1
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d10a      	bne.n	800b2d2 <xTaskPriorityDisinherit+0xaa>
 800b2bc:	693b      	ldr	r3, [r7, #16]
 800b2be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2c0:	2201      	movs	r2, #1
 800b2c2:	fa02 f303 	lsl.w	r3, r2, r3
 800b2c6:	43da      	mvns	r2, r3
 800b2c8:	4b18      	ldr	r3, [pc, #96]	; (800b32c <xTaskPriorityDisinherit+0x104>)
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	4013      	ands	r3, r2
 800b2ce:	4a17      	ldr	r2, [pc, #92]	; (800b32c <xTaskPriorityDisinherit+0x104>)
 800b2d0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b2d2:	693b      	ldr	r3, [r7, #16]
 800b2d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b2d6:	693b      	ldr	r3, [r7, #16]
 800b2d8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b2da:	693b      	ldr	r3, [r7, #16]
 800b2dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2de:	f1c3 0207 	rsb	r2, r3, #7
 800b2e2:	693b      	ldr	r3, [r7, #16]
 800b2e4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b2e6:	693b      	ldr	r3, [r7, #16]
 800b2e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2ea:	2201      	movs	r2, #1
 800b2ec:	409a      	lsls	r2, r3
 800b2ee:	4b0f      	ldr	r3, [pc, #60]	; (800b32c <xTaskPriorityDisinherit+0x104>)
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	4313      	orrs	r3, r2
 800b2f4:	4a0d      	ldr	r2, [pc, #52]	; (800b32c <xTaskPriorityDisinherit+0x104>)
 800b2f6:	6013      	str	r3, [r2, #0]
 800b2f8:	693b      	ldr	r3, [r7, #16]
 800b2fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2fc:	4613      	mov	r3, r2
 800b2fe:	009b      	lsls	r3, r3, #2
 800b300:	4413      	add	r3, r2
 800b302:	009b      	lsls	r3, r3, #2
 800b304:	4a08      	ldr	r2, [pc, #32]	; (800b328 <xTaskPriorityDisinherit+0x100>)
 800b306:	441a      	add	r2, r3
 800b308:	693b      	ldr	r3, [r7, #16]
 800b30a:	3304      	adds	r3, #4
 800b30c:	4619      	mov	r1, r3
 800b30e:	4610      	mov	r0, r2
 800b310:	f7fd fffe 	bl	8009310 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b314:	2301      	movs	r3, #1
 800b316:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b318:	697b      	ldr	r3, [r7, #20]
	}
 800b31a:	4618      	mov	r0, r3
 800b31c:	3718      	adds	r7, #24
 800b31e:	46bd      	mov	sp, r7
 800b320:	bd80      	pop	{r7, pc}
 800b322:	bf00      	nop
 800b324:	20003cdc 	.word	0x20003cdc
 800b328:	20003ce0 	.word	0x20003ce0
 800b32c:	20003de4 	.word	0x20003de4

0800b330 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800b330:	b480      	push	{r7}
 800b332:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b334:	4b07      	ldr	r3, [pc, #28]	; (800b354 <pvTaskIncrementMutexHeldCount+0x24>)
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d004      	beq.n	800b346 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b33c:	4b05      	ldr	r3, [pc, #20]	; (800b354 <pvTaskIncrementMutexHeldCount+0x24>)
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b342:	3201      	adds	r2, #1
 800b344:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800b346:	4b03      	ldr	r3, [pc, #12]	; (800b354 <pvTaskIncrementMutexHeldCount+0x24>)
 800b348:	681b      	ldr	r3, [r3, #0]
	}
 800b34a:	4618      	mov	r0, r3
 800b34c:	46bd      	mov	sp, r7
 800b34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b352:	4770      	bx	lr
 800b354:	20003cdc 	.word	0x20003cdc

0800b358 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b358:	b580      	push	{r7, lr}
 800b35a:	b084      	sub	sp, #16
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
 800b360:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b362:	4b29      	ldr	r3, [pc, #164]	; (800b408 <prvAddCurrentTaskToDelayedList+0xb0>)
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b368:	4b28      	ldr	r3, [pc, #160]	; (800b40c <prvAddCurrentTaskToDelayedList+0xb4>)
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	3304      	adds	r3, #4
 800b36e:	4618      	mov	r0, r3
 800b370:	f7fe f82b 	bl	80093ca <uxListRemove>
 800b374:	4603      	mov	r3, r0
 800b376:	2b00      	cmp	r3, #0
 800b378:	d10b      	bne.n	800b392 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800b37a:	4b24      	ldr	r3, [pc, #144]	; (800b40c <prvAddCurrentTaskToDelayedList+0xb4>)
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b380:	2201      	movs	r2, #1
 800b382:	fa02 f303 	lsl.w	r3, r2, r3
 800b386:	43da      	mvns	r2, r3
 800b388:	4b21      	ldr	r3, [pc, #132]	; (800b410 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	4013      	ands	r3, r2
 800b38e:	4a20      	ldr	r2, [pc, #128]	; (800b410 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b390:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b398:	d10a      	bne.n	800b3b0 <prvAddCurrentTaskToDelayedList+0x58>
 800b39a:	683b      	ldr	r3, [r7, #0]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d007      	beq.n	800b3b0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b3a0:	4b1a      	ldr	r3, [pc, #104]	; (800b40c <prvAddCurrentTaskToDelayedList+0xb4>)
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	3304      	adds	r3, #4
 800b3a6:	4619      	mov	r1, r3
 800b3a8:	481a      	ldr	r0, [pc, #104]	; (800b414 <prvAddCurrentTaskToDelayedList+0xbc>)
 800b3aa:	f7fd ffb1 	bl	8009310 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b3ae:	e026      	b.n	800b3fe <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b3b0:	68fa      	ldr	r2, [r7, #12]
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	4413      	add	r3, r2
 800b3b6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b3b8:	4b14      	ldr	r3, [pc, #80]	; (800b40c <prvAddCurrentTaskToDelayedList+0xb4>)
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	68ba      	ldr	r2, [r7, #8]
 800b3be:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b3c0:	68ba      	ldr	r2, [r7, #8]
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	429a      	cmp	r2, r3
 800b3c6:	d209      	bcs.n	800b3dc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b3c8:	4b13      	ldr	r3, [pc, #76]	; (800b418 <prvAddCurrentTaskToDelayedList+0xc0>)
 800b3ca:	681a      	ldr	r2, [r3, #0]
 800b3cc:	4b0f      	ldr	r3, [pc, #60]	; (800b40c <prvAddCurrentTaskToDelayedList+0xb4>)
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	3304      	adds	r3, #4
 800b3d2:	4619      	mov	r1, r3
 800b3d4:	4610      	mov	r0, r2
 800b3d6:	f7fd ffbf 	bl	8009358 <vListInsert>
}
 800b3da:	e010      	b.n	800b3fe <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b3dc:	4b0f      	ldr	r3, [pc, #60]	; (800b41c <prvAddCurrentTaskToDelayedList+0xc4>)
 800b3de:	681a      	ldr	r2, [r3, #0]
 800b3e0:	4b0a      	ldr	r3, [pc, #40]	; (800b40c <prvAddCurrentTaskToDelayedList+0xb4>)
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	3304      	adds	r3, #4
 800b3e6:	4619      	mov	r1, r3
 800b3e8:	4610      	mov	r0, r2
 800b3ea:	f7fd ffb5 	bl	8009358 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b3ee:	4b0c      	ldr	r3, [pc, #48]	; (800b420 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	68ba      	ldr	r2, [r7, #8]
 800b3f4:	429a      	cmp	r2, r3
 800b3f6:	d202      	bcs.n	800b3fe <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800b3f8:	4a09      	ldr	r2, [pc, #36]	; (800b420 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b3fa:	68bb      	ldr	r3, [r7, #8]
 800b3fc:	6013      	str	r3, [r2, #0]
}
 800b3fe:	bf00      	nop
 800b400:	3710      	adds	r7, #16
 800b402:	46bd      	mov	sp, r7
 800b404:	bd80      	pop	{r7, pc}
 800b406:	bf00      	nop
 800b408:	20003de0 	.word	0x20003de0
 800b40c:	20003cdc 	.word	0x20003cdc
 800b410:	20003de4 	.word	0x20003de4
 800b414:	20003dc8 	.word	0x20003dc8
 800b418:	20003d98 	.word	0x20003d98
 800b41c:	20003d94 	.word	0x20003d94
 800b420:	20003dfc 	.word	0x20003dfc

0800b424 <main>:
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
 800b424:	b5b0      	push	{r4, r5, r7, lr}
 800b426:	b0b4      	sub	sp, #208	; 0xd0
 800b428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
LeftMotorPWMConfig.OCMode = LEFT_MOTOR_OCMODE;
 800b42a:	4b94      	ldr	r3, [pc, #592]	; (800b67c <main+0x258>)
 800b42c:	2260      	movs	r2, #96	; 0x60
 800b42e:	601a      	str	r2, [r3, #0]
LeftMotorPWMConfig.OCFastMode = LEFT_MOTOR_OCFAST;
 800b430:	4b92      	ldr	r3, [pc, #584]	; (800b67c <main+0x258>)
 800b432:	2200      	movs	r2, #0
 800b434:	611a      	str	r2, [r3, #16]
LeftMotorPWMConfig.OCPolarity = LEFT_MOTOR_OCPOLARITY;
 800b436:	4b91      	ldr	r3, [pc, #580]	; (800b67c <main+0x258>)
 800b438:	2200      	movs	r2, #0
 800b43a:	609a      	str	r2, [r3, #8]
LeftMotorPWMConfig.Pulse = LEFT_MOTOR_PULSE_START;
 800b43c:	4b8f      	ldr	r3, [pc, #572]	; (800b67c <main+0x258>)
 800b43e:	2264      	movs	r2, #100	; 0x64
 800b440:	605a      	str	r2, [r3, #4]

LeftMotorPIDHandle->Kd = 0;
 800b442:	4b8f      	ldr	r3, [pc, #572]	; (800b680 <main+0x25c>)
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	f04f 0200 	mov.w	r2, #0
 800b44a:	619a      	str	r2, [r3, #24]
LeftMotorPIDHandle->Ki = 0;
 800b44c:	4b8c      	ldr	r3, [pc, #560]	; (800b680 <main+0x25c>)
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	f04f 0200 	mov.w	r2, #0
 800b454:	615a      	str	r2, [r3, #20]
LeftMotorPIDHandle->Kp = 0;
 800b456:	4b8a      	ldr	r3, [pc, #552]	; (800b680 <main+0x25c>)
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	f04f 0200 	mov.w	r2, #0
 800b45e:	611a      	str	r2, [r3, #16]

RightMotorPWMConfig.OCMode = RIGHT_MOTOR_OCMODE;
 800b460:	4b88      	ldr	r3, [pc, #544]	; (800b684 <main+0x260>)
 800b462:	2260      	movs	r2, #96	; 0x60
 800b464:	601a      	str	r2, [r3, #0]
RightMotorPWMConfig.OCFastMode = RIGHT_MOTOR_OCFAST;
 800b466:	4b87      	ldr	r3, [pc, #540]	; (800b684 <main+0x260>)
 800b468:	2200      	movs	r2, #0
 800b46a:	611a      	str	r2, [r3, #16]
RightMotorPWMConfig.OCPolarity = RIGHT_MOTOR_OCPOLARITY;
 800b46c:	4b85      	ldr	r3, [pc, #532]	; (800b684 <main+0x260>)
 800b46e:	2200      	movs	r2, #0
 800b470:	609a      	str	r2, [r3, #8]
RightMotorPWMConfig.Pulse = RIGHT_MOTOR_PULSE_START;
 800b472:	4b84      	ldr	r3, [pc, #528]	; (800b684 <main+0x260>)
 800b474:	2264      	movs	r2, #100	; 0x64
 800b476:	605a      	str	r2, [r3, #4]

Detectionconfig.DetectionMode = VL53L1_DETECTION_NORMAL_RUN;
 800b478:	4b83      	ldr	r3, [pc, #524]	; (800b688 <main+0x264>)
 800b47a:	2200      	movs	r2, #0
 800b47c:	701a      	strb	r2, [r3, #0]
Detectionconfig.Distance.CrossMode = VL53L1_THRESHOLD_IN_WINDOW;
 800b47e:	4b82      	ldr	r3, [pc, #520]	; (800b688 <main+0x264>)
 800b480:	2203      	movs	r2, #3
 800b482:	709a      	strb	r2, [r3, #2]
Detectionconfig.IntrNoTarget = 0;
 800b484:	4b80      	ldr	r3, [pc, #512]	; (800b688 <main+0x264>)
 800b486:	2200      	movs	r2, #0
 800b488:	705a      	strb	r2, [r3, #1]
Detectionconfig.Distance.High = 1000;
 800b48a:	4b7f      	ldr	r3, [pc, #508]	; (800b688 <main+0x264>)
 800b48c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b490:	809a      	strh	r2, [r3, #4]
Detectionconfig.Distance.Low = 50;
 800b492:	4b7d      	ldr	r3, [pc, #500]	; (800b688 <main+0x264>)
 800b494:	2232      	movs	r2, #50	; 0x32
 800b496:	80da      	strh	r2, [r3, #6]
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800b498:	f7fa fe72 	bl	8006180 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800b49c:	f000 f930 	bl	800b700 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800b4a0:	f000 fb0c 	bl	800babc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800b4a4:	f000 fadc 	bl	800ba60 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800b4a8:	f000 f9a4 	bl	800b7f4 <MX_I2C1_Init>
  MX_TIM3_Init();
 800b4ac:	f000 fa74 	bl	800b998 <MX_TIM3_Init>
  MX_TIM2_Init();
 800b4b0:	f000 fa24 	bl	800b8fc <MX_TIM2_Init>
  MX_TIM1_Init();
 800b4b4:	f000 f9d2 	bl	800b85c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

	HAL_TIM_Base_Start(&htim3);
 800b4b8:	4874      	ldr	r0, [pc, #464]	; (800b68c <main+0x268>)
 800b4ba:	f7fc fd5a 	bl	8007f72 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800b4be:	2100      	movs	r1, #0
 800b4c0:	4872      	ldr	r0, [pc, #456]	; (800b68c <main+0x268>)
 800b4c2:	f7fc fdb7 	bl	8008034 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800b4c6:	2104      	movs	r1, #4
 800b4c8:	4870      	ldr	r0, [pc, #448]	; (800b68c <main+0x268>)
 800b4ca:	f7fc fdb3 	bl	8008034 <HAL_TIM_PWM_Start>
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1);
 800b4ce:	2100      	movs	r1, #0
 800b4d0:	486f      	ldr	r0, [pc, #444]	; (800b690 <main+0x26c>)
 800b4d2:	f7fc fe6d 	bl	80081b0 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_1);
 800b4d6:	2100      	movs	r1, #0
 800b4d8:	486e      	ldr	r0, [pc, #440]	; (800b694 <main+0x270>)
 800b4da:	f7fc fe69 	bl	80081b0 <HAL_TIM_Encoder_Start>

	//Begin setting up the distance sensors
	SetupVL53L1XDevices(LASER_FRONT_LEFT_DEV, LASFRONTLEFT_I2C_ADDRESS,LASER_FRONT_LEFT_SHDN_GPIO_Port, LASER_FRONT_LEFT_SHDN_Pin);
 800b4de:	4b6e      	ldr	r3, [pc, #440]	; (800b698 <main+0x274>)
 800b4e0:	6818      	ldr	r0, [r3, #0]
 800b4e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b4e6:	4a6d      	ldr	r2, [pc, #436]	; (800b69c <main+0x278>)
 800b4e8:	2169      	movs	r1, #105	; 0x69
 800b4ea:	f000 fbdd 	bl	800bca8 <SetupVL53L1XDevices>
	SetupVL53L1XDevices(LASER_FRONT_RIGHT_DEV,LASFRONTRIGHT_I2C_ADDRESS, LASER_FRONT_RIGHT_SHDN_GPIO_Port,LASER_FRONT_RIGHT_SHDN_Pin);
 800b4ee:	4b6c      	ldr	r3, [pc, #432]	; (800b6a0 <main+0x27c>)
 800b4f0:	6818      	ldr	r0, [r3, #0]
 800b4f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b4f6:	4a69      	ldr	r2, [pc, #420]	; (800b69c <main+0x278>)
 800b4f8:	2170      	movs	r1, #112	; 0x70
 800b4fa:	f000 fbd5 	bl	800bca8 <SetupVL53L1XDevices>
	SetupVL53L1XDevices(LASER_REAR_LEFT_DEV, LASREARLEFT_I2C_ADDRESS,LASER_REAR_LEFT_SHDN_GPIO_Port, LASER_REAR_LEFT_SHDN_Pin);
 800b4fe:	4b69      	ldr	r3, [pc, #420]	; (800b6a4 <main+0x280>)
 800b500:	6818      	ldr	r0, [r3, #0]
 800b502:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b506:	4a68      	ldr	r2, [pc, #416]	; (800b6a8 <main+0x284>)
 800b508:	2171      	movs	r1, #113	; 0x71
 800b50a:	f000 fbcd 	bl	800bca8 <SetupVL53L1XDevices>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of myMutex01 */
  osMutexDef(myMutex01);
 800b50e:	2300      	movs	r3, #0
 800b510:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  myMutex01Handle = osMutexCreate(osMutex(myMutex01));
 800b514:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800b518:	4618      	mov	r0, r3
 800b51a:	f7fd feb5 	bl	8009288 <osMutexCreate>
 800b51e:	4602      	mov	r2, r0
 800b520:	4b62      	ldr	r3, [pc, #392]	; (800b6ac <main+0x288>)
 800b522:	601a      	str	r2, [r3, #0]
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 800b524:	4b62      	ldr	r3, [pc, #392]	; (800b6b0 <main+0x28c>)
 800b526:	f107 04b8 	add.w	r4, r7, #184	; 0xb8
 800b52a:	461d      	mov	r5, r3
 800b52c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b52e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b530:	682b      	ldr	r3, [r5, #0]
 800b532:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800b534:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800b538:	2100      	movs	r1, #0
 800b53a:	4618      	mov	r0, r3
 800b53c:	f7fd fe69 	bl	8009212 <osThreadCreate>
 800b540:	4602      	mov	r2, r0
 800b542:	4b5c      	ldr	r3, [pc, #368]	; (800b6b4 <main+0x290>)
 800b544:	601a      	str	r2, [r3, #0]

  /* definition and creation of tskLASFRONTLEFT */
  osThreadDef(tskLASFRONTLEFT, tskLASFRONTLEFT_fnc, osPriorityNormal, 0, 256);
 800b546:	4b5c      	ldr	r3, [pc, #368]	; (800b6b8 <main+0x294>)
 800b548:	f107 04a4 	add.w	r4, r7, #164	; 0xa4
 800b54c:	461d      	mov	r5, r3
 800b54e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b550:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b552:	682b      	ldr	r3, [r5, #0]
 800b554:	6023      	str	r3, [r4, #0]
  tskLASFRONTLEFTHandle = osThreadCreate(osThread(tskLASFRONTLEFT), NULL);
 800b556:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800b55a:	2100      	movs	r1, #0
 800b55c:	4618      	mov	r0, r3
 800b55e:	f7fd fe58 	bl	8009212 <osThreadCreate>
 800b562:	4602      	mov	r2, r0
 800b564:	4b55      	ldr	r3, [pc, #340]	; (800b6bc <main+0x298>)
 800b566:	601a      	str	r2, [r3, #0]

  /* definition and creation of tskLASREARLEFT */
  osThreadDef(tskLASREARLEFT, tskLASREARLEFT_fnc, osPriorityNormal, 0, 256);
 800b568:	4b55      	ldr	r3, [pc, #340]	; (800b6c0 <main+0x29c>)
 800b56a:	f107 0490 	add.w	r4, r7, #144	; 0x90
 800b56e:	461d      	mov	r5, r3
 800b570:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b572:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b574:	682b      	ldr	r3, [r5, #0]
 800b576:	6023      	str	r3, [r4, #0]
  tskLASREARLEFTHandle = osThreadCreate(osThread(tskLASREARLEFT), NULL);
 800b578:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800b57c:	2100      	movs	r1, #0
 800b57e:	4618      	mov	r0, r3
 800b580:	f7fd fe47 	bl	8009212 <osThreadCreate>
 800b584:	4602      	mov	r2, r0
 800b586:	4b4f      	ldr	r3, [pc, #316]	; (800b6c4 <main+0x2a0>)
 800b588:	601a      	str	r2, [r3, #0]

  /* definition and creation of tskLASFRONTRIGH */
  osThreadDef(tskLASFRONTRIGH, tskLASFRONTRIGHT_fnc, osPriorityNormal, 0, 256);
 800b58a:	4b4f      	ldr	r3, [pc, #316]	; (800b6c8 <main+0x2a4>)
 800b58c:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 800b590:	461d      	mov	r5, r3
 800b592:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b594:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b596:	682b      	ldr	r3, [r5, #0]
 800b598:	6023      	str	r3, [r4, #0]
  tskLASFRONTRIGHHandle = osThreadCreate(osThread(tskLASFRONTRIGH), NULL);
 800b59a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800b59e:	2100      	movs	r1, #0
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	f7fd fe36 	bl	8009212 <osThreadCreate>
 800b5a6:	4602      	mov	r2, r0
 800b5a8:	4b48      	ldr	r3, [pc, #288]	; (800b6cc <main+0x2a8>)
 800b5aa:	601a      	str	r2, [r3, #0]

  /* definition and creation of tskEDGLFTFRONT */
  osThreadDef(tskEDGLFTFRONT, tskEDGLFTFRNT, osPriorityAboveNormal, 0, 128);
 800b5ac:	4b48      	ldr	r3, [pc, #288]	; (800b6d0 <main+0x2ac>)
 800b5ae:	f107 0468 	add.w	r4, r7, #104	; 0x68
 800b5b2:	461d      	mov	r5, r3
 800b5b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b5b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b5b8:	682b      	ldr	r3, [r5, #0]
 800b5ba:	6023      	str	r3, [r4, #0]
  tskEDGLFTFRONTHandle = osThreadCreate(osThread(tskEDGLFTFRONT), NULL);
 800b5bc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800b5c0:	2100      	movs	r1, #0
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	f7fd fe25 	bl	8009212 <osThreadCreate>
 800b5c8:	4602      	mov	r2, r0
 800b5ca:	4b42      	ldr	r3, [pc, #264]	; (800b6d4 <main+0x2b0>)
 800b5cc:	601a      	str	r2, [r3, #0]

  /* definition and creation of tskEDGLFTREAR */
  osThreadDef(tskEDGLFTREAR, tskEDGLFTRER, osPriorityAboveNormal, 0, 128);
 800b5ce:	4b42      	ldr	r3, [pc, #264]	; (800b6d8 <main+0x2b4>)
 800b5d0:	f107 0454 	add.w	r4, r7, #84	; 0x54
 800b5d4:	461d      	mov	r5, r3
 800b5d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b5d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b5da:	682b      	ldr	r3, [r5, #0]
 800b5dc:	6023      	str	r3, [r4, #0]
  tskEDGLFTREARHandle = osThreadCreate(osThread(tskEDGLFTREAR), NULL);
 800b5de:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800b5e2:	2100      	movs	r1, #0
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	f7fd fe14 	bl	8009212 <osThreadCreate>
 800b5ea:	4602      	mov	r2, r0
 800b5ec:	4b3b      	ldr	r3, [pc, #236]	; (800b6dc <main+0x2b8>)
 800b5ee:	601a      	str	r2, [r3, #0]

  /* definition and creation of tskEDGRGTFRONT */
  osThreadDef(tskEDGRGTFRONT, tskEDGRGTFRNT, osPriorityAboveNormal, 0, 128);
 800b5f0:	4b3b      	ldr	r3, [pc, #236]	; (800b6e0 <main+0x2bc>)
 800b5f2:	f107 0440 	add.w	r4, r7, #64	; 0x40
 800b5f6:	461d      	mov	r5, r3
 800b5f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b5fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b5fc:	682b      	ldr	r3, [r5, #0]
 800b5fe:	6023      	str	r3, [r4, #0]
  tskEDGRGTFRONTHandle = osThreadCreate(osThread(tskEDGRGTFRONT), NULL);
 800b600:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b604:	2100      	movs	r1, #0
 800b606:	4618      	mov	r0, r3
 800b608:	f7fd fe03 	bl	8009212 <osThreadCreate>
 800b60c:	4602      	mov	r2, r0
 800b60e:	4b35      	ldr	r3, [pc, #212]	; (800b6e4 <main+0x2c0>)
 800b610:	601a      	str	r2, [r3, #0]

  /* definition and creation of tskEDGRGTREAR */
  osThreadDef(tskEDGRGTREAR, tskEDGRGTRER, osPriorityAboveNormal, 0, 128);
 800b612:	4b35      	ldr	r3, [pc, #212]	; (800b6e8 <main+0x2c4>)
 800b614:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 800b618:	461d      	mov	r5, r3
 800b61a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b61c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b61e:	682b      	ldr	r3, [r5, #0]
 800b620:	6023      	str	r3, [r4, #0]
  tskEDGRGTREARHandle = osThreadCreate(osThread(tskEDGRGTREAR), NULL);
 800b622:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b626:	2100      	movs	r1, #0
 800b628:	4618      	mov	r0, r3
 800b62a:	f7fd fdf2 	bl	8009212 <osThreadCreate>
 800b62e:	4602      	mov	r2, r0
 800b630:	4b2e      	ldr	r3, [pc, #184]	; (800b6ec <main+0x2c8>)
 800b632:	601a      	str	r2, [r3, #0]

  /* definition and creation of rightPWM */
  osThreadDef(rightPWM, rightPWMFunc, osPriorityLow, 0, 128);
 800b634:	4b2e      	ldr	r3, [pc, #184]	; (800b6f0 <main+0x2cc>)
 800b636:	f107 0418 	add.w	r4, r7, #24
 800b63a:	461d      	mov	r5, r3
 800b63c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b63e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b640:	682b      	ldr	r3, [r5, #0]
 800b642:	6023      	str	r3, [r4, #0]
  rightPWMHandle = osThreadCreate(osThread(rightPWM), NULL);
 800b644:	f107 0318 	add.w	r3, r7, #24
 800b648:	2100      	movs	r1, #0
 800b64a:	4618      	mov	r0, r3
 800b64c:	f7fd fde1 	bl	8009212 <osThreadCreate>
 800b650:	4602      	mov	r2, r0
 800b652:	4b28      	ldr	r3, [pc, #160]	; (800b6f4 <main+0x2d0>)
 800b654:	601a      	str	r2, [r3, #0]

  /* definition and creation of leftPWM */
  osThreadDef(leftPWM, leftPWMFunc, osPriorityLow, 0, 128);
 800b656:	4b28      	ldr	r3, [pc, #160]	; (800b6f8 <main+0x2d4>)
 800b658:	1d3c      	adds	r4, r7, #4
 800b65a:	461d      	mov	r5, r3
 800b65c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b65e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b660:	682b      	ldr	r3, [r5, #0]
 800b662:	6023      	str	r3, [r4, #0]
  leftPWMHandle = osThreadCreate(osThread(leftPWM), NULL);
 800b664:	1d3b      	adds	r3, r7, #4
 800b666:	2100      	movs	r1, #0
 800b668:	4618      	mov	r0, r3
 800b66a:	f7fd fdd2 	bl	8009212 <osThreadCreate>
 800b66e:	4602      	mov	r2, r0
 800b670:	4b22      	ldr	r3, [pc, #136]	; (800b6fc <main+0x2d8>)
 800b672:	601a      	str	r2, [r3, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */
 

  /* Start scheduler */
  osKernelStart();
 800b674:	f7fd fdc6 	bl	8009204 <osKernelStart>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


	while (1) {
 800b678:	e7fe      	b.n	800b678 <main+0x254>
 800b67a:	bf00      	nop
 800b67c:	200051dc 	.word	0x200051dc
 800b680:	20000034 	.word	0x20000034
 800b684:	200049c0 	.word	0x200049c0
 800b688:	200069cc 	.word	0x200069cc
 800b68c:	2000597c 	.word	0x2000597c
 800b690:	2000659c 	.word	0x2000659c
 800b694:	200061a0 	.word	0x200061a0
 800b698:	20000028 	.word	0x20000028
 800b69c:	40020000 	.word	0x40020000
 800b6a0:	2000002c 	.word	0x2000002c
 800b6a4:	20000030 	.word	0x20000030
 800b6a8:	40020800 	.word	0x40020800
 800b6ac:	200069c8 	.word	0x200069c8
 800b6b0:	0800cf4c 	.word	0x0800cf4c
 800b6b4:	20004a1c 	.word	0x20004a1c
 800b6b8:	0800cf70 	.word	0x0800cf70
 800b6bc:	2000661c 	.word	0x2000661c
 800b6c0:	0800cf94 	.word	0x0800cf94
 800b6c4:	2000559c 	.word	0x2000559c
 800b6c8:	0800cfb8 	.word	0x0800cfb8
 800b6cc:	200055a0 	.word	0x200055a0
 800b6d0:	0800cfdc 	.word	0x0800cfdc
 800b6d4:	20004a18 	.word	0x20004a18
 800b6d8:	0800d000 	.word	0x0800d000
 800b6dc:	20004a14 	.word	0x20004a14
 800b6e0:	0800d024 	.word	0x0800d024
 800b6e4:	200055a4 	.word	0x200055a4
 800b6e8:	0800d048 	.word	0x0800d048
 800b6ec:	200065d8 	.word	0x200065d8
 800b6f0:	0800d068 	.word	0x0800d068
 800b6f4:	20006620 	.word	0x20006620
 800b6f8:	0800d084 	.word	0x0800d084
 800b6fc:	20004dc4 	.word	0x20004dc4

0800b700 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800b700:	b580      	push	{r7, lr}
 800b702:	b094      	sub	sp, #80	; 0x50
 800b704:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 800b706:	2300      	movs	r3, #0
 800b708:	60bb      	str	r3, [r7, #8]
 800b70a:	4a36      	ldr	r2, [pc, #216]	; (800b7e4 <SystemClock_Config+0xe4>)
 800b70c:	4b35      	ldr	r3, [pc, #212]	; (800b7e4 <SystemClock_Config+0xe4>)
 800b70e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b710:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b714:	6413      	str	r3, [r2, #64]	; 0x40
 800b716:	4b33      	ldr	r3, [pc, #204]	; (800b7e4 <SystemClock_Config+0xe4>)
 800b718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b71a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b71e:	60bb      	str	r3, [r7, #8]
 800b720:	68bb      	ldr	r3, [r7, #8]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800b722:	2300      	movs	r3, #0
 800b724:	607b      	str	r3, [r7, #4]
 800b726:	4a30      	ldr	r2, [pc, #192]	; (800b7e8 <SystemClock_Config+0xe8>)
 800b728:	4b2f      	ldr	r3, [pc, #188]	; (800b7e8 <SystemClock_Config+0xe8>)
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800b730:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b734:	6013      	str	r3, [r2, #0]
 800b736:	4b2c      	ldr	r3, [pc, #176]	; (800b7e8 <SystemClock_Config+0xe8>)
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800b73e:	607b      	str	r3, [r7, #4]
 800b740:	687b      	ldr	r3, [r7, #4]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800b742:	2302      	movs	r3, #2
 800b744:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800b746:	2301      	movs	r3, #1
 800b748:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = 16;
 800b74a:	2310      	movs	r3, #16
 800b74c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800b74e:	2302      	movs	r3, #2
 800b750:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800b752:	2300      	movs	r3, #0
 800b754:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800b756:	2310      	movs	r3, #16
 800b758:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800b75a:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800b75e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800b760:	2304      	movs	r3, #4
 800b762:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800b764:	2307      	movs	r3, #7
 800b766:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800b768:	f107 0320 	add.w	r3, r7, #32
 800b76c:	4618      	mov	r0, r3
 800b76e:	f7fb ff69 	bl	8007644 <HAL_RCC_OscConfig>
 800b772:	4603      	mov	r3, r0
 800b774:	2b00      	cmp	r3, #0
 800b776:	d004      	beq.n	800b782 <SystemClock_Config+0x82>
  {
    _Error_Handler(__FILE__, __LINE__);
 800b778:	f240 1179 	movw	r1, #377	; 0x179
 800b77c:	481b      	ldr	r0, [pc, #108]	; (800b7ec <SystemClock_Config+0xec>)
 800b77e:	f000 fc93 	bl	800c0a8 <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800b782:	230f      	movs	r3, #15
 800b784:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800b786:	2302      	movs	r3, #2
 800b788:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800b78a:	2300      	movs	r3, #0
 800b78c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800b78e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b792:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800b794:	2300      	movs	r3, #0
 800b796:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800b798:	f107 030c 	add.w	r3, r7, #12
 800b79c:	2102      	movs	r1, #2
 800b79e:	4618      	mov	r0, r3
 800b7a0:	f7fc f992 	bl	8007ac8 <HAL_RCC_ClockConfig>
 800b7a4:	4603      	mov	r3, r0
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d004      	beq.n	800b7b4 <SystemClock_Config+0xb4>
  {
    _Error_Handler(__FILE__, __LINE__);
 800b7aa:	f240 1187 	movw	r1, #391	; 0x187
 800b7ae:	480f      	ldr	r0, [pc, #60]	; (800b7ec <SystemClock_Config+0xec>)
 800b7b0:	f000 fc7a 	bl	800c0a8 <_Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800b7b4:	f7fc fb42 	bl	8007e3c <HAL_RCC_GetHCLKFreq>
 800b7b8:	4602      	mov	r2, r0
 800b7ba:	4b0d      	ldr	r3, [pc, #52]	; (800b7f0 <SystemClock_Config+0xf0>)
 800b7bc:	fba3 2302 	umull	r2, r3, r3, r2
 800b7c0:	099b      	lsrs	r3, r3, #6
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	f7fa fe3f 	bl	8006446 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800b7c8:	2004      	movs	r0, #4
 800b7ca:	f7fa fe49 	bl	8006460 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 800b7ce:	2200      	movs	r2, #0
 800b7d0:	210f      	movs	r1, #15
 800b7d2:	f04f 30ff 	mov.w	r0, #4294967295
 800b7d6:	f7fa fe0c 	bl	80063f2 <HAL_NVIC_SetPriority>
}
 800b7da:	bf00      	nop
 800b7dc:	3750      	adds	r7, #80	; 0x50
 800b7de:	46bd      	mov	sp, r7
 800b7e0:	bd80      	pop	{r7, pc}
 800b7e2:	bf00      	nop
 800b7e4:	40023800 	.word	0x40023800
 800b7e8:	40007000 	.word	0x40007000
 800b7ec:	0800d098 	.word	0x0800d098
 800b7f0:	10624dd3 	.word	0x10624dd3

0800b7f4 <MX_I2C1_Init>:

/* I2C1 init function */
static void MX_I2C1_Init(void)
{
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 800b7f8:	4b14      	ldr	r3, [pc, #80]	; (800b84c <MX_I2C1_Init+0x58>)
 800b7fa:	4a15      	ldr	r2, [pc, #84]	; (800b850 <MX_I2C1_Init+0x5c>)
 800b7fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800b7fe:	4b13      	ldr	r3, [pc, #76]	; (800b84c <MX_I2C1_Init+0x58>)
 800b800:	4a14      	ldr	r2, [pc, #80]	; (800b854 <MX_I2C1_Init+0x60>)
 800b802:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800b804:	4b11      	ldr	r3, [pc, #68]	; (800b84c <MX_I2C1_Init+0x58>)
 800b806:	2200      	movs	r2, #0
 800b808:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800b80a:	4b10      	ldr	r3, [pc, #64]	; (800b84c <MX_I2C1_Init+0x58>)
 800b80c:	2200      	movs	r2, #0
 800b80e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800b810:	4b0e      	ldr	r3, [pc, #56]	; (800b84c <MX_I2C1_Init+0x58>)
 800b812:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800b816:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800b818:	4b0c      	ldr	r3, [pc, #48]	; (800b84c <MX_I2C1_Init+0x58>)
 800b81a:	2200      	movs	r2, #0
 800b81c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800b81e:	4b0b      	ldr	r3, [pc, #44]	; (800b84c <MX_I2C1_Init+0x58>)
 800b820:	2200      	movs	r2, #0
 800b822:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800b824:	4b09      	ldr	r3, [pc, #36]	; (800b84c <MX_I2C1_Init+0x58>)
 800b826:	2200      	movs	r2, #0
 800b828:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800b82a:	4b08      	ldr	r3, [pc, #32]	; (800b84c <MX_I2C1_Init+0x58>)
 800b82c:	2200      	movs	r2, #0
 800b82e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800b830:	4806      	ldr	r0, [pc, #24]	; (800b84c <MX_I2C1_Init+0x58>)
 800b832:	f7fa fff1 	bl	8006818 <HAL_I2C_Init>
 800b836:	4603      	mov	r3, r0
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d004      	beq.n	800b846 <MX_I2C1_Init+0x52>
  {
    _Error_Handler(__FILE__, __LINE__);
 800b83c:	f240 11a5 	movw	r1, #421	; 0x1a5
 800b840:	4805      	ldr	r0, [pc, #20]	; (800b858 <MX_I2C1_Init+0x64>)
 800b842:	f000 fc31 	bl	800c0a8 <_Error_Handler>
  }

}
 800b846:	bf00      	nop
 800b848:	bd80      	pop	{r7, pc}
 800b84a:	bf00      	nop
 800b84c:	20005188 	.word	0x20005188
 800b850:	40005400 	.word	0x40005400
 800b854:	000186a0 	.word	0x000186a0
 800b858:	0800d098 	.word	0x0800d098

0800b85c <MX_TIM1_Init>:

/* TIM1 init function */
static void MX_TIM1_Init(void)
{
 800b85c:	b580      	push	{r7, lr}
 800b85e:	b08c      	sub	sp, #48	; 0x30
 800b860:	af00      	add	r7, sp, #0

  TIM_Encoder_InitTypeDef sConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim1.Instance = TIM1;
 800b862:	4b23      	ldr	r3, [pc, #140]	; (800b8f0 <MX_TIM1_Init+0x94>)
 800b864:	4a23      	ldr	r2, [pc, #140]	; (800b8f4 <MX_TIM1_Init+0x98>)
 800b866:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800b868:	4b21      	ldr	r3, [pc, #132]	; (800b8f0 <MX_TIM1_Init+0x94>)
 800b86a:	2200      	movs	r2, #0
 800b86c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b86e:	4b20      	ldr	r3, [pc, #128]	; (800b8f0 <MX_TIM1_Init+0x94>)
 800b870:	2200      	movs	r2, #0
 800b872:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 800b874:	4b1e      	ldr	r3, [pc, #120]	; (800b8f0 <MX_TIM1_Init+0x94>)
 800b876:	2200      	movs	r2, #0
 800b878:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b87a:	4b1d      	ldr	r3, [pc, #116]	; (800b8f0 <MX_TIM1_Init+0x94>)
 800b87c:	2200      	movs	r2, #0
 800b87e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800b880:	4b1b      	ldr	r3, [pc, #108]	; (800b8f0 <MX_TIM1_Init+0x94>)
 800b882:	2200      	movs	r2, #0
 800b884:	615a      	str	r2, [r3, #20]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800b886:	2301      	movs	r3, #1
 800b888:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800b88a:	2300      	movs	r3, #0
 800b88c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800b88e:	2301      	movs	r3, #1
 800b890:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800b892:	2300      	movs	r3, #0
 800b894:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800b896:	2300      	movs	r3, #0
 800b898:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800b89a:	2300      	movs	r3, #0
 800b89c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800b89e:	2301      	movs	r3, #1
 800b8a0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800b8a2:	2300      	movs	r3, #0
 800b8a4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800b8a6:	2300      	movs	r3, #0
 800b8a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800b8aa:	f107 030c 	add.w	r3, r7, #12
 800b8ae:	4619      	mov	r1, r3
 800b8b0:	480f      	ldr	r0, [pc, #60]	; (800b8f0 <MX_TIM1_Init+0x94>)
 800b8b2:	f7fc fbe7 	bl	8008084 <HAL_TIM_Encoder_Init>
 800b8b6:	4603      	mov	r3, r0
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d004      	beq.n	800b8c6 <MX_TIM1_Init+0x6a>
  {
    _Error_Handler(__FILE__, __LINE__);
 800b8bc:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 800b8c0:	480d      	ldr	r0, [pc, #52]	; (800b8f8 <MX_TIM1_Init+0x9c>)
 800b8c2:	f000 fbf1 	bl	800c0a8 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b8ca:	2300      	movs	r3, #0
 800b8cc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800b8ce:	1d3b      	adds	r3, r7, #4
 800b8d0:	4619      	mov	r1, r3
 800b8d2:	4807      	ldr	r0, [pc, #28]	; (800b8f0 <MX_TIM1_Init+0x94>)
 800b8d4:	f7fd f8da 	bl	8008a8c <HAL_TIMEx_MasterConfigSynchronization>
 800b8d8:	4603      	mov	r3, r0
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d004      	beq.n	800b8e8 <MX_TIM1_Init+0x8c>
  {
    _Error_Handler(__FILE__, __LINE__);
 800b8de:	f240 11c9 	movw	r1, #457	; 0x1c9
 800b8e2:	4805      	ldr	r0, [pc, #20]	; (800b8f8 <MX_TIM1_Init+0x9c>)
 800b8e4:	f000 fbe0 	bl	800c0a8 <_Error_Handler>
  }

}
 800b8e8:	bf00      	nop
 800b8ea:	3730      	adds	r7, #48	; 0x30
 800b8ec:	46bd      	mov	sp, r7
 800b8ee:	bd80      	pop	{r7, pc}
 800b8f0:	200061a0 	.word	0x200061a0
 800b8f4:	40010000 	.word	0x40010000
 800b8f8:	0800d098 	.word	0x0800d098

0800b8fc <MX_TIM2_Init>:

/* TIM2 init function */
static void MX_TIM2_Init(void)
{
 800b8fc:	b580      	push	{r7, lr}
 800b8fe:	b08c      	sub	sp, #48	; 0x30
 800b900:	af00      	add	r7, sp, #0

  TIM_Encoder_InitTypeDef sConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim2.Instance = TIM2;
 800b902:	4b23      	ldr	r3, [pc, #140]	; (800b990 <MX_TIM2_Init+0x94>)
 800b904:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800b908:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800b90a:	4b21      	ldr	r3, [pc, #132]	; (800b990 <MX_TIM2_Init+0x94>)
 800b90c:	2200      	movs	r2, #0
 800b90e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b910:	4b1f      	ldr	r3, [pc, #124]	; (800b990 <MX_TIM2_Init+0x94>)
 800b912:	2200      	movs	r2, #0
 800b914:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967294;
 800b916:	4b1e      	ldr	r3, [pc, #120]	; (800b990 <MX_TIM2_Init+0x94>)
 800b918:	f06f 0201 	mvn.w	r2, #1
 800b91c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b91e:	4b1c      	ldr	r3, [pc, #112]	; (800b990 <MX_TIM2_Init+0x94>)
 800b920:	2200      	movs	r2, #0
 800b922:	611a      	str	r2, [r3, #16]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800b924:	2301      	movs	r3, #1
 800b926:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800b928:	2300      	movs	r3, #0
 800b92a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800b92c:	2301      	movs	r3, #1
 800b92e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800b930:	2300      	movs	r3, #0
 800b932:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800b934:	2300      	movs	r3, #0
 800b936:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800b938:	2300      	movs	r3, #0
 800b93a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800b93c:	2301      	movs	r3, #1
 800b93e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800b940:	2300      	movs	r3, #0
 800b942:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800b944:	2300      	movs	r3, #0
 800b946:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800b948:	f107 030c 	add.w	r3, r7, #12
 800b94c:	4619      	mov	r1, r3
 800b94e:	4810      	ldr	r0, [pc, #64]	; (800b990 <MX_TIM2_Init+0x94>)
 800b950:	f7fc fb98 	bl	8008084 <HAL_TIM_Encoder_Init>
 800b954:	4603      	mov	r3, r0
 800b956:	2b00      	cmp	r3, #0
 800b958:	d004      	beq.n	800b964 <MX_TIM2_Init+0x68>
  {
    _Error_Handler(__FILE__, __LINE__);
 800b95a:	f240 11e5 	movw	r1, #485	; 0x1e5
 800b95e:	480d      	ldr	r0, [pc, #52]	; (800b994 <MX_TIM2_Init+0x98>)
 800b960:	f000 fba2 	bl	800c0a8 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b964:	2300      	movs	r3, #0
 800b966:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b968:	2300      	movs	r3, #0
 800b96a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800b96c:	1d3b      	adds	r3, r7, #4
 800b96e:	4619      	mov	r1, r3
 800b970:	4807      	ldr	r0, [pc, #28]	; (800b990 <MX_TIM2_Init+0x94>)
 800b972:	f7fd f88b 	bl	8008a8c <HAL_TIMEx_MasterConfigSynchronization>
 800b976:	4603      	mov	r3, r0
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d004      	beq.n	800b986 <MX_TIM2_Init+0x8a>
  {
    _Error_Handler(__FILE__, __LINE__);
 800b97c:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
 800b980:	4804      	ldr	r0, [pc, #16]	; (800b994 <MX_TIM2_Init+0x98>)
 800b982:	f000 fb91 	bl	800c0a8 <_Error_Handler>
  }

}
 800b986:	bf00      	nop
 800b988:	3730      	adds	r7, #48	; 0x30
 800b98a:	46bd      	mov	sp, r7
 800b98c:	bd80      	pop	{r7, pc}
 800b98e:	bf00      	nop
 800b990:	2000659c 	.word	0x2000659c
 800b994:	0800d098 	.word	0x0800d098

0800b998 <MX_TIM3_Init>:

/* TIM3 init function */
static void MX_TIM3_Init(void)
{
 800b998:	b580      	push	{r7, lr}
 800b99a:	b08a      	sub	sp, #40	; 0x28
 800b99c:	af00      	add	r7, sp, #0

  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim3.Instance = TIM3;
 800b99e:	4b2d      	ldr	r3, [pc, #180]	; (800ba54 <MX_TIM3_Init+0xbc>)
 800b9a0:	4a2d      	ldr	r2, [pc, #180]	; (800ba58 <MX_TIM3_Init+0xc0>)
 800b9a2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800b9a4:	4b2b      	ldr	r3, [pc, #172]	; (800ba54 <MX_TIM3_Init+0xbc>)
 800b9a6:	2200      	movs	r2, #0
 800b9a8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b9aa:	4b2a      	ldr	r3, [pc, #168]	; (800ba54 <MX_TIM3_Init+0xbc>)
 800b9ac:	2200      	movs	r2, #0
 800b9ae:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 16000;
 800b9b0:	4b28      	ldr	r3, [pc, #160]	; (800ba54 <MX_TIM3_Init+0xbc>)
 800b9b2:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800b9b6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b9b8:	4b26      	ldr	r3, [pc, #152]	; (800ba54 <MX_TIM3_Init+0xbc>)
 800b9ba:	2200      	movs	r2, #0
 800b9bc:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800b9be:	4825      	ldr	r0, [pc, #148]	; (800ba54 <MX_TIM3_Init+0xbc>)
 800b9c0:	f7fc fb0d 	bl	8007fde <HAL_TIM_PWM_Init>
 800b9c4:	4603      	mov	r3, r0
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d004      	beq.n	800b9d4 <MX_TIM3_Init+0x3c>
  {
    _Error_Handler(__FILE__, __LINE__);
 800b9ca:	f240 11ff 	movw	r1, #511	; 0x1ff
 800b9ce:	4823      	ldr	r0, [pc, #140]	; (800ba5c <MX_TIM3_Init+0xc4>)
 800b9d0:	f000 fb6a 	bl	800c0a8 <_Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b9d4:	2300      	movs	r3, #0
 800b9d6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b9d8:	2300      	movs	r3, #0
 800b9da:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800b9dc:	f107 0320 	add.w	r3, r7, #32
 800b9e0:	4619      	mov	r1, r3
 800b9e2:	481c      	ldr	r0, [pc, #112]	; (800ba54 <MX_TIM3_Init+0xbc>)
 800b9e4:	f7fd f852 	bl	8008a8c <HAL_TIMEx_MasterConfigSynchronization>
 800b9e8:	4603      	mov	r3, r0
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d004      	beq.n	800b9f8 <MX_TIM3_Init+0x60>
  {
    _Error_Handler(__FILE__, __LINE__);
 800b9ee:	f240 2106 	movw	r1, #518	; 0x206
 800b9f2:	481a      	ldr	r0, [pc, #104]	; (800ba5c <MX_TIM3_Init+0xc4>)
 800b9f4:	f000 fb58 	bl	800c0a8 <_Error_Handler>
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800b9f8:	2360      	movs	r3, #96	; 0x60
 800b9fa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 100;
 800b9fc:	2364      	movs	r3, #100	; 0x64
 800b9fe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800ba00:	2300      	movs	r3, #0
 800ba02:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800ba04:	2300      	movs	r3, #0
 800ba06:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800ba08:	1d3b      	adds	r3, r7, #4
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	4619      	mov	r1, r3
 800ba0e:	4811      	ldr	r0, [pc, #68]	; (800ba54 <MX_TIM3_Init+0xbc>)
 800ba10:	f7fc fd0e 	bl	8008430 <HAL_TIM_PWM_ConfigChannel>
 800ba14:	4603      	mov	r3, r0
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d004      	beq.n	800ba24 <MX_TIM3_Init+0x8c>
  {
    _Error_Handler(__FILE__, __LINE__);
 800ba1a:	f240 210f 	movw	r1, #527	; 0x20f
 800ba1e:	480f      	ldr	r0, [pc, #60]	; (800ba5c <MX_TIM3_Init+0xc4>)
 800ba20:	f000 fb42 	bl	800c0a8 <_Error_Handler>
  }

  sConfigOC.Pulse = 0;
 800ba24:	2300      	movs	r3, #0
 800ba26:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800ba28:	1d3b      	adds	r3, r7, #4
 800ba2a:	2204      	movs	r2, #4
 800ba2c:	4619      	mov	r1, r3
 800ba2e:	4809      	ldr	r0, [pc, #36]	; (800ba54 <MX_TIM3_Init+0xbc>)
 800ba30:	f7fc fcfe 	bl	8008430 <HAL_TIM_PWM_ConfigChannel>
 800ba34:	4603      	mov	r3, r0
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d004      	beq.n	800ba44 <MX_TIM3_Init+0xac>
  {
    _Error_Handler(__FILE__, __LINE__);
 800ba3a:	f240 2115 	movw	r1, #533	; 0x215
 800ba3e:	4807      	ldr	r0, [pc, #28]	; (800ba5c <MX_TIM3_Init+0xc4>)
 800ba40:	f000 fb32 	bl	800c0a8 <_Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim3);
 800ba44:	4803      	ldr	r0, [pc, #12]	; (800ba54 <MX_TIM3_Init+0xbc>)
 800ba46:	f000 fc31 	bl	800c2ac <HAL_TIM_MspPostInit>

}
 800ba4a:	bf00      	nop
 800ba4c:	3728      	adds	r7, #40	; 0x28
 800ba4e:	46bd      	mov	sp, r7
 800ba50:	bd80      	pop	{r7, pc}
 800ba52:	bf00      	nop
 800ba54:	2000597c 	.word	0x2000597c
 800ba58:	40000400 	.word	0x40000400
 800ba5c:	0800d098 	.word	0x0800d098

0800ba60 <MX_USART2_UART_Init>:

/* USART2 init function */
static void MX_USART2_UART_Init(void)
{
 800ba60:	b580      	push	{r7, lr}
 800ba62:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 800ba64:	4b12      	ldr	r3, [pc, #72]	; (800bab0 <MX_USART2_UART_Init+0x50>)
 800ba66:	4a13      	ldr	r2, [pc, #76]	; (800bab4 <MX_USART2_UART_Init+0x54>)
 800ba68:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800ba6a:	4b11      	ldr	r3, [pc, #68]	; (800bab0 <MX_USART2_UART_Init+0x50>)
 800ba6c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800ba70:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800ba72:	4b0f      	ldr	r3, [pc, #60]	; (800bab0 <MX_USART2_UART_Init+0x50>)
 800ba74:	2200      	movs	r2, #0
 800ba76:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800ba78:	4b0d      	ldr	r3, [pc, #52]	; (800bab0 <MX_USART2_UART_Init+0x50>)
 800ba7a:	2200      	movs	r2, #0
 800ba7c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800ba7e:	4b0c      	ldr	r3, [pc, #48]	; (800bab0 <MX_USART2_UART_Init+0x50>)
 800ba80:	2200      	movs	r2, #0
 800ba82:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800ba84:	4b0a      	ldr	r3, [pc, #40]	; (800bab0 <MX_USART2_UART_Init+0x50>)
 800ba86:	220c      	movs	r2, #12
 800ba88:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800ba8a:	4b09      	ldr	r3, [pc, #36]	; (800bab0 <MX_USART2_UART_Init+0x50>)
 800ba8c:	2200      	movs	r2, #0
 800ba8e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800ba90:	4b07      	ldr	r3, [pc, #28]	; (800bab0 <MX_USART2_UART_Init+0x50>)
 800ba92:	2200      	movs	r2, #0
 800ba94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800ba96:	4806      	ldr	r0, [pc, #24]	; (800bab0 <MX_USART2_UART_Init+0x50>)
 800ba98:	f7fd f851 	bl	8008b3e <HAL_UART_Init>
 800ba9c:	4603      	mov	r3, r0
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d004      	beq.n	800baac <MX_USART2_UART_Init+0x4c>
  {
    _Error_Handler(__FILE__, __LINE__);
 800baa2:	f240 212a 	movw	r1, #554	; 0x22a
 800baa6:	4804      	ldr	r0, [pc, #16]	; (800bab8 <MX_USART2_UART_Init+0x58>)
 800baa8:	f000 fafe 	bl	800c0a8 <_Error_Handler>
  }

}
 800baac:	bf00      	nop
 800baae:	bd80      	pop	{r7, pc}
 800bab0:	200065dc 	.word	0x200065dc
 800bab4:	40004400 	.word	0x40004400
 800bab8:	0800d098 	.word	0x0800d098

0800babc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
static void MX_GPIO_Init(void)
{
 800babc:	b580      	push	{r7, lr}
 800babe:	b08a      	sub	sp, #40	; 0x28
 800bac0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800bac2:	2300      	movs	r3, #0
 800bac4:	613b      	str	r3, [r7, #16]
 800bac6:	4a72      	ldr	r2, [pc, #456]	; (800bc90 <MX_GPIO_Init+0x1d4>)
 800bac8:	4b71      	ldr	r3, [pc, #452]	; (800bc90 <MX_GPIO_Init+0x1d4>)
 800baca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bacc:	f043 0304 	orr.w	r3, r3, #4
 800bad0:	6313      	str	r3, [r2, #48]	; 0x30
 800bad2:	4b6f      	ldr	r3, [pc, #444]	; (800bc90 <MX_GPIO_Init+0x1d4>)
 800bad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bad6:	f003 0304 	and.w	r3, r3, #4
 800bada:	613b      	str	r3, [r7, #16]
 800badc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800bade:	2300      	movs	r3, #0
 800bae0:	60fb      	str	r3, [r7, #12]
 800bae2:	4a6b      	ldr	r2, [pc, #428]	; (800bc90 <MX_GPIO_Init+0x1d4>)
 800bae4:	4b6a      	ldr	r3, [pc, #424]	; (800bc90 <MX_GPIO_Init+0x1d4>)
 800bae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bae8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800baec:	6313      	str	r3, [r2, #48]	; 0x30
 800baee:	4b68      	ldr	r3, [pc, #416]	; (800bc90 <MX_GPIO_Init+0x1d4>)
 800baf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800baf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800baf6:	60fb      	str	r3, [r7, #12]
 800baf8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800bafa:	2300      	movs	r3, #0
 800bafc:	60bb      	str	r3, [r7, #8]
 800bafe:	4a64      	ldr	r2, [pc, #400]	; (800bc90 <MX_GPIO_Init+0x1d4>)
 800bb00:	4b63      	ldr	r3, [pc, #396]	; (800bc90 <MX_GPIO_Init+0x1d4>)
 800bb02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb04:	f043 0301 	orr.w	r3, r3, #1
 800bb08:	6313      	str	r3, [r2, #48]	; 0x30
 800bb0a:	4b61      	ldr	r3, [pc, #388]	; (800bc90 <MX_GPIO_Init+0x1d4>)
 800bb0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb0e:	f003 0301 	and.w	r3, r3, #1
 800bb12:	60bb      	str	r3, [r7, #8]
 800bb14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800bb16:	2300      	movs	r3, #0
 800bb18:	607b      	str	r3, [r7, #4]
 800bb1a:	4a5d      	ldr	r2, [pc, #372]	; (800bc90 <MX_GPIO_Init+0x1d4>)
 800bb1c:	4b5c      	ldr	r3, [pc, #368]	; (800bc90 <MX_GPIO_Init+0x1d4>)
 800bb1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb20:	f043 0302 	orr.w	r3, r3, #2
 800bb24:	6313      	str	r3, [r2, #48]	; 0x30
 800bb26:	4b5a      	ldr	r3, [pc, #360]	; (800bc90 <MX_GPIO_Init+0x1d4>)
 800bb28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb2a:	f003 0302 	and.w	r3, r3, #2
 800bb2e:	607b      	str	r3, [r7, #4]
 800bb30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LASER_RIGHT_REAR_SHDN_Pin|LASER_RIGHT_FRONT_SHDN_Pin|LASER_LEFT_REAR_SHDN_Pin|LASER_LEFT_FRONT_SHDN_Pin, GPIO_PIN_RESET);
 800bb32:	2200      	movs	r2, #0
 800bb34:	f245 0105 	movw	r1, #20485	; 0x5005
 800bb38:	4856      	ldr	r0, [pc, #344]	; (800bc94 <MX_GPIO_Init+0x1d8>)
 800bb3a:	f7fa fe2f 	bl	800679c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LASER_REAR_RIGHT_SHDN_Pin|LASER_REAR_LEFT_SHDN_Pin, GPIO_PIN_RESET);
 800bb3e:	2200      	movs	r2, #0
 800bb40:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800bb44:	4854      	ldr	r0, [pc, #336]	; (800bc98 <MX_GPIO_Init+0x1dc>)
 800bb46:	f7fa fe29 	bl	800679c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LASER_FRONT_RIGHT_SHDN_Pin|LASER_FRONT_LEFT_SHDN_Pin, GPIO_PIN_RESET);
 800bb4a:	2200      	movs	r2, #0
 800bb4c:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
 800bb50:	4852      	ldr	r0, [pc, #328]	; (800bc9c <MX_GPIO_Init+0x1e0>)
 800bb52:	f7fa fe23 	bl	800679c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : EDGE_RIGHT_REAR_INTERRUPT_Pin EDGE_RIGHT_FRONT_INTERRUPT_Pin EDGE_LEFT_REAR_INTERRUPT_Pin */
  GPIO_InitStruct.Pin = EDGE_RIGHT_REAR_INTERRUPT_Pin|EDGE_RIGHT_FRONT_INTERRUPT_Pin|EDGE_LEFT_REAR_INTERRUPT_Pin;
 800bb56:	230d      	movs	r3, #13
 800bb58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800bb5a:	4b51      	ldr	r3, [pc, #324]	; (800bca0 <MX_GPIO_Init+0x1e4>)
 800bb5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bb5e:	2300      	movs	r3, #0
 800bb60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800bb62:	f107 0314 	add.w	r3, r7, #20
 800bb66:	4619      	mov	r1, r3
 800bb68:	484b      	ldr	r0, [pc, #300]	; (800bc98 <MX_GPIO_Init+0x1dc>)
 800bb6a:	f7fa fc95 	bl	8006498 <HAL_GPIO_Init>

  /*Configure GPIO pin : EDGE_LEFT_FRONT_INTERRUPT_Pin */
  GPIO_InitStruct.Pin = EDGE_LEFT_FRONT_INTERRUPT_Pin;
 800bb6e:	2310      	movs	r3, #16
 800bb70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800bb72:	4b4b      	ldr	r3, [pc, #300]	; (800bca0 <MX_GPIO_Init+0x1e4>)
 800bb74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bb76:	2300      	movs	r3, #0
 800bb78:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EDGE_LEFT_FRONT_INTERRUPT_GPIO_Port, &GPIO_InitStruct);
 800bb7a:	f107 0314 	add.w	r3, r7, #20
 800bb7e:	4619      	mov	r1, r3
 800bb80:	4846      	ldr	r0, [pc, #280]	; (800bc9c <MX_GPIO_Init+0x1e0>)
 800bb82:	f7fa fc89 	bl	8006498 <HAL_GPIO_Init>

  /*Configure GPIO pins : LASER_RIGHT_REAR_INTERRUPT_Pin LASER_REAR_LEFT_INTERRUPT_Pin */
  GPIO_InitStruct.Pin = LASER_RIGHT_REAR_INTERRUPT_Pin|LASER_REAR_LEFT_INTERRUPT_Pin;
 800bb86:	23a0      	movs	r3, #160	; 0xa0
 800bb88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800bb8a:	4b46      	ldr	r3, [pc, #280]	; (800bca4 <MX_GPIO_Init+0x1e8>)
 800bb8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800bb8e:	2301      	movs	r3, #1
 800bb90:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800bb92:	f107 0314 	add.w	r3, r7, #20
 800bb96:	4619      	mov	r1, r3
 800bb98:	483f      	ldr	r0, [pc, #252]	; (800bc98 <MX_GPIO_Init+0x1dc>)
 800bb9a:	f7fa fc7d 	bl	8006498 <HAL_GPIO_Init>

  /*Configure GPIO pins : LASER_RIGHT_REAR_SHDN_Pin LASER_RIGHT_FRONT_SHDN_Pin LASER_LEFT_REAR_SHDN_Pin LASER_LEFT_FRONT_SHDN_Pin */
  GPIO_InitStruct.Pin = LASER_RIGHT_REAR_SHDN_Pin|LASER_RIGHT_FRONT_SHDN_Pin|LASER_LEFT_REAR_SHDN_Pin|LASER_LEFT_FRONT_SHDN_Pin;
 800bb9e:	f245 0305 	movw	r3, #20485	; 0x5005
 800bba2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800bba4:	2301      	movs	r3, #1
 800bba6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800bba8:	2301      	movs	r3, #1
 800bbaa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bbac:	2300      	movs	r3, #0
 800bbae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bbb0:	f107 0314 	add.w	r3, r7, #20
 800bbb4:	4619      	mov	r1, r3
 800bbb6:	4837      	ldr	r0, [pc, #220]	; (800bc94 <MX_GPIO_Init+0x1d8>)
 800bbb8:	f7fa fc6e 	bl	8006498 <HAL_GPIO_Init>

  /*Configure GPIO pins : LASER_RIGHT_FRONT_INTERRUPT_Pin LASER_LEFT_REAR_INTERRUPT_Pin LASER_LEFT_FRONT_INTERRUPT_Pin LASER_REAR_RIGHT_INTERRUPT_Pin */
  GPIO_InitStruct.Pin = LASER_RIGHT_FRONT_INTERRUPT_Pin|LASER_LEFT_REAR_INTERRUPT_Pin|LASER_LEFT_FRONT_INTERRUPT_Pin|LASER_REAR_RIGHT_INTERRUPT_Pin;
 800bbbc:	f24a 4302 	movw	r3, #41986	; 0xa402
 800bbc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800bbc2:	4b38      	ldr	r3, [pc, #224]	; (800bca4 <MX_GPIO_Init+0x1e8>)
 800bbc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800bbc6:	2301      	movs	r3, #1
 800bbc8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bbca:	f107 0314 	add.w	r3, r7, #20
 800bbce:	4619      	mov	r1, r3
 800bbd0:	4830      	ldr	r0, [pc, #192]	; (800bc94 <MX_GPIO_Init+0x1d8>)
 800bbd2:	f7fa fc61 	bl	8006498 <HAL_GPIO_Init>

  /*Configure GPIO pins : LASER_REAR_RIGHT_SHDN_Pin LASER_REAR_LEFT_SHDN_Pin */
  GPIO_InitStruct.Pin = LASER_REAR_RIGHT_SHDN_Pin|LASER_REAR_LEFT_SHDN_Pin;
 800bbd6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800bbda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800bbdc:	2301      	movs	r3, #1
 800bbde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800bbe0:	2301      	movs	r3, #1
 800bbe2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bbe4:	2300      	movs	r3, #0
 800bbe6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800bbe8:	f107 0314 	add.w	r3, r7, #20
 800bbec:	4619      	mov	r1, r3
 800bbee:	482a      	ldr	r0, [pc, #168]	; (800bc98 <MX_GPIO_Init+0x1dc>)
 800bbf0:	f7fa fc52 	bl	8006498 <HAL_GPIO_Init>

  /*Configure GPIO pin : LASER_FRONT_RIGHT_INTERRUPT_Pin */
  GPIO_InitStruct.Pin = LASER_FRONT_RIGHT_INTERRUPT_Pin;
 800bbf4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bbf8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800bbfa:	4b29      	ldr	r3, [pc, #164]	; (800bca0 <MX_GPIO_Init+0x1e4>)
 800bbfc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800bbfe:	2301      	movs	r3, #1
 800bc00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LASER_FRONT_RIGHT_INTERRUPT_GPIO_Port, &GPIO_InitStruct);
 800bc02:	f107 0314 	add.w	r3, r7, #20
 800bc06:	4619      	mov	r1, r3
 800bc08:	4823      	ldr	r0, [pc, #140]	; (800bc98 <MX_GPIO_Init+0x1dc>)
 800bc0a:	f7fa fc45 	bl	8006498 <HAL_GPIO_Init>

  /*Configure GPIO pins : LASER_FRONT_RIGHT_SHDN_Pin LASER_FRONT_LEFT_SHDN_Pin */
  GPIO_InitStruct.Pin = LASER_FRONT_RIGHT_SHDN_Pin|LASER_FRONT_LEFT_SHDN_Pin;
 800bc0e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800bc12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800bc14:	2301      	movs	r3, #1
 800bc16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800bc18:	2301      	movs	r3, #1
 800bc1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bc1c:	2300      	movs	r3, #0
 800bc1e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bc20:	f107 0314 	add.w	r3, r7, #20
 800bc24:	4619      	mov	r1, r3
 800bc26:	481d      	ldr	r0, [pc, #116]	; (800bc9c <MX_GPIO_Init+0x1e0>)
 800bc28:	f7fa fc36 	bl	8006498 <HAL_GPIO_Init>

  /*Configure GPIO pin : LASER_FRONT_LEFT_INTERRUPT_Pin */
  GPIO_InitStruct.Pin = LASER_FRONT_LEFT_INTERRUPT_Pin;
 800bc2c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bc30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800bc32:	4b1c      	ldr	r3, [pc, #112]	; (800bca4 <MX_GPIO_Init+0x1e8>)
 800bc34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800bc36:	2301      	movs	r3, #1
 800bc38:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LASER_FRONT_LEFT_INTERRUPT_GPIO_Port, &GPIO_InitStruct);
 800bc3a:	f107 0314 	add.w	r3, r7, #20
 800bc3e:	4619      	mov	r1, r3
 800bc40:	4816      	ldr	r0, [pc, #88]	; (800bc9c <MX_GPIO_Init+0x1e0>)
 800bc42:	f7fa fc29 	bl	8006498 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 800bc46:	2200      	movs	r2, #0
 800bc48:	2105      	movs	r1, #5
 800bc4a:	2006      	movs	r0, #6
 800bc4c:	f7fa fbd1 	bl	80063f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800bc50:	2006      	movs	r0, #6
 800bc52:	f7fa fbea 	bl	800642a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 800bc56:	2200      	movs	r2, #0
 800bc58:	2105      	movs	r1, #5
 800bc5a:	2008      	movs	r0, #8
 800bc5c:	f7fa fbc9 	bl	80063f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800bc60:	2008      	movs	r0, #8
 800bc62:	f7fa fbe2 	bl	800642a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 800bc66:	2200      	movs	r2, #0
 800bc68:	2105      	movs	r1, #5
 800bc6a:	2009      	movs	r0, #9
 800bc6c:	f7fa fbc1 	bl	80063f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800bc70:	2009      	movs	r0, #9
 800bc72:	f7fa fbda 	bl	800642a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 800bc76:	2200      	movs	r2, #0
 800bc78:	2105      	movs	r1, #5
 800bc7a:	200a      	movs	r0, #10
 800bc7c:	f7fa fbb9 	bl	80063f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800bc80:	200a      	movs	r0, #10
 800bc82:	f7fa fbd2 	bl	800642a <HAL_NVIC_EnableIRQ>

}
 800bc86:	bf00      	nop
 800bc88:	3728      	adds	r7, #40	; 0x28
 800bc8a:	46bd      	mov	sp, r7
 800bc8c:	bd80      	pop	{r7, pc}
 800bc8e:	bf00      	nop
 800bc90:	40023800 	.word	0x40023800
 800bc94:	40020400 	.word	0x40020400
 800bc98:	40020800 	.word	0x40020800
 800bc9c:	40020000 	.word	0x40020000
 800bca0:	10110000 	.word	0x10110000
 800bca4:	10210000 	.word	0x10210000

0800bca8 <SetupVL53L1XDevices>:

/* USER CODE BEGIN 4 */


static int SetupVL53L1XDevices(VL53L1_DEV Device_DEV, int Device_ADDRESS,
		GPIO_TypeDef* Device_SHDNPORT, uint16_t Device_SHDNPIN) {
 800bca8:	b580      	push	{r7, lr}
 800bcaa:	b084      	sub	sp, #16
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	60f8      	str	r0, [r7, #12]
 800bcb0:	60b9      	str	r1, [r7, #8]
 800bcb2:	607a      	str	r2, [r7, #4]
 800bcb4:	807b      	strh	r3, [r7, #2]

	HAL_GPIO_WritePin(Device_SHDNPORT, Device_SHDNPIN, GPIO_PIN_SET);
 800bcb6:	887b      	ldrh	r3, [r7, #2]
 800bcb8:	2201      	movs	r2, #1
 800bcba:	4619      	mov	r1, r3
 800bcbc:	6878      	ldr	r0, [r7, #4]
 800bcbe:	f7fa fd6d 	bl	800679c <HAL_GPIO_WritePin>

	Device_DEV->I2cHandle = &hi2c1;
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	4a2f      	ldr	r2, [pc, #188]	; (800bd84 <SetupVL53L1XDevices+0xdc>)
 800bcc6:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
	Device_DEV->I2cDevAddr = 0x52;
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	2252      	movs	r2, #82	; 0x52
 800bcce:	f883 2398 	strb.w	r2, [r3, #920]	; 0x398
	Device_DEV->comms_speed_khz = 100;
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	2264      	movs	r2, #100	; 0x64
 800bcd6:	f8a3 239a 	strh.w	r2, [r3, #922]	; 0x39a
	Device_DEV->comms_type = 1;
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	2201      	movs	r2, #1
 800bcde:	f883 2399 	strb.w	r2, [r3, #921]	; 0x399

	status = VL53L1_WaitDeviceBooted(Device_DEV);
 800bce2:	68f8      	ldr	r0, [r7, #12]
 800bce4:	f7f4 fd1c 	bl	8000720 <VL53L1_WaitDeviceBooted>
 800bce8:	4603      	mov	r3, r0
 800bcea:	461a      	mov	r2, r3
 800bcec:	4b26      	ldr	r3, [pc, #152]	; (800bd88 <SetupVL53L1XDevices+0xe0>)
 800bcee:	601a      	str	r2, [r3, #0]
	status = VL53L1_SetDeviceAddress(Device_DEV, Device_ADDRESS);
 800bcf0:	68bb      	ldr	r3, [r7, #8]
 800bcf2:	b2db      	uxtb	r3, r3
 800bcf4:	4619      	mov	r1, r3
 800bcf6:	68f8      	ldr	r0, [r7, #12]
 800bcf8:	f7f4 fc7e 	bl	80005f8 <VL53L1_SetDeviceAddress>
 800bcfc:	4603      	mov	r3, r0
 800bcfe:	461a      	mov	r2, r3
 800bd00:	4b21      	ldr	r3, [pc, #132]	; (800bd88 <SetupVL53L1XDevices+0xe0>)
 800bd02:	601a      	str	r2, [r3, #0]
	Device_DEV->I2cDevAddr = Device_ADDRESS;
 800bd04:	68bb      	ldr	r3, [r7, #8]
 800bd06:	b2da      	uxtb	r2, r3
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	f883 2398 	strb.w	r2, [r3, #920]	; 0x398
	status = VL53L1_DataInit(Device_DEV);
 800bd0e:	68f8      	ldr	r0, [r7, #12]
 800bd10:	f7f4 fc8a 	bl	8000628 <VL53L1_DataInit>
 800bd14:	4603      	mov	r3, r0
 800bd16:	461a      	mov	r2, r3
 800bd18:	4b1b      	ldr	r3, [pc, #108]	; (800bd88 <SetupVL53L1XDevices+0xe0>)
 800bd1a:	601a      	str	r2, [r3, #0]
	status = VL53L1_StaticInit(Device_DEV);
 800bd1c:	68f8      	ldr	r0, [r7, #12]
 800bd1e:	f7f4 fcd8 	bl	80006d2 <VL53L1_StaticInit>
 800bd22:	4603      	mov	r3, r0
 800bd24:	461a      	mov	r2, r3
 800bd26:	4b18      	ldr	r3, [pc, #96]	; (800bd88 <SetupVL53L1XDevices+0xe0>)
 800bd28:	601a      	str	r2, [r3, #0]
	status = VL53L1_SetDistanceMode(Device_DEV, VL53L1_DISTANCEMODE_SHORT);
 800bd2a:	2101      	movs	r1, #1
 800bd2c:	68f8      	ldr	r0, [r7, #12]
 800bd2e:	f7f4 fe24 	bl	800097a <VL53L1_SetDistanceMode>
 800bd32:	4603      	mov	r3, r0
 800bd34:	461a      	mov	r2, r3
 800bd36:	4b14      	ldr	r3, [pc, #80]	; (800bd88 <SetupVL53L1XDevices+0xe0>)
 800bd38:	601a      	str	r2, [r3, #0]

	status = VL53L1_SetThresholdConfig(Device_DEV, &Detectionconfig );
 800bd3a:	4914      	ldr	r1, [pc, #80]	; (800bd8c <SetupVL53L1XDevices+0xe4>)
 800bd3c:	68f8      	ldr	r0, [r7, #12]
 800bd3e:	f7f5 fcb7 	bl	80016b0 <VL53L1_SetThresholdConfig>
 800bd42:	4603      	mov	r3, r0
 800bd44:	461a      	mov	r2, r3
 800bd46:	4b10      	ldr	r3, [pc, #64]	; (800bd88 <SetupVL53L1XDevices+0xe0>)
 800bd48:	601a      	str	r2, [r3, #0]

	status = VL53L1_SetMeasurementTimingBudgetMicroSeconds(Device_DEV, LASER_SENSOR_TIMING_BUDGET_US);
 800bd4a:	4911      	ldr	r1, [pc, #68]	; (800bd90 <SetupVL53L1XDevices+0xe8>)
 800bd4c:	68f8      	ldr	r0, [r7, #12]
 800bd4e:	f7f4 fe9b 	bl	8000a88 <VL53L1_SetMeasurementTimingBudgetMicroSeconds>
 800bd52:	4603      	mov	r3, r0
 800bd54:	461a      	mov	r2, r3
 800bd56:	4b0c      	ldr	r3, [pc, #48]	; (800bd88 <SetupVL53L1XDevices+0xe0>)
 800bd58:	601a      	str	r2, [r3, #0]
	status = VL53L1_SetInterMeasurementPeriodMilliSeconds(Device_DEV, LASER_SENSOR_MEASUREMENT_PERIOD_MS);
 800bd5a:	2196      	movs	r1, #150	; 0x96
 800bd5c:	68f8      	ldr	r0, [r7, #12]
 800bd5e:	f7f5 f811 	bl	8000d84 <VL53L1_SetInterMeasurementPeriodMilliSeconds>
 800bd62:	4603      	mov	r3, r0
 800bd64:	461a      	mov	r2, r3
 800bd66:	4b08      	ldr	r3, [pc, #32]	; (800bd88 <SetupVL53L1XDevices+0xe0>)
 800bd68:	601a      	str	r2, [r3, #0]
	status = VL53L1_StartMeasurement(Device_DEV);
 800bd6a:	68f8      	ldr	r0, [r7, #12]
 800bd6c:	f7f5 f980 	bl	8001070 <VL53L1_StartMeasurement>
 800bd70:	4603      	mov	r3, r0
 800bd72:	461a      	mov	r2, r3
 800bd74:	4b04      	ldr	r3, [pc, #16]	; (800bd88 <SetupVL53L1XDevices+0xe0>)
 800bd76:	601a      	str	r2, [r3, #0]

	return status;
 800bd78:	4b03      	ldr	r3, [pc, #12]	; (800bd88 <SetupVL53L1XDevices+0xe0>)
 800bd7a:	681b      	ldr	r3, [r3, #0]
}
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	3710      	adds	r7, #16
 800bd80:	46bd      	mov	sp, r7
 800bd82:	bd80      	pop	{r7, pc}
 800bd84:	20005188 	.word	0x20005188
 800bd88:	20003e08 	.word	0x20003e08
 800bd8c:	200069cc 	.word	0x200069cc
 800bd90:	000186a0 	.word	0x000186a0

0800bd94 <StartDefaultTask>:

/* USER CODE END 4 */

/* StartDefaultTask function */
void StartDefaultTask(void const * argument)
{
 800bd94:	b480      	push	{r7}
 800bd96:	b083      	sub	sp, #12
 800bd98:	af00      	add	r7, sp, #0
 800bd9a:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 5 */

	  static char buffer[256];
	/* Infinite loop */
	for(;;)
 800bd9c:	e7fe      	b.n	800bd9c <StartDefaultTask+0x8>
	...

0800bda0 <tskLASFRONTLEFT_fnc>:
  /* USER CODE END 5 */ 
}

/* tskLASFRONTLEFT_fnc function */
void tskLASFRONTLEFT_fnc(void const * argument)
{
 800bda0:	b580      	push	{r7, lr}
 800bda2:	b082      	sub	sp, #8
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	6078      	str	r0, [r7, #4]
	static char buffer[256];

	/* Infinite loop */
	for(;;)
	{
		xSemaphoreTake(myMutex01Handle,100);
 800bda8:	4b1b      	ldr	r3, [pc, #108]	; (800be18 <tskLASFRONTLEFT_fnc+0x78>)
 800bdaa:	6818      	ldr	r0, [r3, #0]
 800bdac:	2300      	movs	r3, #0
 800bdae:	2264      	movs	r2, #100	; 0x64
 800bdb0:	2100      	movs	r1, #0
 800bdb2:	f7fe f90f 	bl	8009fd4 <xQueueGenericReceive>
		status = VL53L1_GetRangingMeasurementData(LASER_FRONT_LEFT_DEV,	&RangingDataFrontLeft);
 800bdb6:	4b19      	ldr	r3, [pc, #100]	; (800be1c <tskLASFRONTLEFT_fnc+0x7c>)
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	4919      	ldr	r1, [pc, #100]	; (800be20 <tskLASFRONTLEFT_fnc+0x80>)
 800bdbc:	4618      	mov	r0, r3
 800bdbe:	f7f5 fc3b 	bl	8001638 <VL53L1_GetRangingMeasurementData>
 800bdc2:	4603      	mov	r3, r0
 800bdc4:	461a      	mov	r2, r3
 800bdc6:	4b17      	ldr	r3, [pc, #92]	; (800be24 <tskLASFRONTLEFT_fnc+0x84>)
 800bdc8:	601a      	str	r2, [r3, #0]
		status = VL53L1_ClearInterruptAndStartMeasurement(LASER_FRONT_LEFT_DEV);
 800bdca:	4b14      	ldr	r3, [pc, #80]	; (800be1c <tskLASFRONTLEFT_fnc+0x7c>)
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	4618      	mov	r0, r3
 800bdd0:	f7f5 fa44 	bl	800125c <VL53L1_ClearInterruptAndStartMeasurement>
 800bdd4:	4603      	mov	r3, r0
 800bdd6:	461a      	mov	r2, r3
 800bdd8:	4b12      	ldr	r3, [pc, #72]	; (800be24 <tskLASFRONTLEFT_fnc+0x84>)
 800bdda:	601a      	str	r2, [r3, #0]

		sprintf(buffer, "{LASSenseFrontLeft:%d}",RangingDataFrontLeft.RangeMilliMeter);
 800bddc:	4b10      	ldr	r3, [pc, #64]	; (800be20 <tskLASFRONTLEFT_fnc+0x80>)
 800bdde:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800bde2:	461a      	mov	r2, r3
 800bde4:	4910      	ldr	r1, [pc, #64]	; (800be28 <tskLASFRONTLEFT_fnc+0x88>)
 800bde6:	4811      	ldr	r0, [pc, #68]	; (800be2c <tskLASFRONTLEFT_fnc+0x8c>)
 800bde8:	f000 fc46 	bl	800c678 <siprintf>

		HAL_UART_Transmit(&huart2, (uint8_t*) buffer, strlen(buffer), 500);
 800bdec:	480f      	ldr	r0, [pc, #60]	; (800be2c <tskLASFRONTLEFT_fnc+0x8c>)
 800bdee:	f7f4 f9f7 	bl	80001e0 <strlen>
 800bdf2:	4603      	mov	r3, r0
 800bdf4:	b29a      	uxth	r2, r3
 800bdf6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800bdfa:	490c      	ldr	r1, [pc, #48]	; (800be2c <tskLASFRONTLEFT_fnc+0x8c>)
 800bdfc:	480c      	ldr	r0, [pc, #48]	; (800be30 <tskLASFRONTLEFT_fnc+0x90>)
 800bdfe:	f7fc feeb 	bl	8008bd8 <HAL_UART_Transmit>
		xSemaphoreGive(myMutex01Handle);
 800be02:	4b05      	ldr	r3, [pc, #20]	; (800be18 <tskLASFRONTLEFT_fnc+0x78>)
 800be04:	6818      	ldr	r0, [r3, #0]
 800be06:	2300      	movs	r3, #0
 800be08:	2200      	movs	r2, #0
 800be0a:	2100      	movs	r1, #0
 800be0c:	f7fd ffe8 	bl	8009de0 <xQueueGenericSend>
		osDelay(100);
 800be10:	2064      	movs	r0, #100	; 0x64
 800be12:	f7fd fa25 	bl	8009260 <osDelay>
		xSemaphoreTake(myMutex01Handle,100);
 800be16:	e7c7      	b.n	800bda8 <tskLASFRONTLEFT_fnc+0x8>
 800be18:	200069c8 	.word	0x200069c8
 800be1c:	20000028 	.word	0x20000028
 800be20:	20006184 	.word	0x20006184
 800be24:	20003e08 	.word	0x20003e08
 800be28:	0800d0a8 	.word	0x0800d0a8
 800be2c:	20003e0c 	.word	0x20003e0c
 800be30:	200065dc 	.word	0x200065dc

0800be34 <tskLASREARLEFT_fnc>:
  /* USER CODE END tskLASFRONTLEFT_fnc */
}

/* tskLASREARLEFT_fnc function */
void tskLASREARLEFT_fnc(void const * argument)
{
 800be34:	b580      	push	{r7, lr}
 800be36:	b082      	sub	sp, #8
 800be38:	af00      	add	r7, sp, #0
 800be3a:	6078      	str	r0, [r7, #4]
	static char buffer[256];

	/* Infinite loop */
	for(;;)
	{
		xSemaphoreTake(myMutex01Handle,100);
 800be3c:	4b1b      	ldr	r3, [pc, #108]	; (800beac <tskLASREARLEFT_fnc+0x78>)
 800be3e:	6818      	ldr	r0, [r3, #0]
 800be40:	2300      	movs	r3, #0
 800be42:	2264      	movs	r2, #100	; 0x64
 800be44:	2100      	movs	r1, #0
 800be46:	f7fe f8c5 	bl	8009fd4 <xQueueGenericReceive>
		status = VL53L1_GetRangingMeasurementData(LASER_REAR_LEFT_DEV,	&RangingDataRearLeft);
 800be4a:	4b19      	ldr	r3, [pc, #100]	; (800beb0 <tskLASREARLEFT_fnc+0x7c>)
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	4919      	ldr	r1, [pc, #100]	; (800beb4 <tskLASREARLEFT_fnc+0x80>)
 800be50:	4618      	mov	r0, r3
 800be52:	f7f5 fbf1 	bl	8001638 <VL53L1_GetRangingMeasurementData>
 800be56:	4603      	mov	r3, r0
 800be58:	461a      	mov	r2, r3
 800be5a:	4b17      	ldr	r3, [pc, #92]	; (800beb8 <tskLASREARLEFT_fnc+0x84>)
 800be5c:	601a      	str	r2, [r3, #0]
		status = VL53L1_ClearInterruptAndStartMeasurement(LASER_REAR_LEFT_DEV);
 800be5e:	4b14      	ldr	r3, [pc, #80]	; (800beb0 <tskLASREARLEFT_fnc+0x7c>)
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	4618      	mov	r0, r3
 800be64:	f7f5 f9fa 	bl	800125c <VL53L1_ClearInterruptAndStartMeasurement>
 800be68:	4603      	mov	r3, r0
 800be6a:	461a      	mov	r2, r3
 800be6c:	4b12      	ldr	r3, [pc, #72]	; (800beb8 <tskLASREARLEFT_fnc+0x84>)
 800be6e:	601a      	str	r2, [r3, #0]

		sprintf(buffer, "{LASSenseRearLeft:%d}",RangingDataRearLeft.RangeMilliMeter);
 800be70:	4b10      	ldr	r3, [pc, #64]	; (800beb4 <tskLASREARLEFT_fnc+0x80>)
 800be72:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800be76:	461a      	mov	r2, r3
 800be78:	4910      	ldr	r1, [pc, #64]	; (800bebc <tskLASREARLEFT_fnc+0x88>)
 800be7a:	4811      	ldr	r0, [pc, #68]	; (800bec0 <tskLASREARLEFT_fnc+0x8c>)
 800be7c:	f000 fbfc 	bl	800c678 <siprintf>

		HAL_UART_Transmit(&huart2, (uint8_t*) buffer, strlen(buffer), 500);
 800be80:	480f      	ldr	r0, [pc, #60]	; (800bec0 <tskLASREARLEFT_fnc+0x8c>)
 800be82:	f7f4 f9ad 	bl	80001e0 <strlen>
 800be86:	4603      	mov	r3, r0
 800be88:	b29a      	uxth	r2, r3
 800be8a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800be8e:	490c      	ldr	r1, [pc, #48]	; (800bec0 <tskLASREARLEFT_fnc+0x8c>)
 800be90:	480c      	ldr	r0, [pc, #48]	; (800bec4 <tskLASREARLEFT_fnc+0x90>)
 800be92:	f7fc fea1 	bl	8008bd8 <HAL_UART_Transmit>
		xSemaphoreGive(myMutex01Handle);
 800be96:	4b05      	ldr	r3, [pc, #20]	; (800beac <tskLASREARLEFT_fnc+0x78>)
 800be98:	6818      	ldr	r0, [r3, #0]
 800be9a:	2300      	movs	r3, #0
 800be9c:	2200      	movs	r2, #0
 800be9e:	2100      	movs	r1, #0
 800bea0:	f7fd ff9e 	bl	8009de0 <xQueueGenericSend>
		osDelay(100);
 800bea4:	2064      	movs	r0, #100	; 0x64
 800bea6:	f7fd f9db 	bl	8009260 <osDelay>
		xSemaphoreTake(myMutex01Handle,100);
 800beaa:	e7c7      	b.n	800be3c <tskLASREARLEFT_fnc+0x8>
 800beac:	200069c8 	.word	0x200069c8
 800beb0:	20000030 	.word	0x20000030
 800beb4:	200049dc 	.word	0x200049dc
 800beb8:	20003e08 	.word	0x20003e08
 800bebc:	0800d0c0 	.word	0x0800d0c0
 800bec0:	20003f0c 	.word	0x20003f0c
 800bec4:	200065dc 	.word	0x200065dc

0800bec8 <tskLASFRONTRIGHT_fnc>:
  /* USER CODE END tskLASREARLEFT_fnc */
}

/* tskLASFRONTRIGHT_fnc function */
void tskLASFRONTRIGHT_fnc(void const * argument)
{
 800bec8:	b580      	push	{r7, lr}
 800beca:	b082      	sub	sp, #8
 800becc:	af00      	add	r7, sp, #0
 800bece:	6078      	str	r0, [r7, #4]
	static char buffer[256];

	/* Infinite loop */
	for(;;)
	{
		xSemaphoreTake(myMutex01Handle,100);
 800bed0:	4b1b      	ldr	r3, [pc, #108]	; (800bf40 <tskLASFRONTRIGHT_fnc+0x78>)
 800bed2:	6818      	ldr	r0, [r3, #0]
 800bed4:	2300      	movs	r3, #0
 800bed6:	2264      	movs	r2, #100	; 0x64
 800bed8:	2100      	movs	r1, #0
 800beda:	f7fe f87b 	bl	8009fd4 <xQueueGenericReceive>
		status = VL53L1_GetRangingMeasurementData(LASER_FRONT_RIGHT_DEV,	&RangingDataFrontRight);
 800bede:	4b19      	ldr	r3, [pc, #100]	; (800bf44 <tskLASFRONTRIGHT_fnc+0x7c>)
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	4919      	ldr	r1, [pc, #100]	; (800bf48 <tskLASFRONTRIGHT_fnc+0x80>)
 800bee4:	4618      	mov	r0, r3
 800bee6:	f7f5 fba7 	bl	8001638 <VL53L1_GetRangingMeasurementData>
 800beea:	4603      	mov	r3, r0
 800beec:	461a      	mov	r2, r3
 800beee:	4b17      	ldr	r3, [pc, #92]	; (800bf4c <tskLASFRONTRIGHT_fnc+0x84>)
 800bef0:	601a      	str	r2, [r3, #0]
		status = VL53L1_ClearInterruptAndStartMeasurement(LASER_FRONT_RIGHT_DEV);
 800bef2:	4b14      	ldr	r3, [pc, #80]	; (800bf44 <tskLASFRONTRIGHT_fnc+0x7c>)
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	4618      	mov	r0, r3
 800bef8:	f7f5 f9b0 	bl	800125c <VL53L1_ClearInterruptAndStartMeasurement>
 800befc:	4603      	mov	r3, r0
 800befe:	461a      	mov	r2, r3
 800bf00:	4b12      	ldr	r3, [pc, #72]	; (800bf4c <tskLASFRONTRIGHT_fnc+0x84>)
 800bf02:	601a      	str	r2, [r3, #0]

		sprintf(buffer, "{LASSenseFrontRight:%d}",RangingDataFrontRight.RangeMilliMeter);
 800bf04:	4b10      	ldr	r3, [pc, #64]	; (800bf48 <tskLASFRONTRIGHT_fnc+0x80>)
 800bf06:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800bf0a:	461a      	mov	r2, r3
 800bf0c:	4910      	ldr	r1, [pc, #64]	; (800bf50 <tskLASFRONTRIGHT_fnc+0x88>)
 800bf0e:	4811      	ldr	r0, [pc, #68]	; (800bf54 <tskLASFRONTRIGHT_fnc+0x8c>)
 800bf10:	f000 fbb2 	bl	800c678 <siprintf>

		HAL_UART_Transmit(&huart2, (uint8_t*) buffer, strlen(buffer), 500);
 800bf14:	480f      	ldr	r0, [pc, #60]	; (800bf54 <tskLASFRONTRIGHT_fnc+0x8c>)
 800bf16:	f7f4 f963 	bl	80001e0 <strlen>
 800bf1a:	4603      	mov	r3, r0
 800bf1c:	b29a      	uxth	r2, r3
 800bf1e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800bf22:	490c      	ldr	r1, [pc, #48]	; (800bf54 <tskLASFRONTRIGHT_fnc+0x8c>)
 800bf24:	480c      	ldr	r0, [pc, #48]	; (800bf58 <tskLASFRONTRIGHT_fnc+0x90>)
 800bf26:	f7fc fe57 	bl	8008bd8 <HAL_UART_Transmit>
		xSemaphoreGive(myMutex01Handle);
 800bf2a:	4b05      	ldr	r3, [pc, #20]	; (800bf40 <tskLASFRONTRIGHT_fnc+0x78>)
 800bf2c:	6818      	ldr	r0, [r3, #0]
 800bf2e:	2300      	movs	r3, #0
 800bf30:	2200      	movs	r2, #0
 800bf32:	2100      	movs	r1, #0
 800bf34:	f7fd ff54 	bl	8009de0 <xQueueGenericSend>
		osDelay(100);
 800bf38:	2064      	movs	r0, #100	; 0x64
 800bf3a:	f7fd f991 	bl	8009260 <osDelay>
		xSemaphoreTake(myMutex01Handle,100);
 800bf3e:	e7c7      	b.n	800bed0 <tskLASFRONTRIGHT_fnc+0x8>
 800bf40:	200069c8 	.word	0x200069c8
 800bf44:	2000002c 	.word	0x2000002c
 800bf48:	20006168 	.word	0x20006168
 800bf4c:	20003e08 	.word	0x20003e08
 800bf50:	0800d0d8 	.word	0x0800d0d8
 800bf54:	2000400c 	.word	0x2000400c
 800bf58:	200065dc 	.word	0x200065dc

0800bf5c <tskEDGLFTFRNT>:
  /* USER CODE END tskLASFRONTRIGHT_fnc */
}

/* tskEDGLFTFRNT function */
void tskEDGLFTFRNT(void const * argument)
{
 800bf5c:	b590      	push	{r4, r7, lr}
 800bf5e:	b083      	sub	sp, #12
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	6078      	str	r0, [r7, #4]
	  static char buffer[256];

  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 800bf64:	2000      	movs	r0, #0
 800bf66:	f7fe fbb5 	bl	800a6d4 <vTaskSuspend>
		sprintf(buffer, "{EDGLFTFRNT:1}");
 800bf6a:	4a0a      	ldr	r2, [pc, #40]	; (800bf94 <tskEDGLFTFRNT+0x38>)
 800bf6c:	4b0a      	ldr	r3, [pc, #40]	; (800bf98 <tskEDGLFTFRNT+0x3c>)
 800bf6e:	4614      	mov	r4, r2
 800bf70:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800bf72:	c407      	stmia	r4!, {r0, r1, r2}
 800bf74:	8023      	strh	r3, [r4, #0]
 800bf76:	3402      	adds	r4, #2
 800bf78:	0c1b      	lsrs	r3, r3, #16
 800bf7a:	7023      	strb	r3, [r4, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*) buffer, strlen(buffer), 500);
 800bf7c:	4805      	ldr	r0, [pc, #20]	; (800bf94 <tskEDGLFTFRNT+0x38>)
 800bf7e:	f7f4 f92f 	bl	80001e0 <strlen>
 800bf82:	4603      	mov	r3, r0
 800bf84:	b29a      	uxth	r2, r3
 800bf86:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800bf8a:	4902      	ldr	r1, [pc, #8]	; (800bf94 <tskEDGLFTFRNT+0x38>)
 800bf8c:	4803      	ldr	r0, [pc, #12]	; (800bf9c <tskEDGLFTFRNT+0x40>)
 800bf8e:	f7fc fe23 	bl	8008bd8 <HAL_UART_Transmit>
	  vTaskSuspend(NULL);
 800bf92:	e7e7      	b.n	800bf64 <tskEDGLFTFRNT+0x8>
 800bf94:	2000410c 	.word	0x2000410c
 800bf98:	0800d0f0 	.word	0x0800d0f0
 800bf9c:	200065dc 	.word	0x200065dc

0800bfa0 <tskEDGLFTRER>:
  /* USER CODE END tskEDGLFTFRNT */
}

/* tskEDGLFTRER function */
void tskEDGLFTRER(void const * argument)
{
 800bfa0:	b590      	push	{r4, r7, lr}
 800bfa2:	b083      	sub	sp, #12
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	6078      	str	r0, [r7, #4]
	  static char buffer[256];

  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 800bfa8:	2000      	movs	r0, #0
 800bfaa:	f7fe fb93 	bl	800a6d4 <vTaskSuspend>
		sprintf(buffer, "{EDGLFTRER:1}");
 800bfae:	4a09      	ldr	r2, [pc, #36]	; (800bfd4 <tskEDGLFTRER+0x34>)
 800bfb0:	4b09      	ldr	r3, [pc, #36]	; (800bfd8 <tskEDGLFTRER+0x38>)
 800bfb2:	4614      	mov	r4, r2
 800bfb4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800bfb6:	c407      	stmia	r4!, {r0, r1, r2}
 800bfb8:	8023      	strh	r3, [r4, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*) buffer, strlen(buffer), 500);
 800bfba:	4806      	ldr	r0, [pc, #24]	; (800bfd4 <tskEDGLFTRER+0x34>)
 800bfbc:	f7f4 f910 	bl	80001e0 <strlen>
 800bfc0:	4603      	mov	r3, r0
 800bfc2:	b29a      	uxth	r2, r3
 800bfc4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800bfc8:	4902      	ldr	r1, [pc, #8]	; (800bfd4 <tskEDGLFTRER+0x34>)
 800bfca:	4804      	ldr	r0, [pc, #16]	; (800bfdc <tskEDGLFTRER+0x3c>)
 800bfcc:	f7fc fe04 	bl	8008bd8 <HAL_UART_Transmit>
	  vTaskSuspend(NULL);
 800bfd0:	e7ea      	b.n	800bfa8 <tskEDGLFTRER+0x8>
 800bfd2:	bf00      	nop
 800bfd4:	2000420c 	.word	0x2000420c
 800bfd8:	0800d100 	.word	0x0800d100
 800bfdc:	200065dc 	.word	0x200065dc

0800bfe0 <tskEDGRGTFRNT>:
  /* USER CODE END tskEDGLFTRER */
}

/* tskEDGRGTFRNT function */
void tskEDGRGTFRNT(void const * argument)
{
 800bfe0:	b590      	push	{r4, r7, lr}
 800bfe2:	b083      	sub	sp, #12
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	6078      	str	r0, [r7, #4]
  static char buffer[256];

  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 800bfe8:	2000      	movs	r0, #0
 800bfea:	f7fe fb73 	bl	800a6d4 <vTaskSuspend>
		sprintf(buffer, "{EDGRGTFRNT:1}");
 800bfee:	4a0a      	ldr	r2, [pc, #40]	; (800c018 <tskEDGRGTFRNT+0x38>)
 800bff0:	4b0a      	ldr	r3, [pc, #40]	; (800c01c <tskEDGRGTFRNT+0x3c>)
 800bff2:	4614      	mov	r4, r2
 800bff4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800bff6:	c407      	stmia	r4!, {r0, r1, r2}
 800bff8:	8023      	strh	r3, [r4, #0]
 800bffa:	3402      	adds	r4, #2
 800bffc:	0c1b      	lsrs	r3, r3, #16
 800bffe:	7023      	strb	r3, [r4, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*) buffer, strlen(buffer), 500);
 800c000:	4805      	ldr	r0, [pc, #20]	; (800c018 <tskEDGRGTFRNT+0x38>)
 800c002:	f7f4 f8ed 	bl	80001e0 <strlen>
 800c006:	4603      	mov	r3, r0
 800c008:	b29a      	uxth	r2, r3
 800c00a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800c00e:	4902      	ldr	r1, [pc, #8]	; (800c018 <tskEDGRGTFRNT+0x38>)
 800c010:	4803      	ldr	r0, [pc, #12]	; (800c020 <tskEDGRGTFRNT+0x40>)
 800c012:	f7fc fde1 	bl	8008bd8 <HAL_UART_Transmit>
	  vTaskSuspend(NULL);
 800c016:	e7e7      	b.n	800bfe8 <tskEDGRGTFRNT+0x8>
 800c018:	2000430c 	.word	0x2000430c
 800c01c:	0800d110 	.word	0x0800d110
 800c020:	200065dc 	.word	0x200065dc

0800c024 <tskEDGRGTRER>:
  /* USER CODE END tskEDGRGTFRNT */
}

/* tskEDGRGTRER function */
void tskEDGRGTRER(void const * argument)
{
 800c024:	b590      	push	{r4, r7, lr}
 800c026:	b083      	sub	sp, #12
 800c028:	af00      	add	r7, sp, #0
 800c02a:	6078      	str	r0, [r7, #4]
  static char buffer[256];

  /* Infinite loop */
  for(;;)
  {
	  vTaskSuspend(NULL);
 800c02c:	2000      	movs	r0, #0
 800c02e:	f7fe fb51 	bl	800a6d4 <vTaskSuspend>
		sprintf(buffer, "{EDGRGTRER:1}");
 800c032:	4a09      	ldr	r2, [pc, #36]	; (800c058 <tskEDGRGTRER+0x34>)
 800c034:	4b09      	ldr	r3, [pc, #36]	; (800c05c <tskEDGRGTRER+0x38>)
 800c036:	4614      	mov	r4, r2
 800c038:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c03a:	c407      	stmia	r4!, {r0, r1, r2}
 800c03c:	8023      	strh	r3, [r4, #0]
		HAL_UART_Transmit(&huart2, (uint8_t*) buffer, strlen(buffer), 500);
 800c03e:	4806      	ldr	r0, [pc, #24]	; (800c058 <tskEDGRGTRER+0x34>)
 800c040:	f7f4 f8ce 	bl	80001e0 <strlen>
 800c044:	4603      	mov	r3, r0
 800c046:	b29a      	uxth	r2, r3
 800c048:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800c04c:	4902      	ldr	r1, [pc, #8]	; (800c058 <tskEDGRGTRER+0x34>)
 800c04e:	4804      	ldr	r0, [pc, #16]	; (800c060 <tskEDGRGTRER+0x3c>)
 800c050:	f7fc fdc2 	bl	8008bd8 <HAL_UART_Transmit>
	  vTaskSuspend(NULL);
 800c054:	e7ea      	b.n	800c02c <tskEDGRGTRER+0x8>
 800c056:	bf00      	nop
 800c058:	2000440c 	.word	0x2000440c
 800c05c:	0800d120 	.word	0x0800d120
 800c060:	200065dc 	.word	0x200065dc

0800c064 <rightPWMFunc>:
  /* USER CODE END tskEDGRGTRER */
}

/* rightPWMFunc function */
void rightPWMFunc(void const * argument)
{
 800c064:	b580      	push	{r7, lr}
 800c066:	b082      	sub	sp, #8
 800c068:	af00      	add	r7, sp, #0
 800c06a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN rightPWMFunc */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800c06c:	2001      	movs	r0, #1
 800c06e:	f7fd f8f7 	bl	8009260 <osDelay>
 800c072:	e7fb      	b.n	800c06c <rightPWMFunc+0x8>

0800c074 <leftPWMFunc>:
  /* USER CODE END rightPWMFunc */
}

/* leftPWMFunc function */
void leftPWMFunc(void const * argument)
{
 800c074:	b580      	push	{r7, lr}
 800c076:	b082      	sub	sp, #8
 800c078:	af00      	add	r7, sp, #0
 800c07a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN leftPWMFunc */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800c07c:	2001      	movs	r0, #1
 800c07e:	f7fd f8ef 	bl	8009260 <osDelay>
 800c082:	e7fb      	b.n	800c07c <leftPWMFunc+0x8>

0800c084 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c084:	b580      	push	{r7, lr}
 800c086:	b082      	sub	sp, #8
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	4a04      	ldr	r2, [pc, #16]	; (800c0a4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800c092:	4293      	cmp	r3, r2
 800c094:	d101      	bne.n	800c09a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800c096:	f7fa f895 	bl	80061c4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800c09a:	bf00      	nop
 800c09c:	3708      	adds	r7, #8
 800c09e:	46bd      	mov	sp, r7
 800c0a0:	bd80      	pop	{r7, pc}
 800c0a2:	bf00      	nop
 800c0a4:	40000800 	.word	0x40000800

0800c0a8 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 800c0a8:	b480      	push	{r7}
 800c0aa:	b083      	sub	sp, #12
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	6078      	str	r0, [r7, #4]
 800c0b0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	while (1) {
 800c0b2:	e7fe      	b.n	800c0b2 <_Error_Handler+0xa>

0800c0b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800c0b4:	b580      	push	{r7, lr}
 800c0b6:	b082      	sub	sp, #8
 800c0b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	607b      	str	r3, [r7, #4]
 800c0be:	4a25      	ldr	r2, [pc, #148]	; (800c154 <HAL_MspInit+0xa0>)
 800c0c0:	4b24      	ldr	r3, [pc, #144]	; (800c154 <HAL_MspInit+0xa0>)
 800c0c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c0c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c0c8:	6453      	str	r3, [r2, #68]	; 0x44
 800c0ca:	4b22      	ldr	r3, [pc, #136]	; (800c154 <HAL_MspInit+0xa0>)
 800c0cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c0ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c0d2:	607b      	str	r3, [r7, #4]
 800c0d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800c0d6:	2300      	movs	r3, #0
 800c0d8:	603b      	str	r3, [r7, #0]
 800c0da:	4a1e      	ldr	r2, [pc, #120]	; (800c154 <HAL_MspInit+0xa0>)
 800c0dc:	4b1d      	ldr	r3, [pc, #116]	; (800c154 <HAL_MspInit+0xa0>)
 800c0de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c0e4:	6413      	str	r3, [r2, #64]	; 0x40
 800c0e6:	4b1b      	ldr	r3, [pc, #108]	; (800c154 <HAL_MspInit+0xa0>)
 800c0e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c0ee:	603b      	str	r3, [r7, #0]
 800c0f0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800c0f2:	2003      	movs	r0, #3
 800c0f4:	f7fa f972 	bl	80063dc <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800c0f8:	2200      	movs	r2, #0
 800c0fa:	2100      	movs	r1, #0
 800c0fc:	f06f 000b 	mvn.w	r0, #11
 800c100:	f7fa f977 	bl	80063f2 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800c104:	2200      	movs	r2, #0
 800c106:	2100      	movs	r1, #0
 800c108:	f06f 000a 	mvn.w	r0, #10
 800c10c:	f7fa f971 	bl	80063f2 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800c110:	2200      	movs	r2, #0
 800c112:	2100      	movs	r1, #0
 800c114:	f06f 0009 	mvn.w	r0, #9
 800c118:	f7fa f96b 	bl	80063f2 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 800c11c:	2200      	movs	r2, #0
 800c11e:	2100      	movs	r1, #0
 800c120:	f06f 0004 	mvn.w	r0, #4
 800c124:	f7fa f965 	bl	80063f2 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800c128:	2200      	movs	r2, #0
 800c12a:	2100      	movs	r1, #0
 800c12c:	f06f 0003 	mvn.w	r0, #3
 800c130:	f7fa f95f 	bl	80063f2 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800c134:	2200      	movs	r2, #0
 800c136:	210f      	movs	r1, #15
 800c138:	f06f 0001 	mvn.w	r0, #1
 800c13c:	f7fa f959 	bl	80063f2 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 800c140:	2200      	movs	r2, #0
 800c142:	210f      	movs	r1, #15
 800c144:	f04f 30ff 	mov.w	r0, #4294967295
 800c148:	f7fa f953 	bl	80063f2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800c14c:	bf00      	nop
 800c14e:	3708      	adds	r7, #8
 800c150:	46bd      	mov	sp, r7
 800c152:	bd80      	pop	{r7, pc}
 800c154:	40023800 	.word	0x40023800

0800c158 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800c158:	b580      	push	{r7, lr}
 800c15a:	b088      	sub	sp, #32
 800c15c:	af00      	add	r7, sp, #0
 800c15e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	4a12      	ldr	r2, [pc, #72]	; (800c1b0 <HAL_I2C_MspInit+0x58>)
 800c166:	4293      	cmp	r3, r2
 800c168:	d11d      	bne.n	800c1a6 <HAL_I2C_MspInit+0x4e>
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800c16a:	23c0      	movs	r3, #192	; 0xc0
 800c16c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800c16e:	2312      	movs	r3, #18
 800c170:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c172:	2301      	movs	r3, #1
 800c174:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c176:	2303      	movs	r3, #3
 800c178:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800c17a:	2304      	movs	r3, #4
 800c17c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c17e:	f107 030c 	add.w	r3, r7, #12
 800c182:	4619      	mov	r1, r3
 800c184:	480b      	ldr	r0, [pc, #44]	; (800c1b4 <HAL_I2C_MspInit+0x5c>)
 800c186:	f7fa f987 	bl	8006498 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800c18a:	2300      	movs	r3, #0
 800c18c:	60bb      	str	r3, [r7, #8]
 800c18e:	4a0a      	ldr	r2, [pc, #40]	; (800c1b8 <HAL_I2C_MspInit+0x60>)
 800c190:	4b09      	ldr	r3, [pc, #36]	; (800c1b8 <HAL_I2C_MspInit+0x60>)
 800c192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c194:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c198:	6413      	str	r3, [r2, #64]	; 0x40
 800c19a:	4b07      	ldr	r3, [pc, #28]	; (800c1b8 <HAL_I2C_MspInit+0x60>)
 800c19c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c19e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c1a2:	60bb      	str	r3, [r7, #8]
 800c1a4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800c1a6:	bf00      	nop
 800c1a8:	3720      	adds	r7, #32
 800c1aa:	46bd      	mov	sp, r7
 800c1ac:	bd80      	pop	{r7, pc}
 800c1ae:	bf00      	nop
 800c1b0:	40005400 	.word	0x40005400
 800c1b4:	40020400 	.word	0x40020400
 800c1b8:	40023800 	.word	0x40023800

0800c1bc <HAL_TIM_Encoder_MspInit>:
  }

}

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800c1bc:	b580      	push	{r7, lr}
 800c1be:	b08a      	sub	sp, #40	; 0x28
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim_encoder->Instance==TIM1)
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	4a24      	ldr	r2, [pc, #144]	; (800c25c <HAL_TIM_Encoder_MspInit+0xa0>)
 800c1ca:	4293      	cmp	r3, r2
 800c1cc:	d11f      	bne.n	800c20e <HAL_TIM_Encoder_MspInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800c1ce:	2300      	movs	r3, #0
 800c1d0:	613b      	str	r3, [r7, #16]
 800c1d2:	4a23      	ldr	r2, [pc, #140]	; (800c260 <HAL_TIM_Encoder_MspInit+0xa4>)
 800c1d4:	4b22      	ldr	r3, [pc, #136]	; (800c260 <HAL_TIM_Encoder_MspInit+0xa4>)
 800c1d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c1d8:	f043 0301 	orr.w	r3, r3, #1
 800c1dc:	6453      	str	r3, [r2, #68]	; 0x44
 800c1de:	4b20      	ldr	r3, [pc, #128]	; (800c260 <HAL_TIM_Encoder_MspInit+0xa4>)
 800c1e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c1e2:	f003 0301 	and.w	r3, r3, #1
 800c1e6:	613b      	str	r3, [r7, #16]
 800c1e8:	693b      	ldr	r3, [r7, #16]
  
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800c1ea:	f44f 7340 	mov.w	r3, #768	; 0x300
 800c1ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c1f0:	2302      	movs	r3, #2
 800c1f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c1f4:	2301      	movs	r3, #1
 800c1f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800c1f8:	2302      	movs	r3, #2
 800c1fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800c1fc:	2301      	movs	r3, #1
 800c1fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c200:	f107 0314 	add.w	r3, r7, #20
 800c204:	4619      	mov	r1, r3
 800c206:	4817      	ldr	r0, [pc, #92]	; (800c264 <HAL_TIM_Encoder_MspInit+0xa8>)
 800c208:	f7fa f946 	bl	8006498 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800c20c:	e022      	b.n	800c254 <HAL_TIM_Encoder_MspInit+0x98>
  else if(htim_encoder->Instance==TIM2)
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c216:	d11d      	bne.n	800c254 <HAL_TIM_Encoder_MspInit+0x98>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800c218:	2300      	movs	r3, #0
 800c21a:	60fb      	str	r3, [r7, #12]
 800c21c:	4a10      	ldr	r2, [pc, #64]	; (800c260 <HAL_TIM_Encoder_MspInit+0xa4>)
 800c21e:	4b10      	ldr	r3, [pc, #64]	; (800c260 <HAL_TIM_Encoder_MspInit+0xa4>)
 800c220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c222:	f043 0301 	orr.w	r3, r3, #1
 800c226:	6413      	str	r3, [r2, #64]	; 0x40
 800c228:	4b0d      	ldr	r3, [pc, #52]	; (800c260 <HAL_TIM_Encoder_MspInit+0xa4>)
 800c22a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c22c:	f003 0301 	and.w	r3, r3, #1
 800c230:	60fb      	str	r3, [r7, #12]
 800c232:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800c234:	2303      	movs	r3, #3
 800c236:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c238:	2302      	movs	r3, #2
 800c23a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c23c:	2300      	movs	r3, #0
 800c23e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800c240:	2302      	movs	r3, #2
 800c242:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800c244:	2301      	movs	r3, #1
 800c246:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c248:	f107 0314 	add.w	r3, r7, #20
 800c24c:	4619      	mov	r1, r3
 800c24e:	4805      	ldr	r0, [pc, #20]	; (800c264 <HAL_TIM_Encoder_MspInit+0xa8>)
 800c250:	f7fa f922 	bl	8006498 <HAL_GPIO_Init>
}
 800c254:	bf00      	nop
 800c256:	3728      	adds	r7, #40	; 0x28
 800c258:	46bd      	mov	sp, r7
 800c25a:	bd80      	pop	{r7, pc}
 800c25c:	40010000 	.word	0x40010000
 800c260:	40023800 	.word	0x40023800
 800c264:	40020000 	.word	0x40020000

0800c268 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800c268:	b480      	push	{r7}
 800c26a:	b085      	sub	sp, #20
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	6078      	str	r0, [r7, #4]

  if(htim_pwm->Instance==TIM3)
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	4a0b      	ldr	r2, [pc, #44]	; (800c2a4 <HAL_TIM_PWM_MspInit+0x3c>)
 800c276:	4293      	cmp	r3, r2
 800c278:	d10d      	bne.n	800c296 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800c27a:	2300      	movs	r3, #0
 800c27c:	60fb      	str	r3, [r7, #12]
 800c27e:	4a0a      	ldr	r2, [pc, #40]	; (800c2a8 <HAL_TIM_PWM_MspInit+0x40>)
 800c280:	4b09      	ldr	r3, [pc, #36]	; (800c2a8 <HAL_TIM_PWM_MspInit+0x40>)
 800c282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c284:	f043 0302 	orr.w	r3, r3, #2
 800c288:	6413      	str	r3, [r2, #64]	; 0x40
 800c28a:	4b07      	ldr	r3, [pc, #28]	; (800c2a8 <HAL_TIM_PWM_MspInit+0x40>)
 800c28c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c28e:	f003 0302 	and.w	r3, r3, #2
 800c292:	60fb      	str	r3, [r7, #12]
 800c294:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800c296:	bf00      	nop
 800c298:	3714      	adds	r7, #20
 800c29a:	46bd      	mov	sp, r7
 800c29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a0:	4770      	bx	lr
 800c2a2:	bf00      	nop
 800c2a4:	40000400 	.word	0x40000400
 800c2a8:	40023800 	.word	0x40023800

0800c2ac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800c2ac:	b580      	push	{r7, lr}
 800c2ae:	b088      	sub	sp, #32
 800c2b0:	af00      	add	r7, sp, #0
 800c2b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM3)
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	4a13      	ldr	r2, [pc, #76]	; (800c308 <HAL_TIM_MspPostInit+0x5c>)
 800c2ba:	4293      	cmp	r3, r2
 800c2bc:	d11f      	bne.n	800c2fe <HAL_TIM_MspPostInit+0x52>
  
    /**TIM3 GPIO Configuration    
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800c2be:	2340      	movs	r3, #64	; 0x40
 800c2c0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800c2c2:	2312      	movs	r3, #18
 800c2c4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c2c6:	2301      	movs	r3, #1
 800c2c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800c2ca:	2302      	movs	r3, #2
 800c2cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800c2ce:	2302      	movs	r3, #2
 800c2d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c2d2:	f107 030c 	add.w	r3, r7, #12
 800c2d6:	4619      	mov	r1, r3
 800c2d8:	480c      	ldr	r0, [pc, #48]	; (800c30c <HAL_TIM_MspPostInit+0x60>)
 800c2da:	f7fa f8dd 	bl	8006498 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800c2de:	2380      	movs	r3, #128	; 0x80
 800c2e0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c2e2:	2302      	movs	r3, #2
 800c2e4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c2e6:	2300      	movs	r3, #0
 800c2e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800c2ee:	2302      	movs	r3, #2
 800c2f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c2f2:	f107 030c 	add.w	r3, r7, #12
 800c2f6:	4619      	mov	r1, r3
 800c2f8:	4804      	ldr	r0, [pc, #16]	; (800c30c <HAL_TIM_MspPostInit+0x60>)
 800c2fa:	f7fa f8cd 	bl	8006498 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800c2fe:	bf00      	nop
 800c300:	3720      	adds	r7, #32
 800c302:	46bd      	mov	sp, r7
 800c304:	bd80      	pop	{r7, pc}
 800c306:	bf00      	nop
 800c308:	40000400 	.word	0x40000400
 800c30c:	40020000 	.word	0x40020000

0800c310 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800c310:	b580      	push	{r7, lr}
 800c312:	b088      	sub	sp, #32
 800c314:	af00      	add	r7, sp, #0
 800c316:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	4a12      	ldr	r2, [pc, #72]	; (800c368 <HAL_UART_MspInit+0x58>)
 800c31e:	4293      	cmp	r3, r2
 800c320:	d11d      	bne.n	800c35e <HAL_UART_MspInit+0x4e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800c322:	2300      	movs	r3, #0
 800c324:	60bb      	str	r3, [r7, #8]
 800c326:	4a11      	ldr	r2, [pc, #68]	; (800c36c <HAL_UART_MspInit+0x5c>)
 800c328:	4b10      	ldr	r3, [pc, #64]	; (800c36c <HAL_UART_MspInit+0x5c>)
 800c32a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c32c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c330:	6413      	str	r3, [r2, #64]	; 0x40
 800c332:	4b0e      	ldr	r3, [pc, #56]	; (800c36c <HAL_UART_MspInit+0x5c>)
 800c334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c33a:	60bb      	str	r3, [r7, #8]
 800c33c:	68bb      	ldr	r3, [r7, #8]
  
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800c33e:	230c      	movs	r3, #12
 800c340:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c342:	2302      	movs	r3, #2
 800c344:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c346:	2300      	movs	r3, #0
 800c348:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c34a:	2300      	movs	r3, #0
 800c34c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800c34e:	2307      	movs	r3, #7
 800c350:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c352:	f107 030c 	add.w	r3, r7, #12
 800c356:	4619      	mov	r1, r3
 800c358:	4805      	ldr	r0, [pc, #20]	; (800c370 <HAL_UART_MspInit+0x60>)
 800c35a:	f7fa f89d 	bl	8006498 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800c35e:	bf00      	nop
 800c360:	3720      	adds	r7, #32
 800c362:	46bd      	mov	sp, r7
 800c364:	bd80      	pop	{r7, pc}
 800c366:	bf00      	nop
 800c368:	40004400 	.word	0x40004400
 800c36c:	40023800 	.word	0x40023800
 800c370:	40020000 	.word	0x40020000

0800c374 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800c374:	b580      	push	{r7, lr}
 800c376:	b08c      	sub	sp, #48	; 0x30
 800c378:	af00      	add	r7, sp, #0
 800c37a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800c37c:	2300      	movs	r3, #0
 800c37e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800c380:	2300      	movs	r3, #0
 800c382:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0); 
 800c384:	2200      	movs	r2, #0
 800c386:	6879      	ldr	r1, [r7, #4]
 800c388:	201e      	movs	r0, #30
 800c38a:	f7fa f832 	bl	80063f2 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn); 
 800c38e:	201e      	movs	r0, #30
 800c390:	f7fa f84b 	bl	800642a <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 800c394:	2300      	movs	r3, #0
 800c396:	60fb      	str	r3, [r7, #12]
 800c398:	4a1f      	ldr	r2, [pc, #124]	; (800c418 <HAL_InitTick+0xa4>)
 800c39a:	4b1f      	ldr	r3, [pc, #124]	; (800c418 <HAL_InitTick+0xa4>)
 800c39c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c39e:	f043 0304 	orr.w	r3, r3, #4
 800c3a2:	6413      	str	r3, [r2, #64]	; 0x40
 800c3a4:	4b1c      	ldr	r3, [pc, #112]	; (800c418 <HAL_InitTick+0xa4>)
 800c3a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3a8:	f003 0304 	and.w	r3, r3, #4
 800c3ac:	60fb      	str	r3, [r7, #12]
 800c3ae:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800c3b0:	f107 0210 	add.w	r2, r7, #16
 800c3b4:	f107 0314 	add.w	r3, r7, #20
 800c3b8:	4611      	mov	r1, r2
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	f7fb fd72 	bl	8007ea4 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800c3c0:	f7fb fd48 	bl	8007e54 <HAL_RCC_GetPCLK1Freq>
 800c3c4:	4603      	mov	r3, r0
 800c3c6:	005b      	lsls	r3, r3, #1
 800c3c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800c3ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3cc:	4a13      	ldr	r2, [pc, #76]	; (800c41c <HAL_InitTick+0xa8>)
 800c3ce:	fba2 2303 	umull	r2, r3, r2, r3
 800c3d2:	0c9b      	lsrs	r3, r3, #18
 800c3d4:	3b01      	subs	r3, #1
 800c3d6:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 800c3d8:	4b11      	ldr	r3, [pc, #68]	; (800c420 <HAL_InitTick+0xac>)
 800c3da:	4a12      	ldr	r2, [pc, #72]	; (800c424 <HAL_InitTick+0xb0>)
 800c3dc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000 / 1000) - 1;
 800c3de:	4b10      	ldr	r3, [pc, #64]	; (800c420 <HAL_InitTick+0xac>)
 800c3e0:	f240 32e7 	movw	r2, #999	; 0x3e7
 800c3e4:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800c3e6:	4a0e      	ldr	r2, [pc, #56]	; (800c420 <HAL_InitTick+0xac>)
 800c3e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3ea:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 800c3ec:	4b0c      	ldr	r3, [pc, #48]	; (800c420 <HAL_InitTick+0xac>)
 800c3ee:	2200      	movs	r2, #0
 800c3f0:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800c3f2:	4b0b      	ldr	r3, [pc, #44]	; (800c420 <HAL_InitTick+0xac>)
 800c3f4:	2200      	movs	r2, #0
 800c3f6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 800c3f8:	4809      	ldr	r0, [pc, #36]	; (800c420 <HAL_InitTick+0xac>)
 800c3fa:	f7fb fd85 	bl	8007f08 <HAL_TIM_Base_Init>
 800c3fe:	4603      	mov	r3, r0
 800c400:	2b00      	cmp	r3, #0
 800c402:	d104      	bne.n	800c40e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 800c404:	4806      	ldr	r0, [pc, #24]	; (800c420 <HAL_InitTick+0xac>)
 800c406:	f7fb fdcf 	bl	8007fa8 <HAL_TIM_Base_Start_IT>
 800c40a:	4603      	mov	r3, r0
 800c40c:	e000      	b.n	800c410 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800c40e:	2301      	movs	r3, #1
}
 800c410:	4618      	mov	r0, r3
 800c412:	3730      	adds	r7, #48	; 0x30
 800c414:	46bd      	mov	sp, r7
 800c416:	bd80      	pop	{r7, pc}
 800c418:	40023800 	.word	0x40023800
 800c41c:	431bde83 	.word	0x431bde83
 800c420:	200069e0 	.word	0x200069e0
 800c424:	40000800 	.word	0x40000800

0800c428 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800c428:	b580      	push	{r7, lr}
 800c42a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 800c42c:	f7fc ff38 	bl	80092a0 <osSystickHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800c430:	bf00      	nop
 800c432:	bd80      	pop	{r7, pc}

0800c434 <EXTI0_IRQHandler>:

/**
* @brief This function handles EXTI line0 interrupt.
*/
void EXTI0_IRQHandler(void)
{
 800c434:	b580      	push	{r7, lr}
 800c436:	b082      	sub	sp, #8
 800c438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
  BaseType_t checkIfYieldRequired;
  checkIfYieldRequired = xTaskResumeFromISR( tskEDGRGTREARHandle );
 800c43a:	4b0c      	ldr	r3, [pc, #48]	; (800c46c <EXTI0_IRQHandler+0x38>)
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	4618      	mov	r0, r3
 800c440:	f7fe fa0a 	bl	800a858 <xTaskResumeFromISR>
 800c444:	6078      	str	r0, [r7, #4]
  portYIELD_FROM_ISR( checkIfYieldRequired );
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d007      	beq.n	800c45c <EXTI0_IRQHandler+0x28>
 800c44c:	4b08      	ldr	r3, [pc, #32]	; (800c470 <EXTI0_IRQHandler+0x3c>)
 800c44e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c452:	601a      	str	r2, [r3, #0]
 800c454:	f3bf 8f4f 	dsb	sy
 800c458:	f3bf 8f6f 	isb	sy
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800c45c:	2001      	movs	r0, #1
 800c45e:	f7fa f9b7 	bl	80067d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800c462:	bf00      	nop
 800c464:	3708      	adds	r7, #8
 800c466:	46bd      	mov	sp, r7
 800c468:	bd80      	pop	{r7, pc}
 800c46a:	bf00      	nop
 800c46c:	200065d8 	.word	0x200065d8
 800c470:	e000ed04 	.word	0xe000ed04

0800c474 <EXTI2_IRQHandler>:

/**
* @brief This function handles EXTI line2 interrupt.
*/
void EXTI2_IRQHandler(void)
{
 800c474:	b580      	push	{r7, lr}
 800c476:	b082      	sub	sp, #8
 800c478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */
  BaseType_t checkIfYieldRequired;
  checkIfYieldRequired = xTaskResumeFromISR( tskEDGLFTREARHandle );
 800c47a:	4b0c      	ldr	r3, [pc, #48]	; (800c4ac <EXTI2_IRQHandler+0x38>)
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	4618      	mov	r0, r3
 800c480:	f7fe f9ea 	bl	800a858 <xTaskResumeFromISR>
 800c484:	6078      	str	r0, [r7, #4]
  portYIELD_FROM_ISR( checkIfYieldRequired );
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d007      	beq.n	800c49c <EXTI2_IRQHandler+0x28>
 800c48c:	4b08      	ldr	r3, [pc, #32]	; (800c4b0 <EXTI2_IRQHandler+0x3c>)
 800c48e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c492:	601a      	str	r2, [r3, #0]
 800c494:	f3bf 8f4f 	dsb	sy
 800c498:	f3bf 8f6f 	isb	sy
  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800c49c:	2004      	movs	r0, #4
 800c49e:	f7fa f997 	bl	80067d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800c4a2:	bf00      	nop
 800c4a4:	3708      	adds	r7, #8
 800c4a6:	46bd      	mov	sp, r7
 800c4a8:	bd80      	pop	{r7, pc}
 800c4aa:	bf00      	nop
 800c4ac:	20004a14 	.word	0x20004a14
 800c4b0:	e000ed04 	.word	0xe000ed04

0800c4b4 <EXTI3_IRQHandler>:

/**
* @brief This function handles EXTI line3 interrupt.
*/
void EXTI3_IRQHandler(void)
{
 800c4b4:	b580      	push	{r7, lr}
 800c4b6:	b082      	sub	sp, #8
 800c4b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */
  BaseType_t checkIfYieldRequired;
  checkIfYieldRequired = xTaskResumeFromISR( tskEDGLFTFRONTHandle );
 800c4ba:	4b0c      	ldr	r3, [pc, #48]	; (800c4ec <EXTI3_IRQHandler+0x38>)
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	4618      	mov	r0, r3
 800c4c0:	f7fe f9ca 	bl	800a858 <xTaskResumeFromISR>
 800c4c4:	6078      	str	r0, [r7, #4]
  portYIELD_FROM_ISR( checkIfYieldRequired );
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d007      	beq.n	800c4dc <EXTI3_IRQHandler+0x28>
 800c4cc:	4b08      	ldr	r3, [pc, #32]	; (800c4f0 <EXTI3_IRQHandler+0x3c>)
 800c4ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4d2:	601a      	str	r2, [r3, #0]
 800c4d4:	f3bf 8f4f 	dsb	sy
 800c4d8:	f3bf 8f6f 	isb	sy
  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800c4dc:	2008      	movs	r0, #8
 800c4de:	f7fa f977 	bl	80067d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800c4e2:	bf00      	nop
 800c4e4:	3708      	adds	r7, #8
 800c4e6:	46bd      	mov	sp, r7
 800c4e8:	bd80      	pop	{r7, pc}
 800c4ea:	bf00      	nop
 800c4ec:	20004a18 	.word	0x20004a18
 800c4f0:	e000ed04 	.word	0xe000ed04

0800c4f4 <EXTI4_IRQHandler>:

/**
* @brief This function handles EXTI line4 interrupt.
*/
void EXTI4_IRQHandler(void)
{
 800c4f4:	b580      	push	{r7, lr}
 800c4f6:	b082      	sub	sp, #8
 800c4f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
  BaseType_t checkIfYieldRequired;
  checkIfYieldRequired = xTaskResumeFromISR( tskEDGLFTFRONTHandle );
 800c4fa:	4b0c      	ldr	r3, [pc, #48]	; (800c52c <EXTI4_IRQHandler+0x38>)
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	4618      	mov	r0, r3
 800c500:	f7fe f9aa 	bl	800a858 <xTaskResumeFromISR>
 800c504:	6078      	str	r0, [r7, #4]
  portYIELD_FROM_ISR( checkIfYieldRequired );
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d007      	beq.n	800c51c <EXTI4_IRQHandler+0x28>
 800c50c:	4b08      	ldr	r3, [pc, #32]	; (800c530 <EXTI4_IRQHandler+0x3c>)
 800c50e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c512:	601a      	str	r2, [r3, #0]
 800c514:	f3bf 8f4f 	dsb	sy
 800c518:	f3bf 8f6f 	isb	sy
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800c51c:	2010      	movs	r0, #16
 800c51e:	f7fa f957 	bl	80067d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800c522:	bf00      	nop
 800c524:	3708      	adds	r7, #8
 800c526:	46bd      	mov	sp, r7
 800c528:	bd80      	pop	{r7, pc}
 800c52a:	bf00      	nop
 800c52c:	20004a18 	.word	0x20004a18
 800c530:	e000ed04 	.word	0xe000ed04

0800c534 <TIM4_IRQHandler>:

/**
* @brief This function handles TIM4 global interrupt.
*/
void TIM4_IRQHandler(void)
{
 800c534:	b580      	push	{r7, lr}
 800c536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800c538:	4802      	ldr	r0, [pc, #8]	; (800c544 <TIM4_IRQHandler+0x10>)
 800c53a:	f7fb fe70 	bl	800821e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800c53e:	bf00      	nop
 800c540:	bd80      	pop	{r7, pc}
 800c542:	bf00      	nop
 800c544:	200069e0 	.word	0x200069e0

0800c548 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800c548:	b480      	push	{r7}
 800c54a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800c54c:	4a16      	ldr	r2, [pc, #88]	; (800c5a8 <SystemInit+0x60>)
 800c54e:	4b16      	ldr	r3, [pc, #88]	; (800c5a8 <SystemInit+0x60>)
 800c550:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c554:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c558:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800c55c:	4a13      	ldr	r2, [pc, #76]	; (800c5ac <SystemInit+0x64>)
 800c55e:	4b13      	ldr	r3, [pc, #76]	; (800c5ac <SystemInit+0x64>)
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	f043 0301 	orr.w	r3, r3, #1
 800c566:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800c568:	4b10      	ldr	r3, [pc, #64]	; (800c5ac <SystemInit+0x64>)
 800c56a:	2200      	movs	r2, #0
 800c56c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800c56e:	4a0f      	ldr	r2, [pc, #60]	; (800c5ac <SystemInit+0x64>)
 800c570:	4b0e      	ldr	r3, [pc, #56]	; (800c5ac <SystemInit+0x64>)
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800c578:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c57c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800c57e:	4b0b      	ldr	r3, [pc, #44]	; (800c5ac <SystemInit+0x64>)
 800c580:	4a0b      	ldr	r2, [pc, #44]	; (800c5b0 <SystemInit+0x68>)
 800c582:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800c584:	4a09      	ldr	r2, [pc, #36]	; (800c5ac <SystemInit+0x64>)
 800c586:	4b09      	ldr	r3, [pc, #36]	; (800c5ac <SystemInit+0x64>)
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c58e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800c590:	4b06      	ldr	r3, [pc, #24]	; (800c5ac <SystemInit+0x64>)
 800c592:	2200      	movs	r2, #0
 800c594:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800c596:	4b04      	ldr	r3, [pc, #16]	; (800c5a8 <SystemInit+0x60>)
 800c598:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800c59c:	609a      	str	r2, [r3, #8]
#endif
}
 800c59e:	bf00      	nop
 800c5a0:	46bd      	mov	sp, r7
 800c5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a6:	4770      	bx	lr
 800c5a8:	e000ed00 	.word	0xe000ed00
 800c5ac:	40023800 	.word	0x40023800
 800c5b0:	24003010 	.word	0x24003010

0800c5b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800c5b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800c5ec <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800c5b8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800c5ba:	e003      	b.n	800c5c4 <LoopCopyDataInit>

0800c5bc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800c5bc:	4b0c      	ldr	r3, [pc, #48]	; (800c5f0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800c5be:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800c5c0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800c5c2:	3104      	adds	r1, #4

0800c5c4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800c5c4:	480b      	ldr	r0, [pc, #44]	; (800c5f4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800c5c6:	4b0c      	ldr	r3, [pc, #48]	; (800c5f8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800c5c8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800c5ca:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800c5cc:	d3f6      	bcc.n	800c5bc <CopyDataInit>
  ldr  r2, =_sbss
 800c5ce:	4a0b      	ldr	r2, [pc, #44]	; (800c5fc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800c5d0:	e002      	b.n	800c5d8 <LoopFillZerobss>

0800c5d2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800c5d2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800c5d4:	f842 3b04 	str.w	r3, [r2], #4

0800c5d8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800c5d8:	4b09      	ldr	r3, [pc, #36]	; (800c600 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800c5da:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800c5dc:	d3f9      	bcc.n	800c5d2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800c5de:	f7ff ffb3 	bl	800c548 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800c5e2:	f000 f811 	bl	800c608 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800c5e6:	f7fe ff1d 	bl	800b424 <main>
  bx  lr    
 800c5ea:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800c5ec:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 800c5f0:	0800d18c 	.word	0x0800d18c
  ldr  r0, =_sdata
 800c5f4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800c5f8:	200000a0 	.word	0x200000a0
  ldr  r2, =_sbss
 800c5fc:	200000a0 	.word	0x200000a0
  ldr  r3, = _ebss
 800c600:	20006a20 	.word	0x20006a20

0800c604 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800c604:	e7fe      	b.n	800c604 <ADC_IRQHandler>
	...

0800c608 <__libc_init_array>:
 800c608:	b570      	push	{r4, r5, r6, lr}
 800c60a:	4e0d      	ldr	r6, [pc, #52]	; (800c640 <__libc_init_array+0x38>)
 800c60c:	4c0d      	ldr	r4, [pc, #52]	; (800c644 <__libc_init_array+0x3c>)
 800c60e:	1ba4      	subs	r4, r4, r6
 800c610:	10a4      	asrs	r4, r4, #2
 800c612:	2500      	movs	r5, #0
 800c614:	42a5      	cmp	r5, r4
 800c616:	d109      	bne.n	800c62c <__libc_init_array+0x24>
 800c618:	4e0b      	ldr	r6, [pc, #44]	; (800c648 <__libc_init_array+0x40>)
 800c61a:	4c0c      	ldr	r4, [pc, #48]	; (800c64c <__libc_init_array+0x44>)
 800c61c:	f000 fc60 	bl	800cee0 <_init>
 800c620:	1ba4      	subs	r4, r4, r6
 800c622:	10a4      	asrs	r4, r4, #2
 800c624:	2500      	movs	r5, #0
 800c626:	42a5      	cmp	r5, r4
 800c628:	d105      	bne.n	800c636 <__libc_init_array+0x2e>
 800c62a:	bd70      	pop	{r4, r5, r6, pc}
 800c62c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c630:	4798      	blx	r3
 800c632:	3501      	adds	r5, #1
 800c634:	e7ee      	b.n	800c614 <__libc_init_array+0xc>
 800c636:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c63a:	4798      	blx	r3
 800c63c:	3501      	adds	r5, #1
 800c63e:	e7f2      	b.n	800c626 <__libc_init_array+0x1e>
 800c640:	0800d184 	.word	0x0800d184
 800c644:	0800d184 	.word	0x0800d184
 800c648:	0800d184 	.word	0x0800d184
 800c64c:	0800d188 	.word	0x0800d188

0800c650 <memcpy>:
 800c650:	b510      	push	{r4, lr}
 800c652:	1e43      	subs	r3, r0, #1
 800c654:	440a      	add	r2, r1
 800c656:	4291      	cmp	r1, r2
 800c658:	d100      	bne.n	800c65c <memcpy+0xc>
 800c65a:	bd10      	pop	{r4, pc}
 800c65c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c660:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c664:	e7f7      	b.n	800c656 <memcpy+0x6>

0800c666 <memset>:
 800c666:	4402      	add	r2, r0
 800c668:	4603      	mov	r3, r0
 800c66a:	4293      	cmp	r3, r2
 800c66c:	d100      	bne.n	800c670 <memset+0xa>
 800c66e:	4770      	bx	lr
 800c670:	f803 1b01 	strb.w	r1, [r3], #1
 800c674:	e7f9      	b.n	800c66a <memset+0x4>
	...

0800c678 <siprintf>:
 800c678:	b40e      	push	{r1, r2, r3}
 800c67a:	b500      	push	{lr}
 800c67c:	b09c      	sub	sp, #112	; 0x70
 800c67e:	f44f 7102 	mov.w	r1, #520	; 0x208
 800c682:	ab1d      	add	r3, sp, #116	; 0x74
 800c684:	f8ad 1014 	strh.w	r1, [sp, #20]
 800c688:	9002      	str	r0, [sp, #8]
 800c68a:	9006      	str	r0, [sp, #24]
 800c68c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c690:	480a      	ldr	r0, [pc, #40]	; (800c6bc <siprintf+0x44>)
 800c692:	9104      	str	r1, [sp, #16]
 800c694:	9107      	str	r1, [sp, #28]
 800c696:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800c69a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c69e:	f8ad 1016 	strh.w	r1, [sp, #22]
 800c6a2:	6800      	ldr	r0, [r0, #0]
 800c6a4:	9301      	str	r3, [sp, #4]
 800c6a6:	a902      	add	r1, sp, #8
 800c6a8:	f000 f87a 	bl	800c7a0 <_svfiprintf_r>
 800c6ac:	9b02      	ldr	r3, [sp, #8]
 800c6ae:	2200      	movs	r2, #0
 800c6b0:	701a      	strb	r2, [r3, #0]
 800c6b2:	b01c      	add	sp, #112	; 0x70
 800c6b4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c6b8:	b003      	add	sp, #12
 800c6ba:	4770      	bx	lr
 800c6bc:	2000003c 	.word	0x2000003c

0800c6c0 <strncpy>:
 800c6c0:	b570      	push	{r4, r5, r6, lr}
 800c6c2:	4604      	mov	r4, r0
 800c6c4:	b902      	cbnz	r2, 800c6c8 <strncpy+0x8>
 800c6c6:	bd70      	pop	{r4, r5, r6, pc}
 800c6c8:	4623      	mov	r3, r4
 800c6ca:	f811 5b01 	ldrb.w	r5, [r1], #1
 800c6ce:	f803 5b01 	strb.w	r5, [r3], #1
 800c6d2:	1e56      	subs	r6, r2, #1
 800c6d4:	b91d      	cbnz	r5, 800c6de <strncpy+0x1e>
 800c6d6:	4414      	add	r4, r2
 800c6d8:	42a3      	cmp	r3, r4
 800c6da:	d103      	bne.n	800c6e4 <strncpy+0x24>
 800c6dc:	bd70      	pop	{r4, r5, r6, pc}
 800c6de:	461c      	mov	r4, r3
 800c6e0:	4632      	mov	r2, r6
 800c6e2:	e7ef      	b.n	800c6c4 <strncpy+0x4>
 800c6e4:	f803 5b01 	strb.w	r5, [r3], #1
 800c6e8:	e7f6      	b.n	800c6d8 <strncpy+0x18>

0800c6ea <__ssputs_r>:
 800c6ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c6ee:	688e      	ldr	r6, [r1, #8]
 800c6f0:	429e      	cmp	r6, r3
 800c6f2:	4682      	mov	sl, r0
 800c6f4:	460c      	mov	r4, r1
 800c6f6:	4691      	mov	r9, r2
 800c6f8:	4698      	mov	r8, r3
 800c6fa:	d835      	bhi.n	800c768 <__ssputs_r+0x7e>
 800c6fc:	898a      	ldrh	r2, [r1, #12]
 800c6fe:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c702:	d031      	beq.n	800c768 <__ssputs_r+0x7e>
 800c704:	6825      	ldr	r5, [r4, #0]
 800c706:	6909      	ldr	r1, [r1, #16]
 800c708:	1a6f      	subs	r7, r5, r1
 800c70a:	6965      	ldr	r5, [r4, #20]
 800c70c:	2302      	movs	r3, #2
 800c70e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c712:	fb95 f5f3 	sdiv	r5, r5, r3
 800c716:	f108 0301 	add.w	r3, r8, #1
 800c71a:	443b      	add	r3, r7
 800c71c:	429d      	cmp	r5, r3
 800c71e:	bf38      	it	cc
 800c720:	461d      	movcc	r5, r3
 800c722:	0553      	lsls	r3, r2, #21
 800c724:	d531      	bpl.n	800c78a <__ssputs_r+0xa0>
 800c726:	4629      	mov	r1, r5
 800c728:	f000 fb2c 	bl	800cd84 <_malloc_r>
 800c72c:	4606      	mov	r6, r0
 800c72e:	b950      	cbnz	r0, 800c746 <__ssputs_r+0x5c>
 800c730:	230c      	movs	r3, #12
 800c732:	f8ca 3000 	str.w	r3, [sl]
 800c736:	89a3      	ldrh	r3, [r4, #12]
 800c738:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c73c:	81a3      	strh	r3, [r4, #12]
 800c73e:	f04f 30ff 	mov.w	r0, #4294967295
 800c742:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c746:	463a      	mov	r2, r7
 800c748:	6921      	ldr	r1, [r4, #16]
 800c74a:	f7ff ff81 	bl	800c650 <memcpy>
 800c74e:	89a3      	ldrh	r3, [r4, #12]
 800c750:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c754:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c758:	81a3      	strh	r3, [r4, #12]
 800c75a:	6126      	str	r6, [r4, #16]
 800c75c:	6165      	str	r5, [r4, #20]
 800c75e:	443e      	add	r6, r7
 800c760:	1bed      	subs	r5, r5, r7
 800c762:	6026      	str	r6, [r4, #0]
 800c764:	60a5      	str	r5, [r4, #8]
 800c766:	4646      	mov	r6, r8
 800c768:	4546      	cmp	r6, r8
 800c76a:	bf28      	it	cs
 800c76c:	4646      	movcs	r6, r8
 800c76e:	4632      	mov	r2, r6
 800c770:	4649      	mov	r1, r9
 800c772:	6820      	ldr	r0, [r4, #0]
 800c774:	f000 fa9e 	bl	800ccb4 <memmove>
 800c778:	68a3      	ldr	r3, [r4, #8]
 800c77a:	1b9b      	subs	r3, r3, r6
 800c77c:	60a3      	str	r3, [r4, #8]
 800c77e:	6823      	ldr	r3, [r4, #0]
 800c780:	441e      	add	r6, r3
 800c782:	6026      	str	r6, [r4, #0]
 800c784:	2000      	movs	r0, #0
 800c786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c78a:	462a      	mov	r2, r5
 800c78c:	f000 fb58 	bl	800ce40 <_realloc_r>
 800c790:	4606      	mov	r6, r0
 800c792:	2800      	cmp	r0, #0
 800c794:	d1e1      	bne.n	800c75a <__ssputs_r+0x70>
 800c796:	6921      	ldr	r1, [r4, #16]
 800c798:	4650      	mov	r0, sl
 800c79a:	f000 faa5 	bl	800cce8 <_free_r>
 800c79e:	e7c7      	b.n	800c730 <__ssputs_r+0x46>

0800c7a0 <_svfiprintf_r>:
 800c7a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7a4:	b09d      	sub	sp, #116	; 0x74
 800c7a6:	4680      	mov	r8, r0
 800c7a8:	9303      	str	r3, [sp, #12]
 800c7aa:	898b      	ldrh	r3, [r1, #12]
 800c7ac:	061c      	lsls	r4, r3, #24
 800c7ae:	460d      	mov	r5, r1
 800c7b0:	4616      	mov	r6, r2
 800c7b2:	d50f      	bpl.n	800c7d4 <_svfiprintf_r+0x34>
 800c7b4:	690b      	ldr	r3, [r1, #16]
 800c7b6:	b96b      	cbnz	r3, 800c7d4 <_svfiprintf_r+0x34>
 800c7b8:	2140      	movs	r1, #64	; 0x40
 800c7ba:	f000 fae3 	bl	800cd84 <_malloc_r>
 800c7be:	6028      	str	r0, [r5, #0]
 800c7c0:	6128      	str	r0, [r5, #16]
 800c7c2:	b928      	cbnz	r0, 800c7d0 <_svfiprintf_r+0x30>
 800c7c4:	230c      	movs	r3, #12
 800c7c6:	f8c8 3000 	str.w	r3, [r8]
 800c7ca:	f04f 30ff 	mov.w	r0, #4294967295
 800c7ce:	e0c5      	b.n	800c95c <_svfiprintf_r+0x1bc>
 800c7d0:	2340      	movs	r3, #64	; 0x40
 800c7d2:	616b      	str	r3, [r5, #20]
 800c7d4:	2300      	movs	r3, #0
 800c7d6:	9309      	str	r3, [sp, #36]	; 0x24
 800c7d8:	2320      	movs	r3, #32
 800c7da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c7de:	2330      	movs	r3, #48	; 0x30
 800c7e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c7e4:	f04f 0b01 	mov.w	fp, #1
 800c7e8:	4637      	mov	r7, r6
 800c7ea:	463c      	mov	r4, r7
 800c7ec:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d13c      	bne.n	800c86e <_svfiprintf_r+0xce>
 800c7f4:	ebb7 0a06 	subs.w	sl, r7, r6
 800c7f8:	d00b      	beq.n	800c812 <_svfiprintf_r+0x72>
 800c7fa:	4653      	mov	r3, sl
 800c7fc:	4632      	mov	r2, r6
 800c7fe:	4629      	mov	r1, r5
 800c800:	4640      	mov	r0, r8
 800c802:	f7ff ff72 	bl	800c6ea <__ssputs_r>
 800c806:	3001      	adds	r0, #1
 800c808:	f000 80a3 	beq.w	800c952 <_svfiprintf_r+0x1b2>
 800c80c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c80e:	4453      	add	r3, sl
 800c810:	9309      	str	r3, [sp, #36]	; 0x24
 800c812:	783b      	ldrb	r3, [r7, #0]
 800c814:	2b00      	cmp	r3, #0
 800c816:	f000 809c 	beq.w	800c952 <_svfiprintf_r+0x1b2>
 800c81a:	2300      	movs	r3, #0
 800c81c:	f04f 32ff 	mov.w	r2, #4294967295
 800c820:	9304      	str	r3, [sp, #16]
 800c822:	9307      	str	r3, [sp, #28]
 800c824:	9205      	str	r2, [sp, #20]
 800c826:	9306      	str	r3, [sp, #24]
 800c828:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c82c:	931a      	str	r3, [sp, #104]	; 0x68
 800c82e:	2205      	movs	r2, #5
 800c830:	7821      	ldrb	r1, [r4, #0]
 800c832:	4850      	ldr	r0, [pc, #320]	; (800c974 <_svfiprintf_r+0x1d4>)
 800c834:	f7f3 fcdc 	bl	80001f0 <memchr>
 800c838:	1c67      	adds	r7, r4, #1
 800c83a:	9b04      	ldr	r3, [sp, #16]
 800c83c:	b9d8      	cbnz	r0, 800c876 <_svfiprintf_r+0xd6>
 800c83e:	06d9      	lsls	r1, r3, #27
 800c840:	bf44      	itt	mi
 800c842:	2220      	movmi	r2, #32
 800c844:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c848:	071a      	lsls	r2, r3, #28
 800c84a:	bf44      	itt	mi
 800c84c:	222b      	movmi	r2, #43	; 0x2b
 800c84e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c852:	7822      	ldrb	r2, [r4, #0]
 800c854:	2a2a      	cmp	r2, #42	; 0x2a
 800c856:	d016      	beq.n	800c886 <_svfiprintf_r+0xe6>
 800c858:	9a07      	ldr	r2, [sp, #28]
 800c85a:	2100      	movs	r1, #0
 800c85c:	200a      	movs	r0, #10
 800c85e:	4627      	mov	r7, r4
 800c860:	3401      	adds	r4, #1
 800c862:	783b      	ldrb	r3, [r7, #0]
 800c864:	3b30      	subs	r3, #48	; 0x30
 800c866:	2b09      	cmp	r3, #9
 800c868:	d951      	bls.n	800c90e <_svfiprintf_r+0x16e>
 800c86a:	b1c9      	cbz	r1, 800c8a0 <_svfiprintf_r+0x100>
 800c86c:	e011      	b.n	800c892 <_svfiprintf_r+0xf2>
 800c86e:	2b25      	cmp	r3, #37	; 0x25
 800c870:	d0c0      	beq.n	800c7f4 <_svfiprintf_r+0x54>
 800c872:	4627      	mov	r7, r4
 800c874:	e7b9      	b.n	800c7ea <_svfiprintf_r+0x4a>
 800c876:	4a3f      	ldr	r2, [pc, #252]	; (800c974 <_svfiprintf_r+0x1d4>)
 800c878:	1a80      	subs	r0, r0, r2
 800c87a:	fa0b f000 	lsl.w	r0, fp, r0
 800c87e:	4318      	orrs	r0, r3
 800c880:	9004      	str	r0, [sp, #16]
 800c882:	463c      	mov	r4, r7
 800c884:	e7d3      	b.n	800c82e <_svfiprintf_r+0x8e>
 800c886:	9a03      	ldr	r2, [sp, #12]
 800c888:	1d11      	adds	r1, r2, #4
 800c88a:	6812      	ldr	r2, [r2, #0]
 800c88c:	9103      	str	r1, [sp, #12]
 800c88e:	2a00      	cmp	r2, #0
 800c890:	db01      	blt.n	800c896 <_svfiprintf_r+0xf6>
 800c892:	9207      	str	r2, [sp, #28]
 800c894:	e004      	b.n	800c8a0 <_svfiprintf_r+0x100>
 800c896:	4252      	negs	r2, r2
 800c898:	f043 0302 	orr.w	r3, r3, #2
 800c89c:	9207      	str	r2, [sp, #28]
 800c89e:	9304      	str	r3, [sp, #16]
 800c8a0:	783b      	ldrb	r3, [r7, #0]
 800c8a2:	2b2e      	cmp	r3, #46	; 0x2e
 800c8a4:	d10e      	bne.n	800c8c4 <_svfiprintf_r+0x124>
 800c8a6:	787b      	ldrb	r3, [r7, #1]
 800c8a8:	2b2a      	cmp	r3, #42	; 0x2a
 800c8aa:	f107 0101 	add.w	r1, r7, #1
 800c8ae:	d132      	bne.n	800c916 <_svfiprintf_r+0x176>
 800c8b0:	9b03      	ldr	r3, [sp, #12]
 800c8b2:	1d1a      	adds	r2, r3, #4
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	9203      	str	r2, [sp, #12]
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	bfb8      	it	lt
 800c8bc:	f04f 33ff 	movlt.w	r3, #4294967295
 800c8c0:	3702      	adds	r7, #2
 800c8c2:	9305      	str	r3, [sp, #20]
 800c8c4:	4c2c      	ldr	r4, [pc, #176]	; (800c978 <_svfiprintf_r+0x1d8>)
 800c8c6:	7839      	ldrb	r1, [r7, #0]
 800c8c8:	2203      	movs	r2, #3
 800c8ca:	4620      	mov	r0, r4
 800c8cc:	f7f3 fc90 	bl	80001f0 <memchr>
 800c8d0:	b138      	cbz	r0, 800c8e2 <_svfiprintf_r+0x142>
 800c8d2:	2340      	movs	r3, #64	; 0x40
 800c8d4:	1b00      	subs	r0, r0, r4
 800c8d6:	fa03 f000 	lsl.w	r0, r3, r0
 800c8da:	9b04      	ldr	r3, [sp, #16]
 800c8dc:	4303      	orrs	r3, r0
 800c8de:	9304      	str	r3, [sp, #16]
 800c8e0:	3701      	adds	r7, #1
 800c8e2:	7839      	ldrb	r1, [r7, #0]
 800c8e4:	4825      	ldr	r0, [pc, #148]	; (800c97c <_svfiprintf_r+0x1dc>)
 800c8e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c8ea:	2206      	movs	r2, #6
 800c8ec:	1c7e      	adds	r6, r7, #1
 800c8ee:	f7f3 fc7f 	bl	80001f0 <memchr>
 800c8f2:	2800      	cmp	r0, #0
 800c8f4:	d035      	beq.n	800c962 <_svfiprintf_r+0x1c2>
 800c8f6:	4b22      	ldr	r3, [pc, #136]	; (800c980 <_svfiprintf_r+0x1e0>)
 800c8f8:	b9fb      	cbnz	r3, 800c93a <_svfiprintf_r+0x19a>
 800c8fa:	9b03      	ldr	r3, [sp, #12]
 800c8fc:	3307      	adds	r3, #7
 800c8fe:	f023 0307 	bic.w	r3, r3, #7
 800c902:	3308      	adds	r3, #8
 800c904:	9303      	str	r3, [sp, #12]
 800c906:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c908:	444b      	add	r3, r9
 800c90a:	9309      	str	r3, [sp, #36]	; 0x24
 800c90c:	e76c      	b.n	800c7e8 <_svfiprintf_r+0x48>
 800c90e:	fb00 3202 	mla	r2, r0, r2, r3
 800c912:	2101      	movs	r1, #1
 800c914:	e7a3      	b.n	800c85e <_svfiprintf_r+0xbe>
 800c916:	2300      	movs	r3, #0
 800c918:	9305      	str	r3, [sp, #20]
 800c91a:	4618      	mov	r0, r3
 800c91c:	240a      	movs	r4, #10
 800c91e:	460f      	mov	r7, r1
 800c920:	3101      	adds	r1, #1
 800c922:	783a      	ldrb	r2, [r7, #0]
 800c924:	3a30      	subs	r2, #48	; 0x30
 800c926:	2a09      	cmp	r2, #9
 800c928:	d903      	bls.n	800c932 <_svfiprintf_r+0x192>
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d0ca      	beq.n	800c8c4 <_svfiprintf_r+0x124>
 800c92e:	9005      	str	r0, [sp, #20]
 800c930:	e7c8      	b.n	800c8c4 <_svfiprintf_r+0x124>
 800c932:	fb04 2000 	mla	r0, r4, r0, r2
 800c936:	2301      	movs	r3, #1
 800c938:	e7f1      	b.n	800c91e <_svfiprintf_r+0x17e>
 800c93a:	ab03      	add	r3, sp, #12
 800c93c:	9300      	str	r3, [sp, #0]
 800c93e:	462a      	mov	r2, r5
 800c940:	4b10      	ldr	r3, [pc, #64]	; (800c984 <_svfiprintf_r+0x1e4>)
 800c942:	a904      	add	r1, sp, #16
 800c944:	4640      	mov	r0, r8
 800c946:	f3af 8000 	nop.w
 800c94a:	f1b0 3fff 	cmp.w	r0, #4294967295
 800c94e:	4681      	mov	r9, r0
 800c950:	d1d9      	bne.n	800c906 <_svfiprintf_r+0x166>
 800c952:	89ab      	ldrh	r3, [r5, #12]
 800c954:	065b      	lsls	r3, r3, #25
 800c956:	f53f af38 	bmi.w	800c7ca <_svfiprintf_r+0x2a>
 800c95a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c95c:	b01d      	add	sp, #116	; 0x74
 800c95e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c962:	ab03      	add	r3, sp, #12
 800c964:	9300      	str	r3, [sp, #0]
 800c966:	462a      	mov	r2, r5
 800c968:	4b06      	ldr	r3, [pc, #24]	; (800c984 <_svfiprintf_r+0x1e4>)
 800c96a:	a904      	add	r1, sp, #16
 800c96c:	4640      	mov	r0, r8
 800c96e:	f000 f881 	bl	800ca74 <_printf_i>
 800c972:	e7ea      	b.n	800c94a <_svfiprintf_r+0x1aa>
 800c974:	0800d148 	.word	0x0800d148
 800c978:	0800d14e 	.word	0x0800d14e
 800c97c:	0800d152 	.word	0x0800d152
 800c980:	00000000 	.word	0x00000000
 800c984:	0800c6eb 	.word	0x0800c6eb

0800c988 <_printf_common>:
 800c988:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c98c:	4691      	mov	r9, r2
 800c98e:	461f      	mov	r7, r3
 800c990:	688a      	ldr	r2, [r1, #8]
 800c992:	690b      	ldr	r3, [r1, #16]
 800c994:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c998:	4293      	cmp	r3, r2
 800c99a:	bfb8      	it	lt
 800c99c:	4613      	movlt	r3, r2
 800c99e:	f8c9 3000 	str.w	r3, [r9]
 800c9a2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c9a6:	4606      	mov	r6, r0
 800c9a8:	460c      	mov	r4, r1
 800c9aa:	b112      	cbz	r2, 800c9b2 <_printf_common+0x2a>
 800c9ac:	3301      	adds	r3, #1
 800c9ae:	f8c9 3000 	str.w	r3, [r9]
 800c9b2:	6823      	ldr	r3, [r4, #0]
 800c9b4:	0699      	lsls	r1, r3, #26
 800c9b6:	bf42      	ittt	mi
 800c9b8:	f8d9 3000 	ldrmi.w	r3, [r9]
 800c9bc:	3302      	addmi	r3, #2
 800c9be:	f8c9 3000 	strmi.w	r3, [r9]
 800c9c2:	6825      	ldr	r5, [r4, #0]
 800c9c4:	f015 0506 	ands.w	r5, r5, #6
 800c9c8:	d107      	bne.n	800c9da <_printf_common+0x52>
 800c9ca:	f104 0a19 	add.w	sl, r4, #25
 800c9ce:	68e3      	ldr	r3, [r4, #12]
 800c9d0:	f8d9 2000 	ldr.w	r2, [r9]
 800c9d4:	1a9b      	subs	r3, r3, r2
 800c9d6:	429d      	cmp	r5, r3
 800c9d8:	db29      	blt.n	800ca2e <_printf_common+0xa6>
 800c9da:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800c9de:	6822      	ldr	r2, [r4, #0]
 800c9e0:	3300      	adds	r3, #0
 800c9e2:	bf18      	it	ne
 800c9e4:	2301      	movne	r3, #1
 800c9e6:	0692      	lsls	r2, r2, #26
 800c9e8:	d42e      	bmi.n	800ca48 <_printf_common+0xc0>
 800c9ea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c9ee:	4639      	mov	r1, r7
 800c9f0:	4630      	mov	r0, r6
 800c9f2:	47c0      	blx	r8
 800c9f4:	3001      	adds	r0, #1
 800c9f6:	d021      	beq.n	800ca3c <_printf_common+0xb4>
 800c9f8:	6823      	ldr	r3, [r4, #0]
 800c9fa:	68e5      	ldr	r5, [r4, #12]
 800c9fc:	f8d9 2000 	ldr.w	r2, [r9]
 800ca00:	f003 0306 	and.w	r3, r3, #6
 800ca04:	2b04      	cmp	r3, #4
 800ca06:	bf08      	it	eq
 800ca08:	1aad      	subeq	r5, r5, r2
 800ca0a:	68a3      	ldr	r3, [r4, #8]
 800ca0c:	6922      	ldr	r2, [r4, #16]
 800ca0e:	bf0c      	ite	eq
 800ca10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ca14:	2500      	movne	r5, #0
 800ca16:	4293      	cmp	r3, r2
 800ca18:	bfc4      	itt	gt
 800ca1a:	1a9b      	subgt	r3, r3, r2
 800ca1c:	18ed      	addgt	r5, r5, r3
 800ca1e:	f04f 0900 	mov.w	r9, #0
 800ca22:	341a      	adds	r4, #26
 800ca24:	454d      	cmp	r5, r9
 800ca26:	d11b      	bne.n	800ca60 <_printf_common+0xd8>
 800ca28:	2000      	movs	r0, #0
 800ca2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca2e:	2301      	movs	r3, #1
 800ca30:	4652      	mov	r2, sl
 800ca32:	4639      	mov	r1, r7
 800ca34:	4630      	mov	r0, r6
 800ca36:	47c0      	blx	r8
 800ca38:	3001      	adds	r0, #1
 800ca3a:	d103      	bne.n	800ca44 <_printf_common+0xbc>
 800ca3c:	f04f 30ff 	mov.w	r0, #4294967295
 800ca40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca44:	3501      	adds	r5, #1
 800ca46:	e7c2      	b.n	800c9ce <_printf_common+0x46>
 800ca48:	18e1      	adds	r1, r4, r3
 800ca4a:	1c5a      	adds	r2, r3, #1
 800ca4c:	2030      	movs	r0, #48	; 0x30
 800ca4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ca52:	4422      	add	r2, r4
 800ca54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ca58:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ca5c:	3302      	adds	r3, #2
 800ca5e:	e7c4      	b.n	800c9ea <_printf_common+0x62>
 800ca60:	2301      	movs	r3, #1
 800ca62:	4622      	mov	r2, r4
 800ca64:	4639      	mov	r1, r7
 800ca66:	4630      	mov	r0, r6
 800ca68:	47c0      	blx	r8
 800ca6a:	3001      	adds	r0, #1
 800ca6c:	d0e6      	beq.n	800ca3c <_printf_common+0xb4>
 800ca6e:	f109 0901 	add.w	r9, r9, #1
 800ca72:	e7d7      	b.n	800ca24 <_printf_common+0x9c>

0800ca74 <_printf_i>:
 800ca74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ca78:	4617      	mov	r7, r2
 800ca7a:	7e0a      	ldrb	r2, [r1, #24]
 800ca7c:	b085      	sub	sp, #20
 800ca7e:	2a6e      	cmp	r2, #110	; 0x6e
 800ca80:	4698      	mov	r8, r3
 800ca82:	4606      	mov	r6, r0
 800ca84:	460c      	mov	r4, r1
 800ca86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ca88:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800ca8c:	f000 80bc 	beq.w	800cc08 <_printf_i+0x194>
 800ca90:	d81a      	bhi.n	800cac8 <_printf_i+0x54>
 800ca92:	2a63      	cmp	r2, #99	; 0x63
 800ca94:	d02e      	beq.n	800caf4 <_printf_i+0x80>
 800ca96:	d80a      	bhi.n	800caae <_printf_i+0x3a>
 800ca98:	2a00      	cmp	r2, #0
 800ca9a:	f000 80c8 	beq.w	800cc2e <_printf_i+0x1ba>
 800ca9e:	2a58      	cmp	r2, #88	; 0x58
 800caa0:	f000 808a 	beq.w	800cbb8 <_printf_i+0x144>
 800caa4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800caa8:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800caac:	e02a      	b.n	800cb04 <_printf_i+0x90>
 800caae:	2a64      	cmp	r2, #100	; 0x64
 800cab0:	d001      	beq.n	800cab6 <_printf_i+0x42>
 800cab2:	2a69      	cmp	r2, #105	; 0x69
 800cab4:	d1f6      	bne.n	800caa4 <_printf_i+0x30>
 800cab6:	6821      	ldr	r1, [r4, #0]
 800cab8:	681a      	ldr	r2, [r3, #0]
 800caba:	f011 0f80 	tst.w	r1, #128	; 0x80
 800cabe:	d023      	beq.n	800cb08 <_printf_i+0x94>
 800cac0:	1d11      	adds	r1, r2, #4
 800cac2:	6019      	str	r1, [r3, #0]
 800cac4:	6813      	ldr	r3, [r2, #0]
 800cac6:	e027      	b.n	800cb18 <_printf_i+0xa4>
 800cac8:	2a73      	cmp	r2, #115	; 0x73
 800caca:	f000 80b4 	beq.w	800cc36 <_printf_i+0x1c2>
 800cace:	d808      	bhi.n	800cae2 <_printf_i+0x6e>
 800cad0:	2a6f      	cmp	r2, #111	; 0x6f
 800cad2:	d02a      	beq.n	800cb2a <_printf_i+0xb6>
 800cad4:	2a70      	cmp	r2, #112	; 0x70
 800cad6:	d1e5      	bne.n	800caa4 <_printf_i+0x30>
 800cad8:	680a      	ldr	r2, [r1, #0]
 800cada:	f042 0220 	orr.w	r2, r2, #32
 800cade:	600a      	str	r2, [r1, #0]
 800cae0:	e003      	b.n	800caea <_printf_i+0x76>
 800cae2:	2a75      	cmp	r2, #117	; 0x75
 800cae4:	d021      	beq.n	800cb2a <_printf_i+0xb6>
 800cae6:	2a78      	cmp	r2, #120	; 0x78
 800cae8:	d1dc      	bne.n	800caa4 <_printf_i+0x30>
 800caea:	2278      	movs	r2, #120	; 0x78
 800caec:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800caf0:	496e      	ldr	r1, [pc, #440]	; (800ccac <_printf_i+0x238>)
 800caf2:	e064      	b.n	800cbbe <_printf_i+0x14a>
 800caf4:	681a      	ldr	r2, [r3, #0]
 800caf6:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800cafa:	1d11      	adds	r1, r2, #4
 800cafc:	6019      	str	r1, [r3, #0]
 800cafe:	6813      	ldr	r3, [r2, #0]
 800cb00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cb04:	2301      	movs	r3, #1
 800cb06:	e0a3      	b.n	800cc50 <_printf_i+0x1dc>
 800cb08:	f011 0f40 	tst.w	r1, #64	; 0x40
 800cb0c:	f102 0104 	add.w	r1, r2, #4
 800cb10:	6019      	str	r1, [r3, #0]
 800cb12:	d0d7      	beq.n	800cac4 <_printf_i+0x50>
 800cb14:	f9b2 3000 	ldrsh.w	r3, [r2]
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	da03      	bge.n	800cb24 <_printf_i+0xb0>
 800cb1c:	222d      	movs	r2, #45	; 0x2d
 800cb1e:	425b      	negs	r3, r3
 800cb20:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800cb24:	4962      	ldr	r1, [pc, #392]	; (800ccb0 <_printf_i+0x23c>)
 800cb26:	220a      	movs	r2, #10
 800cb28:	e017      	b.n	800cb5a <_printf_i+0xe6>
 800cb2a:	6820      	ldr	r0, [r4, #0]
 800cb2c:	6819      	ldr	r1, [r3, #0]
 800cb2e:	f010 0f80 	tst.w	r0, #128	; 0x80
 800cb32:	d003      	beq.n	800cb3c <_printf_i+0xc8>
 800cb34:	1d08      	adds	r0, r1, #4
 800cb36:	6018      	str	r0, [r3, #0]
 800cb38:	680b      	ldr	r3, [r1, #0]
 800cb3a:	e006      	b.n	800cb4a <_printf_i+0xd6>
 800cb3c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800cb40:	f101 0004 	add.w	r0, r1, #4
 800cb44:	6018      	str	r0, [r3, #0]
 800cb46:	d0f7      	beq.n	800cb38 <_printf_i+0xc4>
 800cb48:	880b      	ldrh	r3, [r1, #0]
 800cb4a:	4959      	ldr	r1, [pc, #356]	; (800ccb0 <_printf_i+0x23c>)
 800cb4c:	2a6f      	cmp	r2, #111	; 0x6f
 800cb4e:	bf14      	ite	ne
 800cb50:	220a      	movne	r2, #10
 800cb52:	2208      	moveq	r2, #8
 800cb54:	2000      	movs	r0, #0
 800cb56:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800cb5a:	6865      	ldr	r5, [r4, #4]
 800cb5c:	60a5      	str	r5, [r4, #8]
 800cb5e:	2d00      	cmp	r5, #0
 800cb60:	f2c0 809c 	blt.w	800cc9c <_printf_i+0x228>
 800cb64:	6820      	ldr	r0, [r4, #0]
 800cb66:	f020 0004 	bic.w	r0, r0, #4
 800cb6a:	6020      	str	r0, [r4, #0]
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d13f      	bne.n	800cbf0 <_printf_i+0x17c>
 800cb70:	2d00      	cmp	r5, #0
 800cb72:	f040 8095 	bne.w	800cca0 <_printf_i+0x22c>
 800cb76:	4675      	mov	r5, lr
 800cb78:	2a08      	cmp	r2, #8
 800cb7a:	d10b      	bne.n	800cb94 <_printf_i+0x120>
 800cb7c:	6823      	ldr	r3, [r4, #0]
 800cb7e:	07da      	lsls	r2, r3, #31
 800cb80:	d508      	bpl.n	800cb94 <_printf_i+0x120>
 800cb82:	6923      	ldr	r3, [r4, #16]
 800cb84:	6862      	ldr	r2, [r4, #4]
 800cb86:	429a      	cmp	r2, r3
 800cb88:	bfde      	ittt	le
 800cb8a:	2330      	movle	r3, #48	; 0x30
 800cb8c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cb90:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cb94:	ebae 0305 	sub.w	r3, lr, r5
 800cb98:	6123      	str	r3, [r4, #16]
 800cb9a:	f8cd 8000 	str.w	r8, [sp]
 800cb9e:	463b      	mov	r3, r7
 800cba0:	aa03      	add	r2, sp, #12
 800cba2:	4621      	mov	r1, r4
 800cba4:	4630      	mov	r0, r6
 800cba6:	f7ff feef 	bl	800c988 <_printf_common>
 800cbaa:	3001      	adds	r0, #1
 800cbac:	d155      	bne.n	800cc5a <_printf_i+0x1e6>
 800cbae:	f04f 30ff 	mov.w	r0, #4294967295
 800cbb2:	b005      	add	sp, #20
 800cbb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cbb8:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 800cbbc:	493c      	ldr	r1, [pc, #240]	; (800ccb0 <_printf_i+0x23c>)
 800cbbe:	6822      	ldr	r2, [r4, #0]
 800cbc0:	6818      	ldr	r0, [r3, #0]
 800cbc2:	f012 0f80 	tst.w	r2, #128	; 0x80
 800cbc6:	f100 0504 	add.w	r5, r0, #4
 800cbca:	601d      	str	r5, [r3, #0]
 800cbcc:	d001      	beq.n	800cbd2 <_printf_i+0x15e>
 800cbce:	6803      	ldr	r3, [r0, #0]
 800cbd0:	e002      	b.n	800cbd8 <_printf_i+0x164>
 800cbd2:	0655      	lsls	r5, r2, #25
 800cbd4:	d5fb      	bpl.n	800cbce <_printf_i+0x15a>
 800cbd6:	8803      	ldrh	r3, [r0, #0]
 800cbd8:	07d0      	lsls	r0, r2, #31
 800cbda:	bf44      	itt	mi
 800cbdc:	f042 0220 	orrmi.w	r2, r2, #32
 800cbe0:	6022      	strmi	r2, [r4, #0]
 800cbe2:	b91b      	cbnz	r3, 800cbec <_printf_i+0x178>
 800cbe4:	6822      	ldr	r2, [r4, #0]
 800cbe6:	f022 0220 	bic.w	r2, r2, #32
 800cbea:	6022      	str	r2, [r4, #0]
 800cbec:	2210      	movs	r2, #16
 800cbee:	e7b1      	b.n	800cb54 <_printf_i+0xe0>
 800cbf0:	4675      	mov	r5, lr
 800cbf2:	fbb3 f0f2 	udiv	r0, r3, r2
 800cbf6:	fb02 3310 	mls	r3, r2, r0, r3
 800cbfa:	5ccb      	ldrb	r3, [r1, r3]
 800cbfc:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800cc00:	4603      	mov	r3, r0
 800cc02:	2800      	cmp	r0, #0
 800cc04:	d1f5      	bne.n	800cbf2 <_printf_i+0x17e>
 800cc06:	e7b7      	b.n	800cb78 <_printf_i+0x104>
 800cc08:	6808      	ldr	r0, [r1, #0]
 800cc0a:	681a      	ldr	r2, [r3, #0]
 800cc0c:	6949      	ldr	r1, [r1, #20]
 800cc0e:	f010 0f80 	tst.w	r0, #128	; 0x80
 800cc12:	d004      	beq.n	800cc1e <_printf_i+0x1aa>
 800cc14:	1d10      	adds	r0, r2, #4
 800cc16:	6018      	str	r0, [r3, #0]
 800cc18:	6813      	ldr	r3, [r2, #0]
 800cc1a:	6019      	str	r1, [r3, #0]
 800cc1c:	e007      	b.n	800cc2e <_printf_i+0x1ba>
 800cc1e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800cc22:	f102 0004 	add.w	r0, r2, #4
 800cc26:	6018      	str	r0, [r3, #0]
 800cc28:	6813      	ldr	r3, [r2, #0]
 800cc2a:	d0f6      	beq.n	800cc1a <_printf_i+0x1a6>
 800cc2c:	8019      	strh	r1, [r3, #0]
 800cc2e:	2300      	movs	r3, #0
 800cc30:	6123      	str	r3, [r4, #16]
 800cc32:	4675      	mov	r5, lr
 800cc34:	e7b1      	b.n	800cb9a <_printf_i+0x126>
 800cc36:	681a      	ldr	r2, [r3, #0]
 800cc38:	1d11      	adds	r1, r2, #4
 800cc3a:	6019      	str	r1, [r3, #0]
 800cc3c:	6815      	ldr	r5, [r2, #0]
 800cc3e:	6862      	ldr	r2, [r4, #4]
 800cc40:	2100      	movs	r1, #0
 800cc42:	4628      	mov	r0, r5
 800cc44:	f7f3 fad4 	bl	80001f0 <memchr>
 800cc48:	b108      	cbz	r0, 800cc4e <_printf_i+0x1da>
 800cc4a:	1b40      	subs	r0, r0, r5
 800cc4c:	6060      	str	r0, [r4, #4]
 800cc4e:	6863      	ldr	r3, [r4, #4]
 800cc50:	6123      	str	r3, [r4, #16]
 800cc52:	2300      	movs	r3, #0
 800cc54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cc58:	e79f      	b.n	800cb9a <_printf_i+0x126>
 800cc5a:	6923      	ldr	r3, [r4, #16]
 800cc5c:	462a      	mov	r2, r5
 800cc5e:	4639      	mov	r1, r7
 800cc60:	4630      	mov	r0, r6
 800cc62:	47c0      	blx	r8
 800cc64:	3001      	adds	r0, #1
 800cc66:	d0a2      	beq.n	800cbae <_printf_i+0x13a>
 800cc68:	6823      	ldr	r3, [r4, #0]
 800cc6a:	079b      	lsls	r3, r3, #30
 800cc6c:	d507      	bpl.n	800cc7e <_printf_i+0x20a>
 800cc6e:	2500      	movs	r5, #0
 800cc70:	f104 0919 	add.w	r9, r4, #25
 800cc74:	68e3      	ldr	r3, [r4, #12]
 800cc76:	9a03      	ldr	r2, [sp, #12]
 800cc78:	1a9b      	subs	r3, r3, r2
 800cc7a:	429d      	cmp	r5, r3
 800cc7c:	db05      	blt.n	800cc8a <_printf_i+0x216>
 800cc7e:	68e0      	ldr	r0, [r4, #12]
 800cc80:	9b03      	ldr	r3, [sp, #12]
 800cc82:	4298      	cmp	r0, r3
 800cc84:	bfb8      	it	lt
 800cc86:	4618      	movlt	r0, r3
 800cc88:	e793      	b.n	800cbb2 <_printf_i+0x13e>
 800cc8a:	2301      	movs	r3, #1
 800cc8c:	464a      	mov	r2, r9
 800cc8e:	4639      	mov	r1, r7
 800cc90:	4630      	mov	r0, r6
 800cc92:	47c0      	blx	r8
 800cc94:	3001      	adds	r0, #1
 800cc96:	d08a      	beq.n	800cbae <_printf_i+0x13a>
 800cc98:	3501      	adds	r5, #1
 800cc9a:	e7eb      	b.n	800cc74 <_printf_i+0x200>
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d1a7      	bne.n	800cbf0 <_printf_i+0x17c>
 800cca0:	780b      	ldrb	r3, [r1, #0]
 800cca2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cca6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ccaa:	e765      	b.n	800cb78 <_printf_i+0x104>
 800ccac:	0800d16a 	.word	0x0800d16a
 800ccb0:	0800d159 	.word	0x0800d159

0800ccb4 <memmove>:
 800ccb4:	4288      	cmp	r0, r1
 800ccb6:	b510      	push	{r4, lr}
 800ccb8:	eb01 0302 	add.w	r3, r1, r2
 800ccbc:	d803      	bhi.n	800ccc6 <memmove+0x12>
 800ccbe:	1e42      	subs	r2, r0, #1
 800ccc0:	4299      	cmp	r1, r3
 800ccc2:	d10c      	bne.n	800ccde <memmove+0x2a>
 800ccc4:	bd10      	pop	{r4, pc}
 800ccc6:	4298      	cmp	r0, r3
 800ccc8:	d2f9      	bcs.n	800ccbe <memmove+0xa>
 800ccca:	1881      	adds	r1, r0, r2
 800cccc:	1ad2      	subs	r2, r2, r3
 800ccce:	42d3      	cmn	r3, r2
 800ccd0:	d100      	bne.n	800ccd4 <memmove+0x20>
 800ccd2:	bd10      	pop	{r4, pc}
 800ccd4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ccd8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800ccdc:	e7f7      	b.n	800ccce <memmove+0x1a>
 800ccde:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cce2:	f802 4f01 	strb.w	r4, [r2, #1]!
 800cce6:	e7eb      	b.n	800ccc0 <memmove+0xc>

0800cce8 <_free_r>:
 800cce8:	b538      	push	{r3, r4, r5, lr}
 800ccea:	4605      	mov	r5, r0
 800ccec:	2900      	cmp	r1, #0
 800ccee:	d045      	beq.n	800cd7c <_free_r+0x94>
 800ccf0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ccf4:	1f0c      	subs	r4, r1, #4
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	bfb8      	it	lt
 800ccfa:	18e4      	addlt	r4, r4, r3
 800ccfc:	f000 f8d6 	bl	800ceac <__malloc_lock>
 800cd00:	4a1f      	ldr	r2, [pc, #124]	; (800cd80 <_free_r+0x98>)
 800cd02:	6813      	ldr	r3, [r2, #0]
 800cd04:	4610      	mov	r0, r2
 800cd06:	b933      	cbnz	r3, 800cd16 <_free_r+0x2e>
 800cd08:	6063      	str	r3, [r4, #4]
 800cd0a:	6014      	str	r4, [r2, #0]
 800cd0c:	4628      	mov	r0, r5
 800cd0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cd12:	f000 b8cc 	b.w	800ceae <__malloc_unlock>
 800cd16:	42a3      	cmp	r3, r4
 800cd18:	d90c      	bls.n	800cd34 <_free_r+0x4c>
 800cd1a:	6821      	ldr	r1, [r4, #0]
 800cd1c:	1862      	adds	r2, r4, r1
 800cd1e:	4293      	cmp	r3, r2
 800cd20:	bf04      	itt	eq
 800cd22:	681a      	ldreq	r2, [r3, #0]
 800cd24:	685b      	ldreq	r3, [r3, #4]
 800cd26:	6063      	str	r3, [r4, #4]
 800cd28:	bf04      	itt	eq
 800cd2a:	1852      	addeq	r2, r2, r1
 800cd2c:	6022      	streq	r2, [r4, #0]
 800cd2e:	6004      	str	r4, [r0, #0]
 800cd30:	e7ec      	b.n	800cd0c <_free_r+0x24>
 800cd32:	4613      	mov	r3, r2
 800cd34:	685a      	ldr	r2, [r3, #4]
 800cd36:	b10a      	cbz	r2, 800cd3c <_free_r+0x54>
 800cd38:	42a2      	cmp	r2, r4
 800cd3a:	d9fa      	bls.n	800cd32 <_free_r+0x4a>
 800cd3c:	6819      	ldr	r1, [r3, #0]
 800cd3e:	1858      	adds	r0, r3, r1
 800cd40:	42a0      	cmp	r0, r4
 800cd42:	d10b      	bne.n	800cd5c <_free_r+0x74>
 800cd44:	6820      	ldr	r0, [r4, #0]
 800cd46:	4401      	add	r1, r0
 800cd48:	1858      	adds	r0, r3, r1
 800cd4a:	4282      	cmp	r2, r0
 800cd4c:	6019      	str	r1, [r3, #0]
 800cd4e:	d1dd      	bne.n	800cd0c <_free_r+0x24>
 800cd50:	6810      	ldr	r0, [r2, #0]
 800cd52:	6852      	ldr	r2, [r2, #4]
 800cd54:	605a      	str	r2, [r3, #4]
 800cd56:	4401      	add	r1, r0
 800cd58:	6019      	str	r1, [r3, #0]
 800cd5a:	e7d7      	b.n	800cd0c <_free_r+0x24>
 800cd5c:	d902      	bls.n	800cd64 <_free_r+0x7c>
 800cd5e:	230c      	movs	r3, #12
 800cd60:	602b      	str	r3, [r5, #0]
 800cd62:	e7d3      	b.n	800cd0c <_free_r+0x24>
 800cd64:	6820      	ldr	r0, [r4, #0]
 800cd66:	1821      	adds	r1, r4, r0
 800cd68:	428a      	cmp	r2, r1
 800cd6a:	bf04      	itt	eq
 800cd6c:	6811      	ldreq	r1, [r2, #0]
 800cd6e:	6852      	ldreq	r2, [r2, #4]
 800cd70:	6062      	str	r2, [r4, #4]
 800cd72:	bf04      	itt	eq
 800cd74:	1809      	addeq	r1, r1, r0
 800cd76:	6021      	streq	r1, [r4, #0]
 800cd78:	605c      	str	r4, [r3, #4]
 800cd7a:	e7c7      	b.n	800cd0c <_free_r+0x24>
 800cd7c:	bd38      	pop	{r3, r4, r5, pc}
 800cd7e:	bf00      	nop
 800cd80:	2000450c 	.word	0x2000450c

0800cd84 <_malloc_r>:
 800cd84:	b570      	push	{r4, r5, r6, lr}
 800cd86:	1ccd      	adds	r5, r1, #3
 800cd88:	f025 0503 	bic.w	r5, r5, #3
 800cd8c:	3508      	adds	r5, #8
 800cd8e:	2d0c      	cmp	r5, #12
 800cd90:	bf38      	it	cc
 800cd92:	250c      	movcc	r5, #12
 800cd94:	2d00      	cmp	r5, #0
 800cd96:	4606      	mov	r6, r0
 800cd98:	db01      	blt.n	800cd9e <_malloc_r+0x1a>
 800cd9a:	42a9      	cmp	r1, r5
 800cd9c:	d903      	bls.n	800cda6 <_malloc_r+0x22>
 800cd9e:	230c      	movs	r3, #12
 800cda0:	6033      	str	r3, [r6, #0]
 800cda2:	2000      	movs	r0, #0
 800cda4:	bd70      	pop	{r4, r5, r6, pc}
 800cda6:	f000 f881 	bl	800ceac <__malloc_lock>
 800cdaa:	4a23      	ldr	r2, [pc, #140]	; (800ce38 <_malloc_r+0xb4>)
 800cdac:	6814      	ldr	r4, [r2, #0]
 800cdae:	4621      	mov	r1, r4
 800cdb0:	b991      	cbnz	r1, 800cdd8 <_malloc_r+0x54>
 800cdb2:	4c22      	ldr	r4, [pc, #136]	; (800ce3c <_malloc_r+0xb8>)
 800cdb4:	6823      	ldr	r3, [r4, #0]
 800cdb6:	b91b      	cbnz	r3, 800cdc0 <_malloc_r+0x3c>
 800cdb8:	4630      	mov	r0, r6
 800cdba:	f000 f867 	bl	800ce8c <_sbrk_r>
 800cdbe:	6020      	str	r0, [r4, #0]
 800cdc0:	4629      	mov	r1, r5
 800cdc2:	4630      	mov	r0, r6
 800cdc4:	f000 f862 	bl	800ce8c <_sbrk_r>
 800cdc8:	1c43      	adds	r3, r0, #1
 800cdca:	d126      	bne.n	800ce1a <_malloc_r+0x96>
 800cdcc:	230c      	movs	r3, #12
 800cdce:	6033      	str	r3, [r6, #0]
 800cdd0:	4630      	mov	r0, r6
 800cdd2:	f000 f86c 	bl	800ceae <__malloc_unlock>
 800cdd6:	e7e4      	b.n	800cda2 <_malloc_r+0x1e>
 800cdd8:	680b      	ldr	r3, [r1, #0]
 800cdda:	1b5b      	subs	r3, r3, r5
 800cddc:	d41a      	bmi.n	800ce14 <_malloc_r+0x90>
 800cdde:	2b0b      	cmp	r3, #11
 800cde0:	d90f      	bls.n	800ce02 <_malloc_r+0x7e>
 800cde2:	600b      	str	r3, [r1, #0]
 800cde4:	50cd      	str	r5, [r1, r3]
 800cde6:	18cc      	adds	r4, r1, r3
 800cde8:	4630      	mov	r0, r6
 800cdea:	f000 f860 	bl	800ceae <__malloc_unlock>
 800cdee:	f104 000b 	add.w	r0, r4, #11
 800cdf2:	1d23      	adds	r3, r4, #4
 800cdf4:	f020 0007 	bic.w	r0, r0, #7
 800cdf8:	1ac3      	subs	r3, r0, r3
 800cdfa:	d01b      	beq.n	800ce34 <_malloc_r+0xb0>
 800cdfc:	425a      	negs	r2, r3
 800cdfe:	50e2      	str	r2, [r4, r3]
 800ce00:	bd70      	pop	{r4, r5, r6, pc}
 800ce02:	428c      	cmp	r4, r1
 800ce04:	bf0d      	iteet	eq
 800ce06:	6863      	ldreq	r3, [r4, #4]
 800ce08:	684b      	ldrne	r3, [r1, #4]
 800ce0a:	6063      	strne	r3, [r4, #4]
 800ce0c:	6013      	streq	r3, [r2, #0]
 800ce0e:	bf18      	it	ne
 800ce10:	460c      	movne	r4, r1
 800ce12:	e7e9      	b.n	800cde8 <_malloc_r+0x64>
 800ce14:	460c      	mov	r4, r1
 800ce16:	6849      	ldr	r1, [r1, #4]
 800ce18:	e7ca      	b.n	800cdb0 <_malloc_r+0x2c>
 800ce1a:	1cc4      	adds	r4, r0, #3
 800ce1c:	f024 0403 	bic.w	r4, r4, #3
 800ce20:	42a0      	cmp	r0, r4
 800ce22:	d005      	beq.n	800ce30 <_malloc_r+0xac>
 800ce24:	1a21      	subs	r1, r4, r0
 800ce26:	4630      	mov	r0, r6
 800ce28:	f000 f830 	bl	800ce8c <_sbrk_r>
 800ce2c:	3001      	adds	r0, #1
 800ce2e:	d0cd      	beq.n	800cdcc <_malloc_r+0x48>
 800ce30:	6025      	str	r5, [r4, #0]
 800ce32:	e7d9      	b.n	800cde8 <_malloc_r+0x64>
 800ce34:	bd70      	pop	{r4, r5, r6, pc}
 800ce36:	bf00      	nop
 800ce38:	2000450c 	.word	0x2000450c
 800ce3c:	20004510 	.word	0x20004510

0800ce40 <_realloc_r>:
 800ce40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce42:	4607      	mov	r7, r0
 800ce44:	4614      	mov	r4, r2
 800ce46:	460e      	mov	r6, r1
 800ce48:	b921      	cbnz	r1, 800ce54 <_realloc_r+0x14>
 800ce4a:	4611      	mov	r1, r2
 800ce4c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ce50:	f7ff bf98 	b.w	800cd84 <_malloc_r>
 800ce54:	b922      	cbnz	r2, 800ce60 <_realloc_r+0x20>
 800ce56:	f7ff ff47 	bl	800cce8 <_free_r>
 800ce5a:	4625      	mov	r5, r4
 800ce5c:	4628      	mov	r0, r5
 800ce5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ce60:	f000 f826 	bl	800ceb0 <_malloc_usable_size_r>
 800ce64:	4284      	cmp	r4, r0
 800ce66:	d90f      	bls.n	800ce88 <_realloc_r+0x48>
 800ce68:	4621      	mov	r1, r4
 800ce6a:	4638      	mov	r0, r7
 800ce6c:	f7ff ff8a 	bl	800cd84 <_malloc_r>
 800ce70:	4605      	mov	r5, r0
 800ce72:	2800      	cmp	r0, #0
 800ce74:	d0f2      	beq.n	800ce5c <_realloc_r+0x1c>
 800ce76:	4631      	mov	r1, r6
 800ce78:	4622      	mov	r2, r4
 800ce7a:	f7ff fbe9 	bl	800c650 <memcpy>
 800ce7e:	4631      	mov	r1, r6
 800ce80:	4638      	mov	r0, r7
 800ce82:	f7ff ff31 	bl	800cce8 <_free_r>
 800ce86:	e7e9      	b.n	800ce5c <_realloc_r+0x1c>
 800ce88:	4635      	mov	r5, r6
 800ce8a:	e7e7      	b.n	800ce5c <_realloc_r+0x1c>

0800ce8c <_sbrk_r>:
 800ce8c:	b538      	push	{r3, r4, r5, lr}
 800ce8e:	4c06      	ldr	r4, [pc, #24]	; (800cea8 <_sbrk_r+0x1c>)
 800ce90:	2300      	movs	r3, #0
 800ce92:	4605      	mov	r5, r0
 800ce94:	4608      	mov	r0, r1
 800ce96:	6023      	str	r3, [r4, #0]
 800ce98:	f000 f814 	bl	800cec4 <_sbrk>
 800ce9c:	1c43      	adds	r3, r0, #1
 800ce9e:	d102      	bne.n	800cea6 <_sbrk_r+0x1a>
 800cea0:	6823      	ldr	r3, [r4, #0]
 800cea2:	b103      	cbz	r3, 800cea6 <_sbrk_r+0x1a>
 800cea4:	602b      	str	r3, [r5, #0]
 800cea6:	bd38      	pop	{r3, r4, r5, pc}
 800cea8:	20006a1c 	.word	0x20006a1c

0800ceac <__malloc_lock>:
 800ceac:	4770      	bx	lr

0800ceae <__malloc_unlock>:
 800ceae:	4770      	bx	lr

0800ceb0 <_malloc_usable_size_r>:
 800ceb0:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800ceb4:	2800      	cmp	r0, #0
 800ceb6:	f1a0 0004 	sub.w	r0, r0, #4
 800ceba:	bfbc      	itt	lt
 800cebc:	580b      	ldrlt	r3, [r1, r0]
 800cebe:	18c0      	addlt	r0, r0, r3
 800cec0:	4770      	bx	lr
	...

0800cec4 <_sbrk>:
 800cec4:	4b04      	ldr	r3, [pc, #16]	; (800ced8 <_sbrk+0x14>)
 800cec6:	6819      	ldr	r1, [r3, #0]
 800cec8:	4602      	mov	r2, r0
 800ceca:	b909      	cbnz	r1, 800ced0 <_sbrk+0xc>
 800cecc:	4903      	ldr	r1, [pc, #12]	; (800cedc <_sbrk+0x18>)
 800cece:	6019      	str	r1, [r3, #0]
 800ced0:	6818      	ldr	r0, [r3, #0]
 800ced2:	4402      	add	r2, r0
 800ced4:	601a      	str	r2, [r3, #0]
 800ced6:	4770      	bx	lr
 800ced8:	20004514 	.word	0x20004514
 800cedc:	20006a20 	.word	0x20006a20

0800cee0 <_init>:
 800cee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cee2:	bf00      	nop
 800cee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cee6:	bc08      	pop	{r3}
 800cee8:	469e      	mov	lr, r3
 800ceea:	4770      	bx	lr

0800ceec <_fini>:
 800ceec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ceee:	bf00      	nop
 800cef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cef2:	bc08      	pop	{r3}
 800cef4:	469e      	mov	lr, r3
 800cef6:	4770      	bx	lr
